grammar org.gemoc.monilog.MoniLog4DSL with org.eclipse.xtext.common.Terminals

generate moniLog4DSL "http://www.eclipse.org/gemoc/monilog/MoniLog4DSL"

Model:
	('default-language' defaultLanguageID=(ID | STRING))?
	moniLogSpecs+=MoniLogSpec+;
	
MoniLogSpec:
	'monilog' name=STRING? ('[' level=LogLevel ']')? '{'
		('events' '{' (events+=Event) (',' events+=Event)* '}')?
		('conditions' '{' (conditions+=Condition) (',' conditions+=Condition)* '}')?
		'actions' '{' (actions+=Action) (',' actions+=Action)* '}'
	'}';

enum LogLevel:
	config='CONFIG' | fine='FINE' | finer='FINER' | finest='FINEST' |
	info='INFO' | severe='SEVERE' | warning='WARNING';

Event:
	BeforeEvent | AfterEvent | BeforeAfterEvent;

BeforeEvent:
	'before' ruleID=(ID | STRING) (('frequency^' frequency=INT)? & ('limit' limit=INT)?);

AfterEvent:
	'after' ruleID=(ID | STRING) (('frequency' frequency=INT)? & ('limit' limit=INT)?);

BeforeAfterEvent:
	ruleID=(ID | STRING) (('frequency' frequency=INT)? & ('limit' limit=INT)?);

Condition:
	{TemporalPropertyCondition} 'stream' '(' pattern=TemporalPattern (',' kind=TemporalPropertyConditionKind)? ')' |
	{LanguageExpressionCondition} expression=LanguageExpression;

TemporalPattern:
	pattern=Pattern scope=Scope;

Pattern:
	{Universality} 'always' event=StreamEvent |
	{Existence} 'exists' bound=BoundType event=StreamEvent |
	{Absence} 'never' event=StreamEvent |
	{Precedence} predecessor=StreamEvent 'precedes' successor=StreamEvent |
	{Response} event=StreamEvent 'respondsTo' trigger=StreamEvent;

BoundType:
	ExactBound | LowerBound | UpperBound;

ExactBound:
	n=INT;

LowerBound:
	'atleast' n=INT;

UpperBound:
	'atmost' n=INT;

Scope:
	{Globally} ('globally')? |
	{After} 'after' lowerBound=StreamEvent | {Before} 'before' upperBound=StreamEvent |
	{Between} 'between' lowerBound=StreamEvent 'and' upperBound=StreamEvent |
	{AfterUntil} 'after' lowerBound=StreamEvent 'until' upperBound=StreamEvent;

enum TemporalPropertyConditionKind:
	s='S'|v='V'|nS='nS'|nV='nV';

Action:
	{Notify} 'notify' | Append;

Append:
	'append' appender=Appender;

Appender:
	StreamAppender | FileAppender | ConsoleAppender;

StreamAppender:
	'stream' '(' event=(ID | STRING) ('[' values+=LanguageExpression (',' values+=LanguageExpression)* ']' )? ')';

FileAppender:
	'file' '(' filename=STRING ',' layout=Layout ')';

ConsoleAppender:
	'console' '(' layout=Layout ')';

Layout:
	StringLayout | ExternalLayout;

StringLayout:
	formatString=STRING (',' values+=LanguageExpression)*;

ExternalLayout:
	path=FQN (',' values+=LanguageExpression)*;

StreamEvent:
	eventId=(ID | STRING) ('[' values+=EmptyOrPropertyValue (',' values+=EmptyOrPropertyValue)* ']' )?;

EmptyOrPropertyValue:
	({Empty} | {PropertyValue} id=(ID) ('=' value=LanguageExpression)?);

LanguageExpression:
	{ExplicitLanguageExpression} languageId=(ID | STRING) '(' expression=STRING ')' |
	{DefaultLanguageExpression} expression=STRING;

FQN:
	ID ('.' ID)*;
