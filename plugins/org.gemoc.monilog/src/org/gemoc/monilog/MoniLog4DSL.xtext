grammar org.gemoc.monilog.MoniLog4DSL with org.eclipse.xtext.common.Terminals

generate moniLog4DSL "http://www.eclipse.org/gemoc/monilog/MoniLog4DSL"

Document:
	('default-language' defaultLanguageID=(ID | STRING))?
	(events+=Event* & appenders+=Appender* & layouts+=Layout* & moniLogSpecs+=MoniLogger*);

@Exported
Appender:
	LocalAppender | ExternalAppender;

LocalAppender:
	annotations+=AppenderAnnotation*
	'appender' name=ID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')? '{'
		calls+=AppenderCall (';' calls+=AppenderCall)*
	'}';

ExternalAppender:
	'appender' name=FQN ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')?;

Layout:
	LocalLayout | ExternalLayout;

@Exported
LocalLayout:
	'layout' name=ID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')? '{'
		call=LayoutCall
	'}';

@Exported
ExternalLayout:
	'layout' name=FQN ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')?;

@Exported
MoniLogger:
	annotations+=MoniLoggerAnnotation*
	'monilogger' name=ID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')? ('[' level=LogLevel ']')? '{'
		'event' event=[Event|ID]
		('conditions' '{' (conditions+=Condition) (';' conditions+=Condition)* '}')?
		'actions' '{' (actions+=Action) (';' actions+=Action)* '}'
	'}';

Parameter:
	name=ID;

Event:
	ASTEvent | ComplexEvent | UserEvent;

@Exported
ASTEvent:
	'ast' name=ID '{'
		(before?='before'? & after?='after'?) ruleID=ID
	'}';

@Exported
ComplexEvent:
	'complex' name=ID ('[' kind=TemporalPatternKind ']')? '{'
		pattern=TemporalPattern
	'}';

@Exported
UserEvent:
	'custom' name=ID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')?;

Condition:
	{LanguageExpressionCondition} expression=LanguageExpression;

TemporalPattern:
	pattern=Pattern scope=Scope;

Pattern:
	{Existence} 'exists'? bound=BoundType? event=StreamEvent |
	{Universality} 'always' event=StreamEvent |
	{Absence} 'never' event=StreamEvent |
	{Precedence} predecessor=StreamEvent 'precedes' successor=StreamEvent |
	{Response} event=StreamEvent 'respondsTo' trigger=StreamEvent;

BoundType:
	ExactBound | LowerBound | UpperBound;

ExactBound:
	n=INT;

LowerBound:
	'atleast' n=INT;

UpperBound:
	'atmost' n=INT;

Scope:
	{Globally} ('globally')? |
	{After} 'after' lowerBound=StreamEvent | {Before} 'before' upperBound=StreamEvent |
	{Between} 'between' lowerBound=StreamEvent 'and' upperBound=StreamEvent |
	{AfterUntil} 'after' lowerBound=StreamEvent 'until' upperBound=StreamEvent;

Action:
	LanguageExpression | AppenderCall | EmitEvent | MoniLoggerCall;

AppenderCall:
	appender=AppenderRef '.' 'call' ( '(' args+=AppenderCallArgument (',' args+=AppenderCallArgument)* ')' )?;

AppenderRef:
	appender=[Appender|FQN];

AppenderCallArgument:
	Expression | LayoutCall;

LayoutCall:
	layout=LayoutRef '.' 'call' ( '(' args+=Expression (',' args+=Expression)* ')' )?;

LayoutRef:
	layout=[Layout|FQN];

EmitEvent:
	event=[Event|ID] '.' 'emit' ('(' args+=Expression (',' args+=Expression)* ')' )?;

MoniLoggerCall:
	{StartMoniLogger} monilogger=[MoniLogger|ID] '.' 'start'  ( '(' args+=Expression (',' args+=Expression)* ')' )? |
	{StopMoniLogger} monilogger=[MoniLogger|ID] '.' 'stop';

StreamEvent:
	event=[Event|ID] ('[' values+=EmptyOrPropertyValue (',' values+=EmptyOrPropertyValue)* ']' )?;

EmptyOrPropertyValue:
	({Empty} | {PropertyValue} id=(ID) ('=' value=Expression)?);

Expression:
	ParameterReference | LanguageExpression;

ParameterReference:
	parameter=[Parameter|ID];

LanguageExpression:
	{ExplicitLanguageExpression} languageId=ID '(' expression=STRING ')' |
	{DefaultLanguageExpression} expression=STRING;

enum MoniLoggerAnnotation:
	inactive='@Inactive';

enum AppenderAnnotation:
	async='@Async';

enum LogLevel:
	info='INFO' | config='CONFIG' | fine='FINE' | finer='FINER' |
	finest='FINEST' | severe='SEVERE' | warning='WARNING';

enum TemporalPatternKind:
	s='S'|v='V'|nS='nS'|nV='nV';

FQN:
	ID ('.' ID)*;
