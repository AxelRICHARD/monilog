grammar org.gemoc.monilog.MoniLog with org.eclipse.xtext.common.Terminals

generate moniLog "http://www.gemoc.org/monilog/MoniLog"

Document:
	'package' name=QualifiedName
	imports+=Import*
	(events+=Event* & appenders+=Appender* & layouts+=Layout* & moniloggers+=MoniLogger*);

Import:
	'import' importedNamespace=QualifiedNameWithWildcard;

@Exported
Appender:
	LocalAppender | ExternalAppender;

LocalAppender:
	annotations+=AppenderAnnotation*
	'appender' name=ID ('(' parameterDecl=ParameterDeclVarArgs ')')? '{'
		calls+=AppenderCall (';' calls+=AppenderCall)* ';'?
	'}';

ExternalAppender:
	'appender' name=ID ('(' parameterDecl=ParameterDeclVarArgs ')')?;

Layout:
	LocalLayout | ExternalLayout;

@Exported
LocalLayout:
	'layout' name=ID ('(' parameterDecl=ParameterDeclVarArgs ')')? '{'
		call=LayoutCall
	'}';

@Exported
ExternalLayout:
	'layout' name=ID ('(' parameterDecl=ParameterDeclVarArgs ')')?;

ParameterDeclVarArgs returns ParameterDecl:
	{ParameterDecl}
	(parameters+=Parameter (',' parameters+=Parameter)* (',' varArgs=Parameter '...')?)?;

ParameterDeclNoVarArgs returns ParameterDecl:
	{ParameterDecl}
	(parameters+=Parameter (',' parameters+=Parameter)*)?;

@Exported
MoniLogger:
	annotations+=MoniLoggerAnnotation*
	'monilogger' name=ID ('(' parameterDecl=ParameterDeclVarArgs ')')? ('[' level=LogLevel ']')? '{'
		'event' streamEvent=StreamEvent
		('conditions' '{' (conditions+=Condition) (';' conditions+=Condition)* ';'? '}')?
		'actions' '{' (actions+=Action) (';' actions+=Action)* ';'? '}'
	'}';

Parameter:
	name=ID;

@Exported
Event:
	({ASTEvent}
	'call' name=ID ('(' parameterDecl=ParameterDeclNoVarArgs ')')? '{'
		kind=ASTEventKind ruleID=ID
	'}') |
	({ComplexEvent} 'complex' name=ID ('[' kind=TemporalPatternKind ']')? ('(' parameterDecl=ParameterDeclNoVarArgs ')')? '{'
		pattern=TemporalPattern
	'}') |
	({UserEvent} 'custom' name=ID ('(' parameterDecl=ParameterDeclNoVarArgs ')')?);

ASTEventKind:
	{BeforeASTEvent} 'before'| {AfterASTEvent} 'after';

Condition:
	expression=LanguageExpression;

TemporalPattern:
	pattern=Pattern scope=Scope;

Pattern:
	{Existence} 'exists'? bound=BoundType? event=StreamEvent |
	{Universality} 'always' event=StreamEvent |
	{Absence} 'never' event=StreamEvent |
	{Precedence} predecessor=StreamEvent 'precedes' successor=StreamEvent |
	{Response} event=StreamEvent 'respondsTo' trigger=StreamEvent;

BoundType:
	ExactBound | LowerBound | UpperBound;

ExactBound:
	n=INT;

LowerBound:
	'atleast' n=INT;

UpperBound:
	'atmost' n=INT;

Scope:
	{Globally} ('globally')? |
	{After} 'after' lowerBound=StreamEvent | {Before} 'before' upperBound=StreamEvent |
	{Between} 'between' lowerBound=StreamEvent 'and' upperBound=StreamEvent |
	{AfterUntil} 'after' lowerBound=StreamEvent 'until' upperBound=StreamEvent;

Action:
	LanguageExpression | AppenderCall | EmitEvent | SetVariable | MoniloggerCall;

AppenderCall:
	appender=[Appender|QualifiedName] '.' 'call' ( '(' args+=AppenderCallArgument (',' args+=AppenderCallArgument)* ')' )?;

AppenderCallArgument returns CallArgument:
	Expression | LayoutCall;

LayoutCall:
	layout=[Layout|QualifiedName] '.' 'call' ( '(' args+=LayoutCallArgument (',' args+=LayoutCallArgument)* ')' )?;

LayoutCallArgument returns CallArgument:
	Expression;

EmitEvent:
	event=[UserEvent|ID] '.' 'emit' ('(' args+=Expression (',' args+=Expression)* ')' )?;

SetVariable:
	'set' '(' variable=STRING ',' value=LanguageExpression ')';

MoniloggerCall:
	{StartMoniLogger} monilogger=[MoniLogger|ID] '.' 'start' ( '(' args+=Expression (',' args+=Expression)* ')' )? |
	{StopMoniLogger} monilogger=[MoniLogger|ID] '.' 'stop';

StreamEvent:
	event=[Event|ID] ('(' values+=EmptyOrPropertyValue (',' values+=EmptyOrPropertyValue)* ')' )?;

EmptyOrPropertyValue:
	{Empty} | PropertyValue;

Expression:
	ParameterReference | LanguageExpression;

ParameterReference:
	parameter=[Parameter|ID];

PropertyValue:
	id=ID ('=' value=Expression)? | value=LanguageExpression;

LanguageExpression:
	languageId=ID '(' expression=STRING ')';

enum MoniLoggerAnnotation:
	inactive='@Inactive';

enum AppenderAnnotation:
	async='@Async';

enum LogLevel:
	info='INFO' | config='CONFIG' | fine='FINE' | finer='FINER' |
	finest='FINEST' | severe='SEVERE' | warning='WARNING';

enum TemporalPatternKind:
	s='S'|v='V'|nS='nS'|nV='nV';

QualifiedName: ID ('.' ID)*;
QualifiedNameWithWildcard: QualifiedName '.*'?;