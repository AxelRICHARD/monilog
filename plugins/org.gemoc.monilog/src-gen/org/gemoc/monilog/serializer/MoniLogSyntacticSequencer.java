/*
 * generated by Xtext 2.21.0
 */
package org.gemoc.monilog.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.gemoc.monilog.services.MoniLogGrammarAccess;

@SuppressWarnings("all")
public class MoniLogSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MoniLogGrammarAccess grammarAccess;
	protected AbstractElementAlias match_LocalAppender_SemicolonKeyword_7_q;
	protected AbstractElementAlias match_MoniLogger_SemicolonKeyword_13_q;
	protected AbstractElementAlias match_MoniLogger_SemicolonKeyword_8_4_q;
	protected AbstractElementAlias match_Pattern_ExistsKeyword_0_1_q;
	protected AbstractElementAlias match_Scope_GloballyKeyword_0_1_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MoniLogGrammarAccess) access;
		match_LocalAppender_SemicolonKeyword_7_q = new TokenAlias(false, true, grammarAccess.getLocalAppenderAccess().getSemicolonKeyword_7());
		match_MoniLogger_SemicolonKeyword_13_q = new TokenAlias(false, true, grammarAccess.getMoniLoggerAccess().getSemicolonKeyword_13());
		match_MoniLogger_SemicolonKeyword_8_4_q = new TokenAlias(false, true, grammarAccess.getMoniLoggerAccess().getSemicolonKeyword_8_4());
		match_Pattern_ExistsKeyword_0_1_q = new TokenAlias(false, true, grammarAccess.getPatternAccess().getExistsKeyword_0_1());
		match_Scope_GloballyKeyword_0_1_q = new TokenAlias(false, true, grammarAccess.getScopeAccess().getGloballyKeyword_0_1());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_LocalAppender_SemicolonKeyword_7_q.equals(syntax))
				emit_LocalAppender_SemicolonKeyword_7_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MoniLogger_SemicolonKeyword_13_q.equals(syntax))
				emit_MoniLogger_SemicolonKeyword_13_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MoniLogger_SemicolonKeyword_8_4_q.equals(syntax))
				emit_MoniLogger_SemicolonKeyword_8_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Pattern_ExistsKeyword_0_1_q.equals(syntax))
				emit_Pattern_ExistsKeyword_0_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Scope_GloballyKeyword_0_1_q.equals(syntax))
				emit_Scope_GloballyKeyword_0_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     calls+=AppenderCall (ambiguity) '}' (rule end)
	 */
	protected void emit_LocalAppender_SemicolonKeyword_7_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     actions+=Action (ambiguity) '}' '}' (rule end)
	 */
	protected void emit_MoniLogger_SemicolonKeyword_13_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     conditions+=Condition (ambiguity) '}' 'actions' '{' actions+=Action
	 */
	protected void emit_MoniLogger_SemicolonKeyword_8_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'exists'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) bound=BoundType
	 *     (rule start) (ambiguity) event=StreamEvent
	 */
	protected void emit_Pattern_ExistsKeyword_0_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'globally'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Scope_GloballyKeyword_0_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
