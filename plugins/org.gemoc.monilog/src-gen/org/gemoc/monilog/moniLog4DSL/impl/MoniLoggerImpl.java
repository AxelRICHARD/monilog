/**
 * generated by Xtext 2.22.0
 */
package org.gemoc.monilog.moniLog4DSL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.gemoc.monilog.moniLog4DSL.Action;
import org.gemoc.monilog.moniLog4DSL.Condition;
import org.gemoc.monilog.moniLog4DSL.LogLevel;
import org.gemoc.monilog.moniLog4DSL.MoniLog4DSLPackage;
import org.gemoc.monilog.moniLog4DSL.MoniLogger;
import org.gemoc.monilog.moniLog4DSL.MoniLoggerAnnotation;
import org.gemoc.monilog.moniLog4DSL.ParameterDecl;
import org.gemoc.monilog.moniLog4DSL.StreamEvent;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Moni Logger</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.gemoc.monilog.moniLog4DSL.impl.MoniLoggerImpl#getAnnotations <em>Annotations</em>}</li>
 *   <li>{@link org.gemoc.monilog.moniLog4DSL.impl.MoniLoggerImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.gemoc.monilog.moniLog4DSL.impl.MoniLoggerImpl#getParameterDecl <em>Parameter Decl</em>}</li>
 *   <li>{@link org.gemoc.monilog.moniLog4DSL.impl.MoniLoggerImpl#getLevel <em>Level</em>}</li>
 *   <li>{@link org.gemoc.monilog.moniLog4DSL.impl.MoniLoggerImpl#getStreamEvent <em>Stream Event</em>}</li>
 *   <li>{@link org.gemoc.monilog.moniLog4DSL.impl.MoniLoggerImpl#getConditions <em>Conditions</em>}</li>
 *   <li>{@link org.gemoc.monilog.moniLog4DSL.impl.MoniLoggerImpl#getActions <em>Actions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MoniLoggerImpl extends MinimalEObjectImpl.Container implements MoniLogger
{
  /**
   * The cached value of the '{@link #getAnnotations() <em>Annotations</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAnnotations()
   * @generated
   * @ordered
   */
  protected EList<MoniLoggerAnnotation> annotations;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getParameterDecl() <em>Parameter Decl</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParameterDecl()
   * @generated
   * @ordered
   */
  protected ParameterDecl parameterDecl;

  /**
   * The default value of the '{@link #getLevel() <em>Level</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLevel()
   * @generated
   * @ordered
   */
  protected static final LogLevel LEVEL_EDEFAULT = LogLevel.INFO;

  /**
   * The cached value of the '{@link #getLevel() <em>Level</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLevel()
   * @generated
   * @ordered
   */
  protected LogLevel level = LEVEL_EDEFAULT;

  /**
   * The cached value of the '{@link #getStreamEvent() <em>Stream Event</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStreamEvent()
   * @generated
   * @ordered
   */
  protected StreamEvent streamEvent;

  /**
   * The cached value of the '{@link #getConditions() <em>Conditions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditions()
   * @generated
   * @ordered
   */
  protected EList<Condition> conditions;

  /**
   * The cached value of the '{@link #getActions() <em>Actions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActions()
   * @generated
   * @ordered
   */
  protected EList<Action> actions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MoniLoggerImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MoniLog4DSLPackage.Literals.MONI_LOGGER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<MoniLoggerAnnotation> getAnnotations()
  {
    if (annotations == null)
    {
      annotations = new EDataTypeEList<MoniLoggerAnnotation>(MoniLoggerAnnotation.class, this, MoniLog4DSLPackage.MONI_LOGGER__ANNOTATIONS);
    }
    return annotations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoniLog4DSLPackage.MONI_LOGGER__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParameterDecl getParameterDecl()
  {
    return parameterDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetParameterDecl(ParameterDecl newParameterDecl, NotificationChain msgs)
  {
    ParameterDecl oldParameterDecl = parameterDecl;
    parameterDecl = newParameterDecl;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MoniLog4DSLPackage.MONI_LOGGER__PARAMETER_DECL, oldParameterDecl, newParameterDecl);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setParameterDecl(ParameterDecl newParameterDecl)
  {
    if (newParameterDecl != parameterDecl)
    {
      NotificationChain msgs = null;
      if (parameterDecl != null)
        msgs = ((InternalEObject)parameterDecl).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MoniLog4DSLPackage.MONI_LOGGER__PARAMETER_DECL, null, msgs);
      if (newParameterDecl != null)
        msgs = ((InternalEObject)newParameterDecl).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MoniLog4DSLPackage.MONI_LOGGER__PARAMETER_DECL, null, msgs);
      msgs = basicSetParameterDecl(newParameterDecl, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoniLog4DSLPackage.MONI_LOGGER__PARAMETER_DECL, newParameterDecl, newParameterDecl));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogLevel getLevel()
  {
    return level;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLevel(LogLevel newLevel)
  {
    LogLevel oldLevel = level;
    level = newLevel == null ? LEVEL_EDEFAULT : newLevel;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoniLog4DSLPackage.MONI_LOGGER__LEVEL, oldLevel, level));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StreamEvent getStreamEvent()
  {
    return streamEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStreamEvent(StreamEvent newStreamEvent, NotificationChain msgs)
  {
    StreamEvent oldStreamEvent = streamEvent;
    streamEvent = newStreamEvent;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MoniLog4DSLPackage.MONI_LOGGER__STREAM_EVENT, oldStreamEvent, newStreamEvent);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStreamEvent(StreamEvent newStreamEvent)
  {
    if (newStreamEvent != streamEvent)
    {
      NotificationChain msgs = null;
      if (streamEvent != null)
        msgs = ((InternalEObject)streamEvent).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MoniLog4DSLPackage.MONI_LOGGER__STREAM_EVENT, null, msgs);
      if (newStreamEvent != null)
        msgs = ((InternalEObject)newStreamEvent).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MoniLog4DSLPackage.MONI_LOGGER__STREAM_EVENT, null, msgs);
      msgs = basicSetStreamEvent(newStreamEvent, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoniLog4DSLPackage.MONI_LOGGER__STREAM_EVENT, newStreamEvent, newStreamEvent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Condition> getConditions()
  {
    if (conditions == null)
    {
      conditions = new EObjectContainmentEList<Condition>(Condition.class, this, MoniLog4DSLPackage.MONI_LOGGER__CONDITIONS);
    }
    return conditions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Action> getActions()
  {
    if (actions == null)
    {
      actions = new EObjectContainmentEList<Action>(Action.class, this, MoniLog4DSLPackage.MONI_LOGGER__ACTIONS);
    }
    return actions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MoniLog4DSLPackage.MONI_LOGGER__PARAMETER_DECL:
        return basicSetParameterDecl(null, msgs);
      case MoniLog4DSLPackage.MONI_LOGGER__STREAM_EVENT:
        return basicSetStreamEvent(null, msgs);
      case MoniLog4DSLPackage.MONI_LOGGER__CONDITIONS:
        return ((InternalEList<?>)getConditions()).basicRemove(otherEnd, msgs);
      case MoniLog4DSLPackage.MONI_LOGGER__ACTIONS:
        return ((InternalEList<?>)getActions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MoniLog4DSLPackage.MONI_LOGGER__ANNOTATIONS:
        return getAnnotations();
      case MoniLog4DSLPackage.MONI_LOGGER__NAME:
        return getName();
      case MoniLog4DSLPackage.MONI_LOGGER__PARAMETER_DECL:
        return getParameterDecl();
      case MoniLog4DSLPackage.MONI_LOGGER__LEVEL:
        return getLevel();
      case MoniLog4DSLPackage.MONI_LOGGER__STREAM_EVENT:
        return getStreamEvent();
      case MoniLog4DSLPackage.MONI_LOGGER__CONDITIONS:
        return getConditions();
      case MoniLog4DSLPackage.MONI_LOGGER__ACTIONS:
        return getActions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MoniLog4DSLPackage.MONI_LOGGER__ANNOTATIONS:
        getAnnotations().clear();
        getAnnotations().addAll((Collection<? extends MoniLoggerAnnotation>)newValue);
        return;
      case MoniLog4DSLPackage.MONI_LOGGER__NAME:
        setName((String)newValue);
        return;
      case MoniLog4DSLPackage.MONI_LOGGER__PARAMETER_DECL:
        setParameterDecl((ParameterDecl)newValue);
        return;
      case MoniLog4DSLPackage.MONI_LOGGER__LEVEL:
        setLevel((LogLevel)newValue);
        return;
      case MoniLog4DSLPackage.MONI_LOGGER__STREAM_EVENT:
        setStreamEvent((StreamEvent)newValue);
        return;
      case MoniLog4DSLPackage.MONI_LOGGER__CONDITIONS:
        getConditions().clear();
        getConditions().addAll((Collection<? extends Condition>)newValue);
        return;
      case MoniLog4DSLPackage.MONI_LOGGER__ACTIONS:
        getActions().clear();
        getActions().addAll((Collection<? extends Action>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MoniLog4DSLPackage.MONI_LOGGER__ANNOTATIONS:
        getAnnotations().clear();
        return;
      case MoniLog4DSLPackage.MONI_LOGGER__NAME:
        setName(NAME_EDEFAULT);
        return;
      case MoniLog4DSLPackage.MONI_LOGGER__PARAMETER_DECL:
        setParameterDecl((ParameterDecl)null);
        return;
      case MoniLog4DSLPackage.MONI_LOGGER__LEVEL:
        setLevel(LEVEL_EDEFAULT);
        return;
      case MoniLog4DSLPackage.MONI_LOGGER__STREAM_EVENT:
        setStreamEvent((StreamEvent)null);
        return;
      case MoniLog4DSLPackage.MONI_LOGGER__CONDITIONS:
        getConditions().clear();
        return;
      case MoniLog4DSLPackage.MONI_LOGGER__ACTIONS:
        getActions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MoniLog4DSLPackage.MONI_LOGGER__ANNOTATIONS:
        return annotations != null && !annotations.isEmpty();
      case MoniLog4DSLPackage.MONI_LOGGER__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case MoniLog4DSLPackage.MONI_LOGGER__PARAMETER_DECL:
        return parameterDecl != null;
      case MoniLog4DSLPackage.MONI_LOGGER__LEVEL:
        return level != LEVEL_EDEFAULT;
      case MoniLog4DSLPackage.MONI_LOGGER__STREAM_EVENT:
        return streamEvent != null;
      case MoniLog4DSLPackage.MONI_LOGGER__CONDITIONS:
        return conditions != null && !conditions.isEmpty();
      case MoniLog4DSLPackage.MONI_LOGGER__ACTIONS:
        return actions != null && !actions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (annotations: ");
    result.append(annotations);
    result.append(", name: ");
    result.append(name);
    result.append(", level: ");
    result.append(level);
    result.append(')');
    return result.toString();
  }

} //MoniLoggerImpl
