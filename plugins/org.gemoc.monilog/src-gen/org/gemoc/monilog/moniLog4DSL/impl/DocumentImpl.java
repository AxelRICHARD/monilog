/**
 * generated by Xtext 2.22.0
 */
package org.gemoc.monilog.moniLog4DSL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.gemoc.monilog.moniLog4DSL.Appender;
import org.gemoc.monilog.moniLog4DSL.Document;
import org.gemoc.monilog.moniLog4DSL.Event;
import org.gemoc.monilog.moniLog4DSL.Import;
import org.gemoc.monilog.moniLog4DSL.Layout;
import org.gemoc.monilog.moniLog4DSL.MoniLog4DSLPackage;
import org.gemoc.monilog.moniLog4DSL.MoniLogger;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Document</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.gemoc.monilog.moniLog4DSL.impl.DocumentImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.gemoc.monilog.moniLog4DSL.impl.DocumentImpl#getImports <em>Imports</em>}</li>
 *   <li>{@link org.gemoc.monilog.moniLog4DSL.impl.DocumentImpl#getEvents <em>Events</em>}</li>
 *   <li>{@link org.gemoc.monilog.moniLog4DSL.impl.DocumentImpl#getAppenders <em>Appenders</em>}</li>
 *   <li>{@link org.gemoc.monilog.moniLog4DSL.impl.DocumentImpl#getLayouts <em>Layouts</em>}</li>
 *   <li>{@link org.gemoc.monilog.moniLog4DSL.impl.DocumentImpl#getMoniloggers <em>Moniloggers</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DocumentImpl extends MinimalEObjectImpl.Container implements Document
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getImports() <em>Imports</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImports()
   * @generated
   * @ordered
   */
  protected EList<Import> imports;

  /**
   * The cached value of the '{@link #getEvents() <em>Events</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEvents()
   * @generated
   * @ordered
   */
  protected EList<Event> events;

  /**
   * The cached value of the '{@link #getAppenders() <em>Appenders</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAppenders()
   * @generated
   * @ordered
   */
  protected EList<Appender> appenders;

  /**
   * The cached value of the '{@link #getLayouts() <em>Layouts</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLayouts()
   * @generated
   * @ordered
   */
  protected EList<Layout> layouts;

  /**
   * The cached value of the '{@link #getMoniloggers() <em>Moniloggers</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMoniloggers()
   * @generated
   * @ordered
   */
  protected EList<MoniLogger> moniloggers;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DocumentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MoniLog4DSLPackage.Literals.DOCUMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoniLog4DSLPackage.DOCUMENT__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Import> getImports()
  {
    if (imports == null)
    {
      imports = new EObjectContainmentEList<Import>(Import.class, this, MoniLog4DSLPackage.DOCUMENT__IMPORTS);
    }
    return imports;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Event> getEvents()
  {
    if (events == null)
    {
      events = new EObjectContainmentEList<Event>(Event.class, this, MoniLog4DSLPackage.DOCUMENT__EVENTS);
    }
    return events;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Appender> getAppenders()
  {
    if (appenders == null)
    {
      appenders = new EObjectContainmentEList<Appender>(Appender.class, this, MoniLog4DSLPackage.DOCUMENT__APPENDERS);
    }
    return appenders;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Layout> getLayouts()
  {
    if (layouts == null)
    {
      layouts = new EObjectContainmentEList<Layout>(Layout.class, this, MoniLog4DSLPackage.DOCUMENT__LAYOUTS);
    }
    return layouts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<MoniLogger> getMoniloggers()
  {
    if (moniloggers == null)
    {
      moniloggers = new EObjectContainmentEList<MoniLogger>(MoniLogger.class, this, MoniLog4DSLPackage.DOCUMENT__MONILOGGERS);
    }
    return moniloggers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MoniLog4DSLPackage.DOCUMENT__IMPORTS:
        return ((InternalEList<?>)getImports()).basicRemove(otherEnd, msgs);
      case MoniLog4DSLPackage.DOCUMENT__EVENTS:
        return ((InternalEList<?>)getEvents()).basicRemove(otherEnd, msgs);
      case MoniLog4DSLPackage.DOCUMENT__APPENDERS:
        return ((InternalEList<?>)getAppenders()).basicRemove(otherEnd, msgs);
      case MoniLog4DSLPackage.DOCUMENT__LAYOUTS:
        return ((InternalEList<?>)getLayouts()).basicRemove(otherEnd, msgs);
      case MoniLog4DSLPackage.DOCUMENT__MONILOGGERS:
        return ((InternalEList<?>)getMoniloggers()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MoniLog4DSLPackage.DOCUMENT__NAME:
        return getName();
      case MoniLog4DSLPackage.DOCUMENT__IMPORTS:
        return getImports();
      case MoniLog4DSLPackage.DOCUMENT__EVENTS:
        return getEvents();
      case MoniLog4DSLPackage.DOCUMENT__APPENDERS:
        return getAppenders();
      case MoniLog4DSLPackage.DOCUMENT__LAYOUTS:
        return getLayouts();
      case MoniLog4DSLPackage.DOCUMENT__MONILOGGERS:
        return getMoniloggers();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MoniLog4DSLPackage.DOCUMENT__NAME:
        setName((String)newValue);
        return;
      case MoniLog4DSLPackage.DOCUMENT__IMPORTS:
        getImports().clear();
        getImports().addAll((Collection<? extends Import>)newValue);
        return;
      case MoniLog4DSLPackage.DOCUMENT__EVENTS:
        getEvents().clear();
        getEvents().addAll((Collection<? extends Event>)newValue);
        return;
      case MoniLog4DSLPackage.DOCUMENT__APPENDERS:
        getAppenders().clear();
        getAppenders().addAll((Collection<? extends Appender>)newValue);
        return;
      case MoniLog4DSLPackage.DOCUMENT__LAYOUTS:
        getLayouts().clear();
        getLayouts().addAll((Collection<? extends Layout>)newValue);
        return;
      case MoniLog4DSLPackage.DOCUMENT__MONILOGGERS:
        getMoniloggers().clear();
        getMoniloggers().addAll((Collection<? extends MoniLogger>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MoniLog4DSLPackage.DOCUMENT__NAME:
        setName(NAME_EDEFAULT);
        return;
      case MoniLog4DSLPackage.DOCUMENT__IMPORTS:
        getImports().clear();
        return;
      case MoniLog4DSLPackage.DOCUMENT__EVENTS:
        getEvents().clear();
        return;
      case MoniLog4DSLPackage.DOCUMENT__APPENDERS:
        getAppenders().clear();
        return;
      case MoniLog4DSLPackage.DOCUMENT__LAYOUTS:
        getLayouts().clear();
        return;
      case MoniLog4DSLPackage.DOCUMENT__MONILOGGERS:
        getMoniloggers().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MoniLog4DSLPackage.DOCUMENT__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case MoniLog4DSLPackage.DOCUMENT__IMPORTS:
        return imports != null && !imports.isEmpty();
      case MoniLog4DSLPackage.DOCUMENT__EVENTS:
        return events != null && !events.isEmpty();
      case MoniLog4DSLPackage.DOCUMENT__APPENDERS:
        return appenders != null && !appenders.isEmpty();
      case MoniLog4DSLPackage.DOCUMENT__LAYOUTS:
        return layouts != null && !layouts.isEmpty();
      case MoniLog4DSLPackage.DOCUMENT__MONILOGGERS:
        return moniloggers != null && !moniloggers.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //DocumentImpl
