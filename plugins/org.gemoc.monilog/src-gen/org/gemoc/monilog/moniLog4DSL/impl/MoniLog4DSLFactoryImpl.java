/**
 * generated by Xtext 2.22.0
 */
package org.gemoc.monilog.moniLog4DSL.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.gemoc.monilog.moniLog4DSL.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MoniLog4DSLFactoryImpl extends EFactoryImpl implements MoniLog4DSLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MoniLog4DSLFactory init()
  {
    try
    {
      MoniLog4DSLFactory theMoniLog4DSLFactory = (MoniLog4DSLFactory)EPackage.Registry.INSTANCE.getEFactory(MoniLog4DSLPackage.eNS_URI);
      if (theMoniLog4DSLFactory != null)
      {
        return theMoniLog4DSLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MoniLog4DSLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MoniLog4DSLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MoniLog4DSLPackage.DOCUMENT: return createDocument();
      case MoniLog4DSLPackage.IMPORT: return createImport();
      case MoniLog4DSLPackage.APPENDER: return createAppender();
      case MoniLog4DSLPackage.LOCAL_APPENDER: return createLocalAppender();
      case MoniLog4DSLPackage.EXTERNAL_APPENDER: return createExternalAppender();
      case MoniLog4DSLPackage.LAYOUT: return createLayout();
      case MoniLog4DSLPackage.LOCAL_LAYOUT: return createLocalLayout();
      case MoniLog4DSLPackage.EXTERNAL_LAYOUT: return createExternalLayout();
      case MoniLog4DSLPackage.PARAMETER_DECL: return createParameterDecl();
      case MoniLog4DSLPackage.MONI_LOGGER: return createMoniLogger();
      case MoniLog4DSLPackage.PARAMETER: return createParameter();
      case MoniLog4DSLPackage.EVENT: return createEvent();
      case MoniLog4DSLPackage.AST_EVENT_KIND: return createASTEventKind();
      case MoniLog4DSLPackage.CONDITION: return createCondition();
      case MoniLog4DSLPackage.TEMPORAL_PATTERN: return createTemporalPattern();
      case MoniLog4DSLPackage.PATTERN: return createPattern();
      case MoniLog4DSLPackage.BOUND_TYPE: return createBoundType();
      case MoniLog4DSLPackage.EXACT_BOUND: return createExactBound();
      case MoniLog4DSLPackage.LOWER_BOUND: return createLowerBound();
      case MoniLog4DSLPackage.UPPER_BOUND: return createUpperBound();
      case MoniLog4DSLPackage.SCOPE: return createScope();
      case MoniLog4DSLPackage.ACTION: return createAction();
      case MoniLog4DSLPackage.APPENDER_CALL: return createAppenderCall();
      case MoniLog4DSLPackage.CALL_ARGUMENT: return createCallArgument();
      case MoniLog4DSLPackage.LAYOUT_CALL: return createLayoutCall();
      case MoniLog4DSLPackage.EMIT_EVENT: return createEmitEvent();
      case MoniLog4DSLPackage.SET_VARIABLE: return createSetVariable();
      case MoniLog4DSLPackage.MONILOGGER_CALL: return createMoniloggerCall();
      case MoniLog4DSLPackage.STREAM_EVENT: return createStreamEvent();
      case MoniLog4DSLPackage.EMPTY_OR_PROPERTY_VALUE: return createEmptyOrPropertyValue();
      case MoniLog4DSLPackage.EXPRESSION: return createExpression();
      case MoniLog4DSLPackage.PARAMETER_REFERENCE: return createParameterReference();
      case MoniLog4DSLPackage.PROPERTY_VALUE: return createPropertyValue();
      case MoniLog4DSLPackage.LANGUAGE_EXPRESSION: return createLanguageExpression();
      case MoniLog4DSLPackage.AST_EVENT: return createASTEvent();
      case MoniLog4DSLPackage.COMPLEX_EVENT: return createComplexEvent();
      case MoniLog4DSLPackage.USER_EVENT: return createUserEvent();
      case MoniLog4DSLPackage.BEFORE_AST_EVENT: return createBeforeASTEvent();
      case MoniLog4DSLPackage.AFTER_AST_EVENT: return createAfterASTEvent();
      case MoniLog4DSLPackage.EXISTENCE: return createExistence();
      case MoniLog4DSLPackage.UNIVERSALITY: return createUniversality();
      case MoniLog4DSLPackage.ABSENCE: return createAbsence();
      case MoniLog4DSLPackage.PRECEDENCE: return createPrecedence();
      case MoniLog4DSLPackage.RESPONSE: return createResponse();
      case MoniLog4DSLPackage.GLOBALLY: return createGlobally();
      case MoniLog4DSLPackage.AFTER: return createAfter();
      case MoniLog4DSLPackage.BEFORE: return createBefore();
      case MoniLog4DSLPackage.BETWEEN: return createBetween();
      case MoniLog4DSLPackage.AFTER_UNTIL: return createAfterUntil();
      case MoniLog4DSLPackage.START_MONI_LOGGER: return createStartMoniLogger();
      case MoniLog4DSLPackage.STOP_MONI_LOGGER: return createStopMoniLogger();
      case MoniLog4DSLPackage.EMPTY: return createEmpty();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MoniLog4DSLPackage.MONI_LOGGER_ANNOTATION:
        return createMoniLoggerAnnotationFromString(eDataType, initialValue);
      case MoniLog4DSLPackage.APPENDER_ANNOTATION:
        return createAppenderAnnotationFromString(eDataType, initialValue);
      case MoniLog4DSLPackage.LOG_LEVEL:
        return createLogLevelFromString(eDataType, initialValue);
      case MoniLog4DSLPackage.TEMPORAL_PATTERN_KIND:
        return createTemporalPatternKindFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MoniLog4DSLPackage.MONI_LOGGER_ANNOTATION:
        return convertMoniLoggerAnnotationToString(eDataType, instanceValue);
      case MoniLog4DSLPackage.APPENDER_ANNOTATION:
        return convertAppenderAnnotationToString(eDataType, instanceValue);
      case MoniLog4DSLPackage.LOG_LEVEL:
        return convertLogLevelToString(eDataType, instanceValue);
      case MoniLog4DSLPackage.TEMPORAL_PATTERN_KIND:
        return convertTemporalPatternKindToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Document createDocument()
  {
    DocumentImpl document = new DocumentImpl();
    return document;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Appender createAppender()
  {
    AppenderImpl appender = new AppenderImpl();
    return appender;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LocalAppender createLocalAppender()
  {
    LocalAppenderImpl localAppender = new LocalAppenderImpl();
    return localAppender;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExternalAppender createExternalAppender()
  {
    ExternalAppenderImpl externalAppender = new ExternalAppenderImpl();
    return externalAppender;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Layout createLayout()
  {
    LayoutImpl layout = new LayoutImpl();
    return layout;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LocalLayout createLocalLayout()
  {
    LocalLayoutImpl localLayout = new LocalLayoutImpl();
    return localLayout;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExternalLayout createExternalLayout()
  {
    ExternalLayoutImpl externalLayout = new ExternalLayoutImpl();
    return externalLayout;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParameterDecl createParameterDecl()
  {
    ParameterDeclImpl parameterDecl = new ParameterDeclImpl();
    return parameterDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MoniLogger createMoniLogger()
  {
    MoniLoggerImpl moniLogger = new MoniLoggerImpl();
    return moniLogger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Event createEvent()
  {
    EventImpl event = new EventImpl();
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ASTEventKind createASTEventKind()
  {
    ASTEventKindImpl astEventKind = new ASTEventKindImpl();
    return astEventKind;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition createCondition()
  {
    ConditionImpl condition = new ConditionImpl();
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TemporalPattern createTemporalPattern()
  {
    TemporalPatternImpl temporalPattern = new TemporalPatternImpl();
    return temporalPattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Pattern createPattern()
  {
    PatternImpl pattern = new PatternImpl();
    return pattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BoundType createBoundType()
  {
    BoundTypeImpl boundType = new BoundTypeImpl();
    return boundType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExactBound createExactBound()
  {
    ExactBoundImpl exactBound = new ExactBoundImpl();
    return exactBound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LowerBound createLowerBound()
  {
    LowerBoundImpl lowerBound = new LowerBoundImpl();
    return lowerBound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UpperBound createUpperBound()
  {
    UpperBoundImpl upperBound = new UpperBoundImpl();
    return upperBound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Scope createScope()
  {
    ScopeImpl scope = new ScopeImpl();
    return scope;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Action createAction()
  {
    ActionImpl action = new ActionImpl();
    return action;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AppenderCall createAppenderCall()
  {
    AppenderCallImpl appenderCall = new AppenderCallImpl();
    return appenderCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CallArgument createCallArgument()
  {
    CallArgumentImpl callArgument = new CallArgumentImpl();
    return callArgument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LayoutCall createLayoutCall()
  {
    LayoutCallImpl layoutCall = new LayoutCallImpl();
    return layoutCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EmitEvent createEmitEvent()
  {
    EmitEventImpl emitEvent = new EmitEventImpl();
    return emitEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetVariable createSetVariable()
  {
    SetVariableImpl setVariable = new SetVariableImpl();
    return setVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MoniloggerCall createMoniloggerCall()
  {
    MoniloggerCallImpl moniloggerCall = new MoniloggerCallImpl();
    return moniloggerCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StreamEvent createStreamEvent()
  {
    StreamEventImpl streamEvent = new StreamEventImpl();
    return streamEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EmptyOrPropertyValue createEmptyOrPropertyValue()
  {
    EmptyOrPropertyValueImpl emptyOrPropertyValue = new EmptyOrPropertyValueImpl();
    return emptyOrPropertyValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParameterReference createParameterReference()
  {
    ParameterReferenceImpl parameterReference = new ParameterReferenceImpl();
    return parameterReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyValue createPropertyValue()
  {
    PropertyValueImpl propertyValue = new PropertyValueImpl();
    return propertyValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LanguageExpression createLanguageExpression()
  {
    LanguageExpressionImpl languageExpression = new LanguageExpressionImpl();
    return languageExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ASTEvent createASTEvent()
  {
    ASTEventImpl astEvent = new ASTEventImpl();
    return astEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComplexEvent createComplexEvent()
  {
    ComplexEventImpl complexEvent = new ComplexEventImpl();
    return complexEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UserEvent createUserEvent()
  {
    UserEventImpl userEvent = new UserEventImpl();
    return userEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BeforeASTEvent createBeforeASTEvent()
  {
    BeforeASTEventImpl beforeASTEvent = new BeforeASTEventImpl();
    return beforeASTEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AfterASTEvent createAfterASTEvent()
  {
    AfterASTEventImpl afterASTEvent = new AfterASTEventImpl();
    return afterASTEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Existence createExistence()
  {
    ExistenceImpl existence = new ExistenceImpl();
    return existence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Universality createUniversality()
  {
    UniversalityImpl universality = new UniversalityImpl();
    return universality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Absence createAbsence()
  {
    AbsenceImpl absence = new AbsenceImpl();
    return absence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Precedence createPrecedence()
  {
    PrecedenceImpl precedence = new PrecedenceImpl();
    return precedence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Response createResponse()
  {
    ResponseImpl response = new ResponseImpl();
    return response;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Globally createGlobally()
  {
    GloballyImpl globally = new GloballyImpl();
    return globally;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public After createAfter()
  {
    AfterImpl after = new AfterImpl();
    return after;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Before createBefore()
  {
    BeforeImpl before = new BeforeImpl();
    return before;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Between createBetween()
  {
    BetweenImpl between = new BetweenImpl();
    return between;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AfterUntil createAfterUntil()
  {
    AfterUntilImpl afterUntil = new AfterUntilImpl();
    return afterUntil;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StartMoniLogger createStartMoniLogger()
  {
    StartMoniLoggerImpl startMoniLogger = new StartMoniLoggerImpl();
    return startMoniLogger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StopMoniLogger createStopMoniLogger()
  {
    StopMoniLoggerImpl stopMoniLogger = new StopMoniLoggerImpl();
    return stopMoniLogger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Empty createEmpty()
  {
    EmptyImpl empty = new EmptyImpl();
    return empty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MoniLoggerAnnotation createMoniLoggerAnnotationFromString(EDataType eDataType, String initialValue)
  {
    MoniLoggerAnnotation result = MoniLoggerAnnotation.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertMoniLoggerAnnotationToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AppenderAnnotation createAppenderAnnotationFromString(EDataType eDataType, String initialValue)
  {
    AppenderAnnotation result = AppenderAnnotation.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertAppenderAnnotationToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LogLevel createLogLevelFromString(EDataType eDataType, String initialValue)
  {
    LogLevel result = LogLevel.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertLogLevelToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TemporalPatternKind createTemporalPatternKindFromString(EDataType eDataType, String initialValue)
  {
    TemporalPatternKind result = TemporalPatternKind.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTemporalPatternKindToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MoniLog4DSLPackage getMoniLog4DSLPackage()
  {
    return (MoniLog4DSLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MoniLog4DSLPackage getPackage()
  {
    return MoniLog4DSLPackage.eINSTANCE;
  }

} //MoniLog4DSLFactoryImpl
