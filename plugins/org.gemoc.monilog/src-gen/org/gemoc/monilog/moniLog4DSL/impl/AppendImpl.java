/**
 * generated by Xtext 2.22.0
 */
package org.gemoc.monilog.moniLog4DSL.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.gemoc.monilog.moniLog4DSL.Append;
import org.gemoc.monilog.moniLog4DSL.Appender;
import org.gemoc.monilog.moniLog4DSL.MoniLog4DSLPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Append</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.gemoc.monilog.moniLog4DSL.impl.AppendImpl#getAppender <em>Appender</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AppendImpl extends ActionImpl implements Append
{
  /**
   * The cached value of the '{@link #getAppender() <em>Appender</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAppender()
   * @generated
   * @ordered
   */
  protected Appender appender;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AppendImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MoniLog4DSLPackage.Literals.APPEND;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Appender getAppender()
  {
    return appender;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAppender(Appender newAppender, NotificationChain msgs)
  {
    Appender oldAppender = appender;
    appender = newAppender;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MoniLog4DSLPackage.APPEND__APPENDER, oldAppender, newAppender);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAppender(Appender newAppender)
  {
    if (newAppender != appender)
    {
      NotificationChain msgs = null;
      if (appender != null)
        msgs = ((InternalEObject)appender).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MoniLog4DSLPackage.APPEND__APPENDER, null, msgs);
      if (newAppender != null)
        msgs = ((InternalEObject)newAppender).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MoniLog4DSLPackage.APPEND__APPENDER, null, msgs);
      msgs = basicSetAppender(newAppender, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoniLog4DSLPackage.APPEND__APPENDER, newAppender, newAppender));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MoniLog4DSLPackage.APPEND__APPENDER:
        return basicSetAppender(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MoniLog4DSLPackage.APPEND__APPENDER:
        return getAppender();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MoniLog4DSLPackage.APPEND__APPENDER:
        setAppender((Appender)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MoniLog4DSLPackage.APPEND__APPENDER:
        setAppender((Appender)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MoniLog4DSLPackage.APPEND__APPENDER:
        return appender != null;
    }
    return super.eIsSet(featureID);
  }

} //AppendImpl
