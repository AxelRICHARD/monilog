/*
 * generated by Xtext 2.21.0
 */
package org.gemoc.monilog.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MoniLogGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.Document");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsImportParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Assignment cEventsAssignment_3_0 = (Assignment)cUnorderedGroup_3.eContents().get(0);
		private final RuleCall cEventsEventParserRuleCall_3_0_0 = (RuleCall)cEventsAssignment_3_0.eContents().get(0);
		private final Assignment cAppendersAssignment_3_1 = (Assignment)cUnorderedGroup_3.eContents().get(1);
		private final RuleCall cAppendersAppenderParserRuleCall_3_1_0 = (RuleCall)cAppendersAssignment_3_1.eContents().get(0);
		private final Assignment cLayoutsAssignment_3_2 = (Assignment)cUnorderedGroup_3.eContents().get(2);
		private final RuleCall cLayoutsLayoutParserRuleCall_3_2_0 = (RuleCall)cLayoutsAssignment_3_2.eContents().get(0);
		private final Assignment cMoniloggersAssignment_3_3 = (Assignment)cUnorderedGroup_3.eContents().get(3);
		private final RuleCall cMoniloggersMoniLoggerParserRuleCall_3_3_0 = (RuleCall)cMoniloggersAssignment_3_3.eContents().get(0);
		
		//Document:
		//	'package' name=QualifiedName
		//	imports+=Import* (events+=Event* & appenders+=Appender* & layouts+=Layout* & moniloggers+=MoniLogger*);
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=QualifiedName imports+=Import* (events+=Event* & appenders+=Appender* & layouts+=Layout* &
		//moniloggers+=MoniLogger*)
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_2_0() { return cImportsImportParserRuleCall_2_0; }
		
		//(events+=Event* & appenders+=Appender* & layouts+=Layout* & moniloggers+=MoniLogger*)
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//events+=Event*
		public Assignment getEventsAssignment_3_0() { return cEventsAssignment_3_0; }
		
		//Event
		public RuleCall getEventsEventParserRuleCall_3_0_0() { return cEventsEventParserRuleCall_3_0_0; }
		
		//appenders+=Appender*
		public Assignment getAppendersAssignment_3_1() { return cAppendersAssignment_3_1; }
		
		//Appender
		public RuleCall getAppendersAppenderParserRuleCall_3_1_0() { return cAppendersAppenderParserRuleCall_3_1_0; }
		
		//layouts+=Layout*
		public Assignment getLayoutsAssignment_3_2() { return cLayoutsAssignment_3_2; }
		
		//Layout
		public RuleCall getLayoutsLayoutParserRuleCall_3_2_0() { return cLayoutsLayoutParserRuleCall_3_2_0; }
		
		//moniloggers+=MoniLogger*
		public Assignment getMoniloggersAssignment_3_3() { return cMoniloggersAssignment_3_3; }
		
		//MoniLogger
		public RuleCall getMoniloggersMoniLoggerParserRuleCall_3_3_0() { return cMoniloggersMoniLoggerParserRuleCall_3_3_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.Import");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cImportKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_0_1_0 = (RuleCall)cImportedNamespaceAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cImportKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAliasFileAliasParserRuleCall_1_1_0 = (RuleCall)cAliasAssignment_1_1.eContents().get(0);
		
		//Import:
		//	'import' importedNamespace=QualifiedNameWithWildcard | 'import' alias=FileAlias;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=QualifiedNameWithWildcard | 'import' alias=FileAlias
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'import' importedNamespace=QualifiedNameWithWildcard
		public Group getGroup_0() { return cGroup_0; }
		
		//'import'
		public Keyword getImportKeyword_0_0() { return cImportKeyword_0_0; }
		
		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_0_1() { return cImportedNamespaceAssignment_0_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_0_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_0_1_0; }
		
		//'import' alias=FileAlias
		public Group getGroup_1() { return cGroup_1; }
		
		//'import'
		public Keyword getImportKeyword_1_0() { return cImportKeyword_1_0; }
		
		//alias=FileAlias
		public Assignment getAliasAssignment_1_1() { return cAliasAssignment_1_1; }
		
		//FileAlias
		public RuleCall getAliasFileAliasParserRuleCall_1_1_0() { return cAliasFileAliasParserRuleCall_1_1_0; }
	}
	public class FileAliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.FileAlias");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFilePathAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFilePathSTRINGTerminalRuleCall_0_0 = (RuleCall)cFilePathAssignment_0.eContents().get(0);
		private final Keyword cAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//FileAlias:
		//	filePath=STRING 'as' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//filePath=STRING 'as' name=ID
		public Group getGroup() { return cGroup; }
		
		//filePath=STRING
		public Assignment getFilePathAssignment_0() { return cFilePathAssignment_0; }
		
		//STRING
		public RuleCall getFilePathSTRINGTerminalRuleCall_0_0() { return cFilePathSTRINGTerminalRuleCall_0_0; }
		
		//'as'
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class AppenderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.Appender");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLocalAppenderParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExternalAppenderParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//@Exported
		//Appender:
		//	LocalAppender | ExternalAppender;
		@Override public ParserRule getRule() { return rule; }
		
		//LocalAppender | ExternalAppender
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LocalAppender
		public RuleCall getLocalAppenderParserRuleCall_0() { return cLocalAppenderParserRuleCall_0; }
		
		//ExternalAppender
		public RuleCall getExternalAppenderParserRuleCall_1() { return cExternalAppenderParserRuleCall_1; }
	}
	public class LocalAppenderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.LocalAppender");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAppenderAnnotationEnumRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cAppenderKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParameterDeclAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParameterDeclParameterDeclVarArgsParserRuleCall_3_1_0 = (RuleCall)cParameterDeclAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCallsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCallsAppenderCallParserRuleCall_5_0 = (RuleCall)cCallsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cCallsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cCallsAppenderCallParserRuleCall_6_1_0 = (RuleCall)cCallsAssignment_6_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//LocalAppender:
		//	annotations+=AppenderAnnotation*
		//	'appender' name=ID ('(' parameterDecl=ParameterDeclVarArgs ')')? '{'
		//	calls+=AppenderCall (';' calls+=AppenderCall)* ';'?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=AppenderAnnotation* 'appender' name=ID ('(' parameterDecl=ParameterDeclVarArgs ')')? '{'
		//calls+=AppenderCall (';' calls+=AppenderCall)* ';'? '}'
		public Group getGroup() { return cGroup; }
		
		//annotations+=AppenderAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//AppenderAnnotation
		public RuleCall getAnnotationsAppenderAnnotationEnumRuleCall_0_0() { return cAnnotationsAppenderAnnotationEnumRuleCall_0_0; }
		
		//'appender'
		public Keyword getAppenderKeyword_1() { return cAppenderKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('(' parameterDecl=ParameterDeclVarArgs ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//parameterDecl=ParameterDeclVarArgs
		public Assignment getParameterDeclAssignment_3_1() { return cParameterDeclAssignment_3_1; }
		
		//ParameterDeclVarArgs
		public RuleCall getParameterDeclParameterDeclVarArgsParserRuleCall_3_1_0() { return cParameterDeclParameterDeclVarArgsParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//calls+=AppenderCall
		public Assignment getCallsAssignment_5() { return cCallsAssignment_5; }
		
		//AppenderCall
		public RuleCall getCallsAppenderCallParserRuleCall_5_0() { return cCallsAppenderCallParserRuleCall_5_0; }
		
		//(';' calls+=AppenderCall)*
		public Group getGroup_6() { return cGroup_6; }
		
		//';'
		public Keyword getSemicolonKeyword_6_0() { return cSemicolonKeyword_6_0; }
		
		//calls+=AppenderCall
		public Assignment getCallsAssignment_6_1() { return cCallsAssignment_6_1; }
		
		//AppenderCall
		public RuleCall getCallsAppenderCallParserRuleCall_6_1_0() { return cCallsAppenderCallParserRuleCall_6_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ExternalAppenderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.ExternalAppender");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAppenderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParameterDeclAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParameterDeclParameterDeclVarArgsParserRuleCall_2_1_0 = (RuleCall)cParameterDeclAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//ExternalAppender:
		//	'appender' name=ID ('(' parameterDecl=ParameterDeclVarArgs ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'appender' name=ID ('(' parameterDecl=ParameterDeclVarArgs ')')?
		public Group getGroup() { return cGroup; }
		
		//'appender'
		public Keyword getAppenderKeyword_0() { return cAppenderKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' parameterDecl=ParameterDeclVarArgs ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//parameterDecl=ParameterDeclVarArgs
		public Assignment getParameterDeclAssignment_2_1() { return cParameterDeclAssignment_2_1; }
		
		//ParameterDeclVarArgs
		public RuleCall getParameterDeclParameterDeclVarArgsParserRuleCall_2_1_0() { return cParameterDeclParameterDeclVarArgsParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class LayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.Layout");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLocalLayoutParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExternalLayoutParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Layout:
		//	LocalLayout | ExternalLayout;
		@Override public ParserRule getRule() { return rule; }
		
		//LocalLayout | ExternalLayout
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LocalLayout
		public RuleCall getLocalLayoutParserRuleCall_0() { return cLocalLayoutParserRuleCall_0; }
		
		//ExternalLayout
		public RuleCall getExternalLayoutParserRuleCall_1() { return cExternalLayoutParserRuleCall_1; }
	}
	public class LocalLayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.LocalLayout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLayoutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParameterDeclAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParameterDeclParameterDeclVarArgsParserRuleCall_2_1_0 = (RuleCall)cParameterDeclAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCallAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCallLayoutCallParserRuleCall_4_0 = (RuleCall)cCallAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//@Exported
		//LocalLayout:
		//	'layout' name=ID ('(' parameterDecl=ParameterDeclVarArgs ')')? '{'
		//	call=LayoutCall
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'layout' name=ID ('(' parameterDecl=ParameterDeclVarArgs ')')? '{' call=LayoutCall '}'
		public Group getGroup() { return cGroup; }
		
		//'layout'
		public Keyword getLayoutKeyword_0() { return cLayoutKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' parameterDecl=ParameterDeclVarArgs ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//parameterDecl=ParameterDeclVarArgs
		public Assignment getParameterDeclAssignment_2_1() { return cParameterDeclAssignment_2_1; }
		
		//ParameterDeclVarArgs
		public RuleCall getParameterDeclParameterDeclVarArgsParserRuleCall_2_1_0() { return cParameterDeclParameterDeclVarArgsParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//call=LayoutCall
		public Assignment getCallAssignment_4() { return cCallAssignment_4; }
		
		//LayoutCall
		public RuleCall getCallLayoutCallParserRuleCall_4_0() { return cCallLayoutCallParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ExternalLayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.ExternalLayout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLayoutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParameterDeclAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParameterDeclParameterDeclVarArgsParserRuleCall_2_1_0 = (RuleCall)cParameterDeclAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//@Exported
		//ExternalLayout:
		//	'layout' name=ID ('(' parameterDecl=ParameterDeclVarArgs ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'layout' name=ID ('(' parameterDecl=ParameterDeclVarArgs ')')?
		public Group getGroup() { return cGroup; }
		
		//'layout'
		public Keyword getLayoutKeyword_0() { return cLayoutKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' parameterDecl=ParameterDeclVarArgs ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//parameterDecl=ParameterDeclVarArgs
		public Assignment getParameterDeclAssignment_2_1() { return cParameterDeclAssignment_2_1; }
		
		//ParameterDeclVarArgs
		public RuleCall getParameterDeclParameterDeclVarArgsParserRuleCall_2_1_0() { return cParameterDeclParameterDeclVarArgsParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class ParameterDeclVarArgsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.ParameterDeclVarArgs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_1_0_0 = (RuleCall)cParametersAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_1_1_1_0 = (RuleCall)cParametersAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cVarArgsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cVarArgsParameterParserRuleCall_1_2_1_0 = (RuleCall)cVarArgsAssignment_1_2_1.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		
		//ParameterDeclVarArgs ParameterDecl:
		//	{ParameterDecl} (parameters+=Parameter (',' parameters+=Parameter)* (',' varArgs=Parameter '...')?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ParameterDecl} (parameters+=Parameter (',' parameters+=Parameter)* (',' varArgs=Parameter '...')?)?
		public Group getGroup() { return cGroup; }
		
		//{ParameterDecl}
		public Action getParameterDeclAction_0() { return cParameterDeclAction_0; }
		
		//(parameters+=Parameter (',' parameters+=Parameter)* (',' varArgs=Parameter '...')?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_1_0() { return cParametersAssignment_1_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_0_0() { return cParametersParameterParserRuleCall_1_0_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_1_1_1() { return cParametersAssignment_1_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_1_1_0() { return cParametersParameterParserRuleCall_1_1_1_0; }
		
		//(',' varArgs=Parameter '...')?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//varArgs=Parameter
		public Assignment getVarArgsAssignment_1_2_1() { return cVarArgsAssignment_1_2_1; }
		
		//Parameter
		public RuleCall getVarArgsParameterParserRuleCall_1_2_1_0() { return cVarArgsParameterParserRuleCall_1_2_1_0; }
		
		//'...'
		public Keyword getFullStopFullStopFullStopKeyword_1_2_2() { return cFullStopFullStopFullStopKeyword_1_2_2; }
	}
	public class ParameterDeclNoVarArgsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.ParameterDeclNoVarArgs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_1_0_0 = (RuleCall)cParametersAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_1_1_1_0 = (RuleCall)cParametersAssignment_1_1_1.eContents().get(0);
		
		//ParameterDeclNoVarArgs ParameterDecl:
		//	{ParameterDecl} (parameters+=Parameter (',' parameters+=Parameter)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ParameterDecl} (parameters+=Parameter (',' parameters+=Parameter)*)?
		public Group getGroup() { return cGroup; }
		
		//{ParameterDecl}
		public Action getParameterDeclAction_0() { return cParameterDeclAction_0; }
		
		//(parameters+=Parameter (',' parameters+=Parameter)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_1_0() { return cParametersAssignment_1_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_0_0() { return cParametersParameterParserRuleCall_1_0_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_1_1_1() { return cParametersAssignment_1_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_1_1_0() { return cParametersParameterParserRuleCall_1_1_1_0; }
	}
	public class MoniLoggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.MoniLogger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsMoniLoggerAnnotationEnumRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cMoniloggerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParameterDeclAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParameterDeclParameterDeclVarArgsParserRuleCall_3_1_0 = (RuleCall)cParameterDeclAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLevelAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLevelLogLevelEnumRuleCall_4_1_0 = (RuleCall)cLevelAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEventKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cStreamEventAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStreamEventStreamEventParserRuleCall_7_0 = (RuleCall)cStreamEventAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cConditionsKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cConditionsAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cConditionsConditionParserRuleCall_8_2_0 = (RuleCall)cConditionsAssignment_8_2.eContents().get(0);
		private final Group cGroup_8_3 = (Group)cGroup_8.eContents().get(3);
		private final Keyword cSemicolonKeyword_8_3_0 = (Keyword)cGroup_8_3.eContents().get(0);
		private final Assignment cConditionsAssignment_8_3_1 = (Assignment)cGroup_8_3.eContents().get(1);
		private final RuleCall cConditionsConditionParserRuleCall_8_3_1_0 = (RuleCall)cConditionsAssignment_8_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_8_5 = (Keyword)cGroup_8.eContents().get(5);
		private final Keyword cActionsKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cLeftCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cActionsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cActionsActionParserRuleCall_11_0 = (RuleCall)cActionsAssignment_11.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cSemicolonKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cActionsAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_12_1_0 = (RuleCall)cActionsAssignment_12_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cRightCurlyBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		//@Exported
		//MoniLogger:
		//	annotations+=MoniLoggerAnnotation*
		//	'monilogger' name=ID ('(' parameterDecl=ParameterDeclVarArgs ')')? ('[' level=LogLevel ']')? '{'
		//	'event' streamEvent=StreamEvent ('conditions' '{' conditions+=Condition (';' conditions+=Condition)* ';'? '}')?
		//	'actions' '{' actions+=Action (';' actions+=Action)* ';'? '}'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=MoniLoggerAnnotation* 'monilogger' name=ID ('(' parameterDecl=ParameterDeclVarArgs ')')? ('['
		//level=LogLevel ']')? '{' 'event' streamEvent=StreamEvent ('conditions' '{' conditions+=Condition (';'
		//conditions+=Condition)* ';'? '}')? 'actions' '{' actions+=Action (';' actions+=Action)* ';'? '}' '}'
		public Group getGroup() { return cGroup; }
		
		//annotations+=MoniLoggerAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//MoniLoggerAnnotation
		public RuleCall getAnnotationsMoniLoggerAnnotationEnumRuleCall_0_0() { return cAnnotationsMoniLoggerAnnotationEnumRuleCall_0_0; }
		
		//'monilogger'
		public Keyword getMoniloggerKeyword_1() { return cMoniloggerKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('(' parameterDecl=ParameterDeclVarArgs ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//parameterDecl=ParameterDeclVarArgs
		public Assignment getParameterDeclAssignment_3_1() { return cParameterDeclAssignment_3_1; }
		
		//ParameterDeclVarArgs
		public RuleCall getParameterDeclParameterDeclVarArgsParserRuleCall_3_1_0() { return cParameterDeclParameterDeclVarArgsParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
		
		//('[' level=LogLevel ']')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }
		
		//level=LogLevel
		public Assignment getLevelAssignment_4_1() { return cLevelAssignment_4_1; }
		
		//LogLevel
		public RuleCall getLevelLogLevelEnumRuleCall_4_1_0() { return cLevelLogLevelEnumRuleCall_4_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_2() { return cRightSquareBracketKeyword_4_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//'event'
		public Keyword getEventKeyword_6() { return cEventKeyword_6; }
		
		//streamEvent=StreamEvent
		public Assignment getStreamEventAssignment_7() { return cStreamEventAssignment_7; }
		
		//StreamEvent
		public RuleCall getStreamEventStreamEventParserRuleCall_7_0() { return cStreamEventStreamEventParserRuleCall_7_0; }
		
		//('conditions' '{' conditions+=Condition (';' conditions+=Condition)* ';'? '}')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'conditions'
		public Keyword getConditionsKeyword_8_0() { return cConditionsKeyword_8_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_1() { return cLeftCurlyBracketKeyword_8_1; }
		
		//conditions+=Condition
		public Assignment getConditionsAssignment_8_2() { return cConditionsAssignment_8_2; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_8_2_0() { return cConditionsConditionParserRuleCall_8_2_0; }
		
		//(';' conditions+=Condition)*
		public Group getGroup_8_3() { return cGroup_8_3; }
		
		//';'
		public Keyword getSemicolonKeyword_8_3_0() { return cSemicolonKeyword_8_3_0; }
		
		//conditions+=Condition
		public Assignment getConditionsAssignment_8_3_1() { return cConditionsAssignment_8_3_1; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_8_3_1_0() { return cConditionsConditionParserRuleCall_8_3_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_8_4() { return cSemicolonKeyword_8_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_5() { return cRightCurlyBracketKeyword_8_5; }
		
		//'actions'
		public Keyword getActionsKeyword_9() { return cActionsKeyword_9; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_10() { return cLeftCurlyBracketKeyword_10; }
		
		//actions+=Action
		public Assignment getActionsAssignment_11() { return cActionsAssignment_11; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_11_0() { return cActionsActionParserRuleCall_11_0; }
		
		//(';' actions+=Action)*
		public Group getGroup_12() { return cGroup_12; }
		
		//';'
		public Keyword getSemicolonKeyword_12_0() { return cSemicolonKeyword_12_0; }
		
		//actions+=Action
		public Assignment getActionsAssignment_12_1() { return cActionsAssignment_12_1; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_12_1_0() { return cActionsActionParserRuleCall_12_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_13() { return cSemicolonKeyword_13; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_15() { return cRightCurlyBracketKeyword_15; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.Parameter");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Parameter:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.Event");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cASTEventAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cCallKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cParameterDeclAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cParameterDeclParameterDeclNoVarArgsParserRuleCall_0_3_1_0 = (RuleCall)cParameterDeclAssignment_0_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3_2 = (Keyword)cGroup_0_3.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cKindAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cKindASTEventKindParserRuleCall_0_5_0 = (RuleCall)cKindAssignment_0_5.eContents().get(0);
		private final Assignment cRuleIDAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cRuleIDIDTerminalRuleCall_0_6_0 = (RuleCall)cRuleIDAssignment_0_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_7 = (Keyword)cGroup_0.eContents().get(7);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cComplexEventAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cComplexKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cKindAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cKindTemporalPatternKindEnumRuleCall_1_3_1_0 = (RuleCall)cKindAssignment_1_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3_2 = (Keyword)cGroup_1_3.eContents().get(2);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cParameterDeclAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cParameterDeclParameterDeclNoVarArgsParserRuleCall_1_4_1_0 = (RuleCall)cParameterDeclAssignment_1_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4_2 = (Keyword)cGroup_1_4.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cPatternAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cPatternTemporalPatternParserRuleCall_1_6_0 = (RuleCall)cPatternAssignment_1_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cUserEventAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cCustomKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cNameAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_2_0 = (RuleCall)cNameAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cParameterDeclAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cParameterDeclParameterDeclNoVarArgsParserRuleCall_2_3_1_0 = (RuleCall)cParameterDeclAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3_2 = (Keyword)cGroup_2_3.eContents().get(2);
		
		//@Exported
		//Event:
		//	{ASTEvent}
		//	'call' name=ID ('(' parameterDecl=ParameterDeclNoVarArgs ')')? '{'
		//	kind=ASTEventKind ruleID=ID
		//	'}' | {ComplexEvent} 'complex' name=ID ('[' kind=TemporalPatternKind ']')? ('(' parameterDecl=ParameterDeclNoVarArgs
		//	')')? '{'
		//	pattern=TemporalPattern
		//	'}' | {UserEvent} 'custom' name=ID ('(' parameterDecl=ParameterDeclNoVarArgs ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ASTEvent} 'call' name=ID ('(' parameterDecl=ParameterDeclNoVarArgs ')')? '{' kind=ASTEventKind ruleID=ID '}' |
		//{ComplexEvent} 'complex' name=ID ('[' kind=TemporalPatternKind ']')? ('(' parameterDecl=ParameterDeclNoVarArgs ')')?
		//'{' pattern=TemporalPattern '}' | {UserEvent} 'custom' name=ID ('(' parameterDecl=ParameterDeclNoVarArgs ')')?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ASTEvent} 'call' name=ID ('(' parameterDecl=ParameterDeclNoVarArgs ')')? '{' kind=ASTEventKind ruleID=ID '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//{ASTEvent}
		public Action getASTEventAction_0_0() { return cASTEventAction_0_0; }
		
		//'call'
		public Keyword getCallKeyword_0_1() { return cCallKeyword_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_0() { return cNameIDTerminalRuleCall_0_2_0; }
		
		//('(' parameterDecl=ParameterDeclNoVarArgs ')')?
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_3_0() { return cLeftParenthesisKeyword_0_3_0; }
		
		//parameterDecl=ParameterDeclNoVarArgs
		public Assignment getParameterDeclAssignment_0_3_1() { return cParameterDeclAssignment_0_3_1; }
		
		//ParameterDeclNoVarArgs
		public RuleCall getParameterDeclParameterDeclNoVarArgsParserRuleCall_0_3_1_0() { return cParameterDeclParameterDeclNoVarArgsParserRuleCall_0_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3_2() { return cRightParenthesisKeyword_0_3_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_4() { return cLeftCurlyBracketKeyword_0_4; }
		
		//kind=ASTEventKind
		public Assignment getKindAssignment_0_5() { return cKindAssignment_0_5; }
		
		//ASTEventKind
		public RuleCall getKindASTEventKindParserRuleCall_0_5_0() { return cKindASTEventKindParserRuleCall_0_5_0; }
		
		//ruleID=ID
		public Assignment getRuleIDAssignment_0_6() { return cRuleIDAssignment_0_6; }
		
		//ID
		public RuleCall getRuleIDIDTerminalRuleCall_0_6_0() { return cRuleIDIDTerminalRuleCall_0_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_7() { return cRightCurlyBracketKeyword_0_7; }
		
		//{ComplexEvent} 'complex' name=ID ('[' kind=TemporalPatternKind ']')? ('(' parameterDecl=ParameterDeclNoVarArgs ')')? '{'
		//pattern=TemporalPattern '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//{ComplexEvent}
		public Action getComplexEventAction_1_0() { return cComplexEventAction_1_0; }
		
		//'complex'
		public Keyword getComplexKeyword_1_1() { return cComplexKeyword_1_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_2_0() { return cNameIDTerminalRuleCall_1_2_0; }
		
		//('[' kind=TemporalPatternKind ']')?
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_3_0() { return cLeftSquareBracketKeyword_1_3_0; }
		
		//kind=TemporalPatternKind
		public Assignment getKindAssignment_1_3_1() { return cKindAssignment_1_3_1; }
		
		//TemporalPatternKind
		public RuleCall getKindTemporalPatternKindEnumRuleCall_1_3_1_0() { return cKindTemporalPatternKindEnumRuleCall_1_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3_2() { return cRightSquareBracketKeyword_1_3_2; }
		
		//('(' parameterDecl=ParameterDeclNoVarArgs ')')?
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_4_0() { return cLeftParenthesisKeyword_1_4_0; }
		
		//parameterDecl=ParameterDeclNoVarArgs
		public Assignment getParameterDeclAssignment_1_4_1() { return cParameterDeclAssignment_1_4_1; }
		
		//ParameterDeclNoVarArgs
		public RuleCall getParameterDeclParameterDeclNoVarArgsParserRuleCall_1_4_1_0() { return cParameterDeclParameterDeclNoVarArgsParserRuleCall_1_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4_2() { return cRightParenthesisKeyword_1_4_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_5() { return cLeftCurlyBracketKeyword_1_5; }
		
		//pattern=TemporalPattern
		public Assignment getPatternAssignment_1_6() { return cPatternAssignment_1_6; }
		
		//TemporalPattern
		public RuleCall getPatternTemporalPatternParserRuleCall_1_6_0() { return cPatternTemporalPatternParserRuleCall_1_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_7() { return cRightCurlyBracketKeyword_1_7; }
		
		//{UserEvent} 'custom' name=ID ('(' parameterDecl=ParameterDeclNoVarArgs ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//{UserEvent}
		public Action getUserEventAction_2_0() { return cUserEventAction_2_0; }
		
		//'custom'
		public Keyword getCustomKeyword_2_1() { return cCustomKeyword_2_1; }
		
		//name=ID
		public Assignment getNameAssignment_2_2() { return cNameAssignment_2_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_2_0() { return cNameIDTerminalRuleCall_2_2_0; }
		
		//('(' parameterDecl=ParameterDeclNoVarArgs ')')?
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_3_0() { return cLeftParenthesisKeyword_2_3_0; }
		
		//parameterDecl=ParameterDeclNoVarArgs
		public Assignment getParameterDeclAssignment_2_3_1() { return cParameterDeclAssignment_2_3_1; }
		
		//ParameterDeclNoVarArgs
		public RuleCall getParameterDeclParameterDeclNoVarArgsParserRuleCall_2_3_1_0() { return cParameterDeclParameterDeclNoVarArgsParserRuleCall_2_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3_2() { return cRightParenthesisKeyword_2_3_2; }
	}
	public class ASTEventKindElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.ASTEventKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBeforeASTEventAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cBeforeKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAfterASTEventAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAfterKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//ASTEventKind:
		//	{BeforeASTEvent} 'before' | {AfterASTEvent} 'after';
		@Override public ParserRule getRule() { return rule; }
		
		//{BeforeASTEvent} 'before' | {AfterASTEvent} 'after'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{BeforeASTEvent} 'before'
		public Group getGroup_0() { return cGroup_0; }
		
		//{BeforeASTEvent}
		public Action getBeforeASTEventAction_0_0() { return cBeforeASTEventAction_0_0; }
		
		//'before'
		public Keyword getBeforeKeyword_0_1() { return cBeforeKeyword_0_1; }
		
		//{AfterASTEvent} 'after'
		public Group getGroup_1() { return cGroup_1; }
		
		//{AfterASTEvent}
		public Action getAfterASTEventAction_1_0() { return cAfterASTEventAction_1_0; }
		
		//'after'
		public Keyword getAfterKeyword_1_1() { return cAfterKeyword_1_1; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.Condition");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionLanguageValueParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//Condition:
		//	expression=LanguageValue;
		@Override public ParserRule getRule() { return rule; }
		
		//expression=LanguageValue
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }
		
		//LanguageValue
		public RuleCall getExpressionLanguageValueParserRuleCall_0() { return cExpressionLanguageValueParserRuleCall_0; }
	}
	public class TemporalPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.TemporalPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPatternAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPatternPatternParserRuleCall_0_0 = (RuleCall)cPatternAssignment_0.eContents().get(0);
		private final Assignment cScopeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cScopeScopeParserRuleCall_1_0 = (RuleCall)cScopeAssignment_1.eContents().get(0);
		
		//TemporalPattern:
		//	pattern=Pattern scope=Scope;
		@Override public ParserRule getRule() { return rule; }
		
		//pattern=Pattern scope=Scope
		public Group getGroup() { return cGroup; }
		
		//pattern=Pattern
		public Assignment getPatternAssignment_0() { return cPatternAssignment_0; }
		
		//Pattern
		public RuleCall getPatternPatternParserRuleCall_0_0() { return cPatternPatternParserRuleCall_0_0; }
		
		//scope=Scope
		public Assignment getScopeAssignment_1() { return cScopeAssignment_1; }
		
		//Scope
		public RuleCall getScopeScopeParserRuleCall_1_0() { return cScopeScopeParserRuleCall_1_0; }
	}
	public class PatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.Pattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExistenceAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cExistsKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cBoundAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cBoundBoundTypeParserRuleCall_0_2_0 = (RuleCall)cBoundAssignment_0_2.eContents().get(0);
		private final Assignment cEventAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cEventStreamEventParserRuleCall_0_3_0 = (RuleCall)cEventAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUniversalityAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAlwaysKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cEventAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cEventStreamEventParserRuleCall_1_2_0 = (RuleCall)cEventAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cAbsenceAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cNeverKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cEventAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cEventStreamEventParserRuleCall_2_2_0 = (RuleCall)cEventAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cPrecedenceAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cPredecessorAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPredecessorStreamEventParserRuleCall_3_1_0 = (RuleCall)cPredecessorAssignment_3_1.eContents().get(0);
		private final Keyword cPrecedesKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cSuccessorAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cSuccessorStreamEventParserRuleCall_3_3_0 = (RuleCall)cSuccessorAssignment_3_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cResponseAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cEventAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEventStreamEventParserRuleCall_4_1_0 = (RuleCall)cEventAssignment_4_1.eContents().get(0);
		private final Keyword cRespondsToKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cTriggerAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cTriggerStreamEventParserRuleCall_4_3_0 = (RuleCall)cTriggerAssignment_4_3.eContents().get(0);
		
		//Pattern:
		//	{Existence} 'exists'? bound=BoundType? event=StreamEvent | {Universality} 'always' event=StreamEvent | {Absence}
		//	'never' event=StreamEvent | {Precedence} predecessor=StreamEvent 'precedes' successor=StreamEvent | {Response}
		//	event=StreamEvent 'respondsTo' trigger=StreamEvent;
		@Override public ParserRule getRule() { return rule; }
		
		//{Existence} 'exists'? bound=BoundType? event=StreamEvent | {Universality} 'always' event=StreamEvent | {Absence} 'never'
		//event=StreamEvent | {Precedence} predecessor=StreamEvent 'precedes' successor=StreamEvent | {Response}
		//event=StreamEvent 'respondsTo' trigger=StreamEvent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Existence} 'exists'? bound=BoundType? event=StreamEvent
		public Group getGroup_0() { return cGroup_0; }
		
		//{Existence}
		public Action getExistenceAction_0_0() { return cExistenceAction_0_0; }
		
		//'exists'?
		public Keyword getExistsKeyword_0_1() { return cExistsKeyword_0_1; }
		
		//bound=BoundType?
		public Assignment getBoundAssignment_0_2() { return cBoundAssignment_0_2; }
		
		//BoundType
		public RuleCall getBoundBoundTypeParserRuleCall_0_2_0() { return cBoundBoundTypeParserRuleCall_0_2_0; }
		
		//event=StreamEvent
		public Assignment getEventAssignment_0_3() { return cEventAssignment_0_3; }
		
		//StreamEvent
		public RuleCall getEventStreamEventParserRuleCall_0_3_0() { return cEventStreamEventParserRuleCall_0_3_0; }
		
		//{Universality} 'always' event=StreamEvent
		public Group getGroup_1() { return cGroup_1; }
		
		//{Universality}
		public Action getUniversalityAction_1_0() { return cUniversalityAction_1_0; }
		
		//'always'
		public Keyword getAlwaysKeyword_1_1() { return cAlwaysKeyword_1_1; }
		
		//event=StreamEvent
		public Assignment getEventAssignment_1_2() { return cEventAssignment_1_2; }
		
		//StreamEvent
		public RuleCall getEventStreamEventParserRuleCall_1_2_0() { return cEventStreamEventParserRuleCall_1_2_0; }
		
		//{Absence} 'never' event=StreamEvent
		public Group getGroup_2() { return cGroup_2; }
		
		//{Absence}
		public Action getAbsenceAction_2_0() { return cAbsenceAction_2_0; }
		
		//'never'
		public Keyword getNeverKeyword_2_1() { return cNeverKeyword_2_1; }
		
		//event=StreamEvent
		public Assignment getEventAssignment_2_2() { return cEventAssignment_2_2; }
		
		//StreamEvent
		public RuleCall getEventStreamEventParserRuleCall_2_2_0() { return cEventStreamEventParserRuleCall_2_2_0; }
		
		//{Precedence} predecessor=StreamEvent 'precedes' successor=StreamEvent
		public Group getGroup_3() { return cGroup_3; }
		
		//{Precedence}
		public Action getPrecedenceAction_3_0() { return cPrecedenceAction_3_0; }
		
		//predecessor=StreamEvent
		public Assignment getPredecessorAssignment_3_1() { return cPredecessorAssignment_3_1; }
		
		//StreamEvent
		public RuleCall getPredecessorStreamEventParserRuleCall_3_1_0() { return cPredecessorStreamEventParserRuleCall_3_1_0; }
		
		//'precedes'
		public Keyword getPrecedesKeyword_3_2() { return cPrecedesKeyword_3_2; }
		
		//successor=StreamEvent
		public Assignment getSuccessorAssignment_3_3() { return cSuccessorAssignment_3_3; }
		
		//StreamEvent
		public RuleCall getSuccessorStreamEventParserRuleCall_3_3_0() { return cSuccessorStreamEventParserRuleCall_3_3_0; }
		
		//{Response} event=StreamEvent 'respondsTo' trigger=StreamEvent
		public Group getGroup_4() { return cGroup_4; }
		
		//{Response}
		public Action getResponseAction_4_0() { return cResponseAction_4_0; }
		
		//event=StreamEvent
		public Assignment getEventAssignment_4_1() { return cEventAssignment_4_1; }
		
		//StreamEvent
		public RuleCall getEventStreamEventParserRuleCall_4_1_0() { return cEventStreamEventParserRuleCall_4_1_0; }
		
		//'respondsTo'
		public Keyword getRespondsToKeyword_4_2() { return cRespondsToKeyword_4_2; }
		
		//trigger=StreamEvent
		public Assignment getTriggerAssignment_4_3() { return cTriggerAssignment_4_3; }
		
		//StreamEvent
		public RuleCall getTriggerStreamEventParserRuleCall_4_3_0() { return cTriggerStreamEventParserRuleCall_4_3_0; }
	}
	public class BoundTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.BoundType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExactBoundParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLowerBoundParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUpperBoundParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BoundType:
		//	ExactBound | LowerBound | UpperBound;
		@Override public ParserRule getRule() { return rule; }
		
		//ExactBound | LowerBound | UpperBound
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExactBound
		public RuleCall getExactBoundParserRuleCall_0() { return cExactBoundParserRuleCall_0; }
		
		//LowerBound
		public RuleCall getLowerBoundParserRuleCall_1() { return cLowerBoundParserRuleCall_1; }
		
		//UpperBound
		public RuleCall getUpperBoundParserRuleCall_2() { return cUpperBoundParserRuleCall_2; }
	}
	public class ExactBoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.ExactBound");
		private final Assignment cNAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNINTTerminalRuleCall_0 = (RuleCall)cNAssignment.eContents().get(0);
		
		//ExactBound:
		//	n=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//n=INT
		public Assignment getNAssignment() { return cNAssignment; }
		
		//INT
		public RuleCall getNINTTerminalRuleCall_0() { return cNINTTerminalRuleCall_0; }
	}
	public class LowerBoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.LowerBound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAtleastKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNINTTerminalRuleCall_1_0 = (RuleCall)cNAssignment_1.eContents().get(0);
		
		//LowerBound:
		//	'atleast' n=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'atleast' n=INT
		public Group getGroup() { return cGroup; }
		
		//'atleast'
		public Keyword getAtleastKeyword_0() { return cAtleastKeyword_0; }
		
		//n=INT
		public Assignment getNAssignment_1() { return cNAssignment_1; }
		
		//INT
		public RuleCall getNINTTerminalRuleCall_1_0() { return cNINTTerminalRuleCall_1_0; }
	}
	public class UpperBoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.UpperBound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAtmostKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNINTTerminalRuleCall_1_0 = (RuleCall)cNAssignment_1.eContents().get(0);
		
		//UpperBound:
		//	'atmost' n=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'atmost' n=INT
		public Group getGroup() { return cGroup; }
		
		//'atmost'
		public Keyword getAtmostKeyword_0() { return cAtmostKeyword_0; }
		
		//n=INT
		public Assignment getNAssignment_1() { return cNAssignment_1; }
		
		//INT
		public RuleCall getNINTTerminalRuleCall_1_0() { return cNINTTerminalRuleCall_1_0; }
	}
	public class ScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.Scope");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cGloballyAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cGloballyKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAfterAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAfterKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cLowerBoundAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLowerBoundStreamEventParserRuleCall_1_2_0 = (RuleCall)cLowerBoundAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBeforeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cBeforeKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cUpperBoundAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cUpperBoundStreamEventParserRuleCall_2_2_0 = (RuleCall)cUpperBoundAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBetweenAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cBetweenKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cLowerBoundAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cLowerBoundStreamEventParserRuleCall_3_2_0 = (RuleCall)cLowerBoundAssignment_3_2.eContents().get(0);
		private final Keyword cAndKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cUpperBoundAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cUpperBoundStreamEventParserRuleCall_3_4_0 = (RuleCall)cUpperBoundAssignment_3_4.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cAfterUntilAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cAfterKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cLowerBoundAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cLowerBoundStreamEventParserRuleCall_4_2_0 = (RuleCall)cLowerBoundAssignment_4_2.eContents().get(0);
		private final Keyword cUntilKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cUpperBoundAssignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final RuleCall cUpperBoundStreamEventParserRuleCall_4_4_0 = (RuleCall)cUpperBoundAssignment_4_4.eContents().get(0);
		
		//Scope:
		//	{Globally} 'globally'? | {After} 'after' lowerBound=StreamEvent | {Before} 'before' upperBound=StreamEvent | {Between}
		//	'between' lowerBound=StreamEvent 'and' upperBound=StreamEvent | {AfterUntil} 'after' lowerBound=StreamEvent 'until'
		//	upperBound=StreamEvent;
		@Override public ParserRule getRule() { return rule; }
		
		//{Globally} 'globally'? | {After} 'after' lowerBound=StreamEvent | {Before} 'before' upperBound=StreamEvent | {Between}
		//'between' lowerBound=StreamEvent 'and' upperBound=StreamEvent | {AfterUntil} 'after' lowerBound=StreamEvent 'until'
		//upperBound=StreamEvent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Globally} 'globally'?
		public Group getGroup_0() { return cGroup_0; }
		
		//{Globally}
		public Action getGloballyAction_0_0() { return cGloballyAction_0_0; }
		
		//'globally'?
		public Keyword getGloballyKeyword_0_1() { return cGloballyKeyword_0_1; }
		
		//{After} 'after' lowerBound=StreamEvent
		public Group getGroup_1() { return cGroup_1; }
		
		//{After}
		public Action getAfterAction_1_0() { return cAfterAction_1_0; }
		
		//'after'
		public Keyword getAfterKeyword_1_1() { return cAfterKeyword_1_1; }
		
		//lowerBound=StreamEvent
		public Assignment getLowerBoundAssignment_1_2() { return cLowerBoundAssignment_1_2; }
		
		//StreamEvent
		public RuleCall getLowerBoundStreamEventParserRuleCall_1_2_0() { return cLowerBoundStreamEventParserRuleCall_1_2_0; }
		
		//{Before} 'before' upperBound=StreamEvent
		public Group getGroup_2() { return cGroup_2; }
		
		//{Before}
		public Action getBeforeAction_2_0() { return cBeforeAction_2_0; }
		
		//'before'
		public Keyword getBeforeKeyword_2_1() { return cBeforeKeyword_2_1; }
		
		//upperBound=StreamEvent
		public Assignment getUpperBoundAssignment_2_2() { return cUpperBoundAssignment_2_2; }
		
		//StreamEvent
		public RuleCall getUpperBoundStreamEventParserRuleCall_2_2_0() { return cUpperBoundStreamEventParserRuleCall_2_2_0; }
		
		//{Between} 'between' lowerBound=StreamEvent 'and' upperBound=StreamEvent
		public Group getGroup_3() { return cGroup_3; }
		
		//{Between}
		public Action getBetweenAction_3_0() { return cBetweenAction_3_0; }
		
		//'between'
		public Keyword getBetweenKeyword_3_1() { return cBetweenKeyword_3_1; }
		
		//lowerBound=StreamEvent
		public Assignment getLowerBoundAssignment_3_2() { return cLowerBoundAssignment_3_2; }
		
		//StreamEvent
		public RuleCall getLowerBoundStreamEventParserRuleCall_3_2_0() { return cLowerBoundStreamEventParserRuleCall_3_2_0; }
		
		//'and'
		public Keyword getAndKeyword_3_3() { return cAndKeyword_3_3; }
		
		//upperBound=StreamEvent
		public Assignment getUpperBoundAssignment_3_4() { return cUpperBoundAssignment_3_4; }
		
		//StreamEvent
		public RuleCall getUpperBoundStreamEventParserRuleCall_3_4_0() { return cUpperBoundStreamEventParserRuleCall_3_4_0; }
		
		//{AfterUntil} 'after' lowerBound=StreamEvent 'until' upperBound=StreamEvent
		public Group getGroup_4() { return cGroup_4; }
		
		//{AfterUntil}
		public Action getAfterUntilAction_4_0() { return cAfterUntilAction_4_0; }
		
		//'after'
		public Keyword getAfterKeyword_4_1() { return cAfterKeyword_4_1; }
		
		//lowerBound=StreamEvent
		public Assignment getLowerBoundAssignment_4_2() { return cLowerBoundAssignment_4_2; }
		
		//StreamEvent
		public RuleCall getLowerBoundStreamEventParserRuleCall_4_2_0() { return cLowerBoundStreamEventParserRuleCall_4_2_0; }
		
		//'until'
		public Keyword getUntilKeyword_4_3() { return cUntilKeyword_4_3; }
		
		//upperBound=StreamEvent
		public Assignment getUpperBoundAssignment_4_4() { return cUpperBoundAssignment_4_4; }
		
		//StreamEvent
		public RuleCall getUpperBoundStreamEventParserRuleCall_4_4_0() { return cUpperBoundStreamEventParserRuleCall_4_4_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLanguageValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAppenderCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEmitEventParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMoniloggerCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Action:
		//	LanguageValue | AppenderCall | EmitEvent | MoniloggerCall;
		@Override public ParserRule getRule() { return rule; }
		
		//LanguageValue | AppenderCall | EmitEvent | MoniloggerCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LanguageValue
		public RuleCall getLanguageValueParserRuleCall_0() { return cLanguageValueParserRuleCall_0; }
		
		//AppenderCall
		public RuleCall getAppenderCallParserRuleCall_1() { return cAppenderCallParserRuleCall_1; }
		
		//EmitEvent
		public RuleCall getEmitEventParserRuleCall_2() { return cEmitEventParserRuleCall_2; }
		
		////	SetVariable |
		//MoniloggerCall
		public RuleCall getMoniloggerCallParserRuleCall_3() { return cMoniloggerCallParserRuleCall_3; }
	}
	public class AppenderCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.AppenderCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAppenderAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAppenderAppenderCrossReference_0_0 = (CrossReference)cAppenderAssignment_0.eContents().get(0);
		private final RuleCall cAppenderAppenderQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cAppenderAppenderCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCallKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cArgsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_3_2_1_0 = (RuleCall)cArgsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//AppenderCall:
		//	appender=[Appender|QualifiedName] '.' 'call' ('(' args+=Expression (',' args+=Expression)* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//appender=[Appender|QualifiedName] '.' 'call' ('(' args+=Expression (',' args+=Expression)* ')')?
		public Group getGroup() { return cGroup; }
		
		//appender=[Appender|QualifiedName]
		public Assignment getAppenderAssignment_0() { return cAppenderAssignment_0; }
		
		//[Appender|QualifiedName]
		public CrossReference getAppenderAppenderCrossReference_0_0() { return cAppenderAppenderCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getAppenderAppenderQualifiedNameParserRuleCall_0_0_1() { return cAppenderAppenderQualifiedNameParserRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//'call'
		public Keyword getCallKeyword_2() { return cCallKeyword_2; }
		
		//('(' args+=Expression (',' args+=Expression)* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//args+=Expression
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_3_1_0() { return cArgsExpressionParserRuleCall_3_1_0; }
		
		//(',' args+=Expression)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//args+=Expression
		public Assignment getArgsAssignment_3_2_1() { return cArgsAssignment_3_2_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_3_2_1_0() { return cArgsExpressionParserRuleCall_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
	}
	public class LayoutCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.LayoutCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLayoutAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cLayoutLayoutCrossReference_0_0 = (CrossReference)cLayoutAssignment_0.eContents().get(0);
		private final RuleCall cLayoutLayoutQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cLayoutLayoutCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCallKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cArgsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_3_2_1_0 = (RuleCall)cArgsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//LayoutCall:
		//	layout=[Layout|QualifiedName] '.' 'call' ('(' args+=Expression (',' args+=Expression)* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//layout=[Layout|QualifiedName] '.' 'call' ('(' args+=Expression (',' args+=Expression)* ')')?
		public Group getGroup() { return cGroup; }
		
		//layout=[Layout|QualifiedName]
		public Assignment getLayoutAssignment_0() { return cLayoutAssignment_0; }
		
		//[Layout|QualifiedName]
		public CrossReference getLayoutLayoutCrossReference_0_0() { return cLayoutLayoutCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getLayoutLayoutQualifiedNameParserRuleCall_0_0_1() { return cLayoutLayoutQualifiedNameParserRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//'call'
		public Keyword getCallKeyword_2() { return cCallKeyword_2; }
		
		//('(' args+=Expression (',' args+=Expression)* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//args+=Expression
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_3_1_0() { return cArgsExpressionParserRuleCall_3_1_0; }
		
		//(',' args+=Expression)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//args+=Expression
		public Assignment getArgsAssignment_3_2_1() { return cArgsAssignment_3_2_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_3_2_1_0() { return cArgsExpressionParserRuleCall_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
	}
	public class EmitEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.EmitEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cEventUserEventCrossReference_0_0 = (CrossReference)cEventAssignment_0.eContents().get(0);
		private final RuleCall cEventUserEventIDTerminalRuleCall_0_0_1 = (RuleCall)cEventUserEventCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEmitKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cArgsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_3_2_1_0 = (RuleCall)cArgsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//EmitEvent:
		//	event=[UserEvent] '.' 'emit' ('(' args+=Expression (',' args+=Expression)* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//event=[UserEvent] '.' 'emit' ('(' args+=Expression (',' args+=Expression)* ')')?
		public Group getGroup() { return cGroup; }
		
		//event=[UserEvent]
		public Assignment getEventAssignment_0() { return cEventAssignment_0; }
		
		//[UserEvent]
		public CrossReference getEventUserEventCrossReference_0_0() { return cEventUserEventCrossReference_0_0; }
		
		//ID
		public RuleCall getEventUserEventIDTerminalRuleCall_0_0_1() { return cEventUserEventIDTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//'emit'
		public Keyword getEmitKeyword_2() { return cEmitKeyword_2; }
		
		//('(' args+=Expression (',' args+=Expression)* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//args+=Expression
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_3_1_0() { return cArgsExpressionParserRuleCall_3_1_0; }
		
		//(',' args+=Expression)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//args+=Expression
		public Assignment getArgsAssignment_3_2_1() { return cArgsAssignment_3_2_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_3_2_1_0() { return cArgsExpressionParserRuleCall_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
	}
	public class MoniloggerCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.MoniloggerCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStartMoniLoggerAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cMoniloggerAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cMoniloggerMoniLoggerCrossReference_0_1_0 = (CrossReference)cMoniloggerAssignment_0_1.eContents().get(0);
		private final RuleCall cMoniloggerMoniLoggerIDTerminalRuleCall_0_1_0_1 = (RuleCall)cMoniloggerMoniLoggerCrossReference_0_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cStartKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cArgsAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_0_4_1_0 = (RuleCall)cArgsAssignment_0_4_1.eContents().get(0);
		private final Group cGroup_0_4_2 = (Group)cGroup_0_4.eContents().get(2);
		private final Keyword cCommaKeyword_0_4_2_0 = (Keyword)cGroup_0_4_2.eContents().get(0);
		private final Assignment cArgsAssignment_0_4_2_1 = (Assignment)cGroup_0_4_2.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_0_4_2_1_0 = (RuleCall)cArgsAssignment_0_4_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4_3 = (Keyword)cGroup_0_4.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStopMoniLoggerAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cMoniloggerAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cMoniloggerMoniLoggerCrossReference_1_1_0 = (CrossReference)cMoniloggerAssignment_1_1.eContents().get(0);
		private final RuleCall cMoniloggerMoniLoggerIDTerminalRuleCall_1_1_0_1 = (RuleCall)cMoniloggerMoniLoggerCrossReference_1_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cStopKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		////SetVariable:
		////	'set' '(' variable=STRING ',' value=LanguageValue ')';
		//MoniloggerCall:
		//	{StartMoniLogger} monilogger=[MoniLogger] '.' 'start' ('(' args+=Expression (',' args+=Expression)* ')')? |
		//	{StopMoniLogger} monilogger=[MoniLogger] '.' 'stop';
		@Override public ParserRule getRule() { return rule; }
		
		//{StartMoniLogger} monilogger=[MoniLogger] '.' 'start' ('(' args+=Expression (',' args+=Expression)* ')')? |
		//{StopMoniLogger} monilogger=[MoniLogger] '.' 'stop'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{StartMoniLogger} monilogger=[MoniLogger] '.' 'start' ('(' args+=Expression (',' args+=Expression)* ')')?
		public Group getGroup_0() { return cGroup_0; }
		
		//{StartMoniLogger}
		public Action getStartMoniLoggerAction_0_0() { return cStartMoniLoggerAction_0_0; }
		
		//monilogger=[MoniLogger]
		public Assignment getMoniloggerAssignment_0_1() { return cMoniloggerAssignment_0_1; }
		
		//[MoniLogger]
		public CrossReference getMoniloggerMoniLoggerCrossReference_0_1_0() { return cMoniloggerMoniLoggerCrossReference_0_1_0; }
		
		//ID
		public RuleCall getMoniloggerMoniLoggerIDTerminalRuleCall_0_1_0_1() { return cMoniloggerMoniLoggerIDTerminalRuleCall_0_1_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_0_2() { return cFullStopKeyword_0_2; }
		
		//'start'
		public Keyword getStartKeyword_0_3() { return cStartKeyword_0_3; }
		
		//('(' args+=Expression (',' args+=Expression)* ')')?
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_4_0() { return cLeftParenthesisKeyword_0_4_0; }
		
		//args+=Expression
		public Assignment getArgsAssignment_0_4_1() { return cArgsAssignment_0_4_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_0_4_1_0() { return cArgsExpressionParserRuleCall_0_4_1_0; }
		
		//(',' args+=Expression)*
		public Group getGroup_0_4_2() { return cGroup_0_4_2; }
		
		//','
		public Keyword getCommaKeyword_0_4_2_0() { return cCommaKeyword_0_4_2_0; }
		
		//args+=Expression
		public Assignment getArgsAssignment_0_4_2_1() { return cArgsAssignment_0_4_2_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_0_4_2_1_0() { return cArgsExpressionParserRuleCall_0_4_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4_3() { return cRightParenthesisKeyword_0_4_3; }
		
		//{StopMoniLogger} monilogger=[MoniLogger] '.' 'stop'
		public Group getGroup_1() { return cGroup_1; }
		
		//{StopMoniLogger}
		public Action getStopMoniLoggerAction_1_0() { return cStopMoniLoggerAction_1_0; }
		
		//monilogger=[MoniLogger]
		public Assignment getMoniloggerAssignment_1_1() { return cMoniloggerAssignment_1_1; }
		
		//[MoniLogger]
		public CrossReference getMoniloggerMoniLoggerCrossReference_1_1_0() { return cMoniloggerMoniLoggerCrossReference_1_1_0; }
		
		//ID
		public RuleCall getMoniloggerMoniLoggerIDTerminalRuleCall_1_1_0_1() { return cMoniloggerMoniLoggerIDTerminalRuleCall_1_1_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_2() { return cFullStopKeyword_1_2; }
		
		//'stop'
		public Keyword getStopKeyword_1_3() { return cStopKeyword_1_3; }
	}
	public class StreamEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.StreamEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cEventEventCrossReference_0_0 = (CrossReference)cEventAssignment_0.eContents().get(0);
		private final RuleCall cEventEventIDTerminalRuleCall_0_0_1 = (RuleCall)cEventEventCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValuesEmptyOrPropertyValueParserRuleCall_1_1_0 = (RuleCall)cValuesAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cValuesAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cValuesEmptyOrPropertyValueParserRuleCall_1_2_1_0 = (RuleCall)cValuesAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//StreamEvent:
		//	event=[Event] ('(' values+=EmptyOrPropertyValue (',' values+=EmptyOrPropertyValue)* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//event=[Event] ('(' values+=EmptyOrPropertyValue (',' values+=EmptyOrPropertyValue)* ')')?
		public Group getGroup() { return cGroup; }
		
		//event=[Event]
		public Assignment getEventAssignment_0() { return cEventAssignment_0; }
		
		//[Event]
		public CrossReference getEventEventCrossReference_0_0() { return cEventEventCrossReference_0_0; }
		
		//ID
		public RuleCall getEventEventIDTerminalRuleCall_0_0_1() { return cEventEventIDTerminalRuleCall_0_0_1; }
		
		//('(' values+=EmptyOrPropertyValue (',' values+=EmptyOrPropertyValue)* ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//values+=EmptyOrPropertyValue
		public Assignment getValuesAssignment_1_1() { return cValuesAssignment_1_1; }
		
		//EmptyOrPropertyValue
		public RuleCall getValuesEmptyOrPropertyValueParserRuleCall_1_1_0() { return cValuesEmptyOrPropertyValueParserRuleCall_1_1_0; }
		
		//(',' values+=EmptyOrPropertyValue)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//values+=EmptyOrPropertyValue
		public Assignment getValuesAssignment_1_2_1() { return cValuesAssignment_1_2_1; }
		
		//EmptyOrPropertyValue
		public RuleCall getValuesEmptyOrPropertyValueParserRuleCall_1_2_1_0() { return cValuesEmptyOrPropertyValueParserRuleCall_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class EmptyOrPropertyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.EmptyOrPropertyValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Action cEmptyAction_0 = (Action)cAlternatives.eContents().get(0);
		private final RuleCall cPropertyValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EmptyOrPropertyValue:
		//	{Empty} | PropertyValue;
		@Override public ParserRule getRule() { return rule; }
		
		//{Empty} | PropertyValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Empty}
		public Action getEmptyAction_0() { return cEmptyAction_0; }
		
		//PropertyValue
		public RuleCall getPropertyValueParserRuleCall_1() { return cPropertyValueParserRuleCall_1; }
	}
	public class PropertyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.PropertyValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cIdAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0_0 = (RuleCall)cIdAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cValueAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_0_1_1_0 = (RuleCall)cValueAssignment_0_1_1.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueLanguageValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//PropertyValue:
		//	id=ID ('=' value=Expression)? | value=LanguageValue;
		@Override public ParserRule getRule() { return rule; }
		
		//id=ID ('=' value=Expression)? | value=LanguageValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//id=ID ('=' value=Expression)?
		public Group getGroup_0() { return cGroup_0; }
		
		//id=ID
		public Assignment getIdAssignment_0_0() { return cIdAssignment_0_0; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0_0() { return cIdIDTerminalRuleCall_0_0_0; }
		
		//('=' value=Expression)?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1_0() { return cEqualsSignKeyword_0_1_0; }
		
		//value=Expression
		public Assignment getValueAssignment_0_1_1() { return cValueAssignment_0_1_1; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_0_1_1_0() { return cValueExpressionParserRuleCall_0_1_1_0; }
		
		//value=LanguageValue
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//LanguageValue
		public RuleCall getValueLanguageValueParserRuleCall_1_0() { return cValueLanguageValueParserRuleCall_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParameterReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMoniLogExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLanguageValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLayoutCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Expression:
		//	ParameterReference | MoniLogExpression | LanguageValue | LayoutCall;
		@Override public ParserRule getRule() { return rule; }
		
		//ParameterReference | MoniLogExpression | LanguageValue | LayoutCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ParameterReference
		public RuleCall getParameterReferenceParserRuleCall_0() { return cParameterReferenceParserRuleCall_0; }
		
		//MoniLogExpression
		public RuleCall getMoniLogExpressionParserRuleCall_1() { return cMoniLogExpressionParserRuleCall_1; }
		
		//LanguageValue
		public RuleCall getLanguageValueParserRuleCall_2() { return cLanguageValueParserRuleCall_2; }
		
		//LayoutCall
		public RuleCall getLayoutCallParserRuleCall_3() { return cLayoutCallParserRuleCall_3; }
	}
	public class ParameterReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.ParameterReference");
		private final Assignment cParameterAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cParameterParameterCrossReference_0 = (CrossReference)cParameterAssignment.eContents().get(0);
		private final RuleCall cParameterParameterIDTerminalRuleCall_0_1 = (RuleCall)cParameterParameterCrossReference_0.eContents().get(1);
		
		//ParameterReference:
		//	parameter=[Parameter];
		@Override public ParserRule getRule() { return rule; }
		
		//parameter=[Parameter]
		public Assignment getParameterAssignment() { return cParameterAssignment; }
		
		//[Parameter]
		public CrossReference getParameterParameterCrossReference_0() { return cParameterParameterCrossReference_0; }
		
		//ID
		public RuleCall getParameterParameterIDTerminalRuleCall_0_1() { return cParameterParameterIDTerminalRuleCall_0_1; }
	}
	public class MoniLogExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.MoniLogExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionSimpleExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//MoniLogExpression:
		//	'{' expression=SimpleExpression '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' expression=SimpleExpression '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//expression=SimpleExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//SimpleExpression
		public RuleCall getExpressionSimpleExpressionParserRuleCall_1_0() { return cExpressionSimpleExpressionParserRuleCall_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class LanguageValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.LanguageValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLanguageIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLanguageIdIDTerminalRuleCall_0_0 = (RuleCall)cLanguageIdAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cValueAlternatives_2_0 = (Alternatives)cValueAssignment_2.eContents().get(0);
		private final RuleCall cValueLanguageExpressionParserRuleCall_2_0_0 = (RuleCall)cValueAlternatives_2_0.eContents().get(0);
		private final RuleCall cValueLanguageCallParserRuleCall_2_0_1 = (RuleCall)cValueAlternatives_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LanguageValue:
		//	languageId=ID '(' value=(LanguageExpression | LanguageCall) ')';
		@Override public ParserRule getRule() { return rule; }
		
		//languageId=ID '(' value=(LanguageExpression | LanguageCall) ')'
		public Group getGroup() { return cGroup; }
		
		//languageId=ID
		public Assignment getLanguageIdAssignment_0() { return cLanguageIdAssignment_0; }
		
		//ID
		public RuleCall getLanguageIdIDTerminalRuleCall_0_0() { return cLanguageIdIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//value=(LanguageExpression | LanguageCall)
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//(LanguageExpression | LanguageCall)
		public Alternatives getValueAlternatives_2_0() { return cValueAlternatives_2_0; }
		
		//LanguageExpression
		public RuleCall getValueLanguageExpressionParserRuleCall_2_0_0() { return cValueLanguageExpressionParserRuleCall_2_0_0; }
		
		//LanguageCall
		public RuleCall getValueLanguageCallParserRuleCall_2_0_1() { return cValueLanguageCallParserRuleCall_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class LanguageExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.LanguageExpression");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionSTRINGTerminalRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//LanguageExpression:
		//	expression=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//expression=STRING
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }
		
		//STRING
		public RuleCall getExpressionSTRINGTerminalRuleCall_0() { return cExpressionSTRINGTerminalRuleCall_0; }
	}
	public class LanguageCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.LanguageCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFileAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFileFileAliasCrossReference_0_0 = (CrossReference)cFileAssignment_0.eContents().get(0);
		private final RuleCall cFileFileAliasIDTerminalRuleCall_0_0_1 = (RuleCall)cFileFileAliasCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFqnAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFqnQualifiedNameParserRuleCall_2_0 = (RuleCall)cFqnAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cArgsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_3_2_1_0 = (RuleCall)cArgsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//LanguageCall:
		//	file=[FileAlias] '.' fqn=QualifiedName ('(' args+=Expression (',' args+=Expression)* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//file=[FileAlias] '.' fqn=QualifiedName ('(' args+=Expression (',' args+=Expression)* ')')?
		public Group getGroup() { return cGroup; }
		
		//file=[FileAlias]
		public Assignment getFileAssignment_0() { return cFileAssignment_0; }
		
		//[FileAlias]
		public CrossReference getFileFileAliasCrossReference_0_0() { return cFileFileAliasCrossReference_0_0; }
		
		//ID
		public RuleCall getFileFileAliasIDTerminalRuleCall_0_0_1() { return cFileFileAliasIDTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//fqn=QualifiedName
		public Assignment getFqnAssignment_2() { return cFqnAssignment_2; }
		
		//QualifiedName
		public RuleCall getFqnQualifiedNameParserRuleCall_2_0() { return cFqnQualifiedNameParserRuleCall_2_0; }
		
		//('(' args+=Expression (',' args+=Expression)* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//args+=Expression
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_3_1_0() { return cArgsExpressionParserRuleCall_3_1_0; }
		
		//(',' args+=Expression)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//args+=Expression
		public Assignment getArgsAssignment_3_2_1() { return cArgsAssignment_3_2_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_3_2_1_0() { return cArgsExpressionParserRuleCall_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
	}
	public class SimpleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.SimpleExpression");
		private final RuleCall cContractedIfParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////==================================== SIMPLE EXPRESSIONS ====================================//
		//SimpleExpression:
		//	ContractedIf;
		@Override public ParserRule getRule() { return rule; }
		
		//ContractedIf
		public RuleCall getContractedIfParserRuleCall() { return cContractedIfParserRuleCall; }
	}
	public class ContractedIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.ContractedIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cContractedIfConditionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cThenAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cThenOrParserRuleCall_1_2_0 = (RuleCall)cThenAssignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cElseAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cElseOrParserRuleCall_1_4_0 = (RuleCall)cElseAssignment_1_4.eContents().get(0);
		
		//ContractedIf SimpleExpression:
		//	Or ({ContractedIf.condition=current} '?' then=Or ':' else=Or)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Or ({ContractedIf.condition=current} '?' then=Or ':' else=Or)*
		public Group getGroup() { return cGroup; }
		
		//Or
		public RuleCall getOrParserRuleCall_0() { return cOrParserRuleCall_0; }
		
		//({ContractedIf.condition=current} '?' then=Or ':' else=Or)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ContractedIf.condition=current}
		public Action getContractedIfConditionAction_1_0() { return cContractedIfConditionAction_1_0; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_1_1() { return cQuestionMarkKeyword_1_1; }
		
		//then=Or
		public Assignment getThenAssignment_1_2() { return cThenAssignment_1_2; }
		
		//Or
		public RuleCall getThenOrParserRuleCall_1_2_0() { return cThenOrParserRuleCall_1_2_0; }
		
		//':'
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }
		
		//else=Or
		public Assignment getElseAssignment_1_4() { return cElseAssignment_1_4; }
		
		//Or
		public RuleCall getElseOrParserRuleCall_1_4_0() { return cElseOrParserRuleCall_1_4_0; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpVerticalLineVerticalLineKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or SimpleExpression:
		//	And ({Or.left=current} op='||' right=And)*;
		@Override public ParserRule getRule() { return rule; }
		
		//And ({Or.left=current} op='||' right=And)*
		public Group getGroup() { return cGroup; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//({Or.left=current} op='||' right=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }
		
		//op='||'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'||'
		public Keyword getOpVerticalLineVerticalLineKeyword_1_1_0() { return cOpVerticalLineVerticalLineKeyword_1_1_0; }
		
		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpAmpersandAmpersandKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And SimpleExpression:
		//	Equality ({And.left=current} op='&&' right=Equality)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Equality ({And.left=current} op='&&' right=Equality)*
		public Group getGroup() { return cGroup; }
		
		//Equality
		public RuleCall getEqualityParserRuleCall_0() { return cEqualityParserRuleCall_0; }
		
		//({And.left=current} op='&&' right=Equality)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }
		
		//op='&&'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'&&'
		public Keyword getOpAmpersandAmpersandKeyword_1_1_0() { return cOpAmpersandAmpersandKeyword_1_1_0; }
		
		//right=Equality
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Equality
		public RuleCall getRightEqualityParserRuleCall_1_2_0() { return cRightEqualityParserRuleCall_1_2_0; }
	}
	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.Equality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Equality SimpleExpression:
		//	Comparison ({Equality.left=current} op=('==' | '!=') right=Comparison)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison ({Equality.left=current} op=('==' | '!=') right=Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//({Equality.left=current} op=('==' | '!=') right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Equality.left=current}
		public Action getEqualityLeftAction_1_0() { return cEqualityLeftAction_1_0; }
		
		//op=('==' | '!=')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('==' | '!=')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'=='
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }
		
		//'!='
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusOrMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPlusOrMinusParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison SimpleExpression:
		//	PlusOrMinus ({Comparison.left=current} op=('>=' | '<=' | '>' | '<') right=PlusOrMinus)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PlusOrMinus ({Comparison.left=current} op=('>=' | '<=' | '>' | '<') right=PlusOrMinus)*
		public Group getGroup() { return cGroup; }
		
		//PlusOrMinus
		public RuleCall getPlusOrMinusParserRuleCall_0() { return cPlusOrMinusParserRuleCall_0; }
		
		//({Comparison.left=current} op=('>=' | '<=' | '>' | '<') right=PlusOrMinus)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }
		
		//op=('>=' | '<=' | '>' | '<')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('>=' | '<=' | '>' | '<')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'>='
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_0() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_0; }
		
		//'<='
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_1_0_1; }
		
		//'>'
		public Keyword getOpGreaterThanSignKeyword_1_1_0_2() { return cOpGreaterThanSignKeyword_1_1_0_2; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_1_1_0_3() { return cOpLessThanSignKeyword_1_1_0_3; }
		
		//right=PlusOrMinus
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PlusOrMinus
		public RuleCall getRightPlusOrMinusParserRuleCall_1_2_0() { return cRightPlusOrMinusParserRuleCall_1_2_0; }
	}
	public class PlusOrMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.PlusOrMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulOrDivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpPlusSignKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final Keyword cOpHyphenMinusKeyword_1_0_1_1_0 = (Keyword)cOpAssignment_1_0_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMulOrDivParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//PlusOrMinus SimpleExpression:
		//	MulOrDiv (({Plus.left=current} op='+' | {Minus.left=current} op='-') right=MulOrDiv)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MulOrDiv (({Plus.left=current} op='+' | {Minus.left=current} op='-') right=MulOrDiv)*
		public Group getGroup() { return cGroup; }
		
		//MulOrDiv
		public RuleCall getMulOrDivParserRuleCall_0() { return cMulOrDivParserRuleCall_0; }
		
		//(({Plus.left=current} op='+' | {Minus.left=current} op='-') right=MulOrDiv)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Plus.left=current} op='+' | {Minus.left=current} op='-')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} op='+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//op='+'
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }
		
		//'+'
		public Keyword getOpPlusSignKeyword_1_0_0_1_0() { return cOpPlusSignKeyword_1_0_0_1_0; }
		
		//{Minus.left=current} op='-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//op='-'
		public Assignment getOpAssignment_1_0_1_1() { return cOpAssignment_1_0_1_1; }
		
		//'-'
		public Keyword getOpHyphenMinusKeyword_1_0_1_1_0() { return cOpHyphenMinusKeyword_1_0_1_1_0; }
		
		//right=MulOrDiv
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MulOrDiv
		public RuleCall getRightMulOrDivParserRuleCall_1_1_0() { return cRightMulOrDivParserRuleCall_1_1_0; }
	}
	public class MulOrDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.MulOrDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cModuloParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMulLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpAsteriskKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final Keyword cOpSolidusKeyword_1_0_1_1_0 = (Keyword)cOpAssignment_1_0_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightModuloParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MulOrDiv SimpleExpression:
		//	Modulo (({Mul.left=current} op='*' | {Div.Left=current} op='/') right=Modulo)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Modulo (({Mul.left=current} op='*' | {Div.Left=current} op='/') right=Modulo)*
		public Group getGroup() { return cGroup; }
		
		//Modulo
		public RuleCall getModuloParserRuleCall_0() { return cModuloParserRuleCall_0; }
		
		//(({Mul.left=current} op='*' | {Div.Left=current} op='/') right=Modulo)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Mul.left=current} op='*' | {Div.Left=current} op='/')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Mul.left=current} op='*'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Mul.left=current}
		public Action getMulLeftAction_1_0_0_0() { return cMulLeftAction_1_0_0_0; }
		
		//op='*'
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_0_0_1_0() { return cOpAsteriskKeyword_1_0_0_1_0; }
		
		//{Div.Left=current} op='/'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Div.Left=current}
		public Action getDivLeftAction_1_0_1_0() { return cDivLeftAction_1_0_1_0; }
		
		//op='/'
		public Assignment getOpAssignment_1_0_1_1() { return cOpAssignment_1_0_1_1; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_0_1_1_0() { return cOpSolidusKeyword_1_0_1_1_0; }
		
		//right=Modulo
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Modulo
		public RuleCall getRightModuloParserRuleCall_1_1_0() { return cRightModuloParserRuleCall_1_1_0; }
	}
	public class ModuloElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.Modulo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cModuloLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpPercentSignKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Modulo SimpleExpression:
		//	Primary ({Modulo.left=current} op='%' right=Primary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({Modulo.left=current} op='%' right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({Modulo.left=current} op='%' right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Modulo.left=current}
		public Action getModuloLeftAction_1_0() { return cModuloLeftAction_1_0; }
		
		//op='%'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'%'
		public Keyword getOpPercentSignKeyword_1_1_0() { return cOpPercentSignKeyword_1_1_0; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cParenthesisAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionSimpleExpressionParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnaryMinusAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cNotAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExpressionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_2_2_0 = (RuleCall)cExpressionAssignment_2_2.eContents().get(0);
		private final RuleCall cAtomicParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Primary SimpleExpression:
		//	{Parenthesis} '(' expression=SimpleExpression ')' | {UnaryMinus} '-' expression=Primary | {Not} '!' expression=Primary
		//	| Atomic;
		@Override public ParserRule getRule() { return rule; }
		
		//{Parenthesis} '(' expression=SimpleExpression ')' | {UnaryMinus} '-' expression=Primary | {Not} '!' expression=Primary |
		//Atomic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Parenthesis} '(' expression=SimpleExpression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Parenthesis}
		public Action getParenthesisAction_0_0() { return cParenthesisAction_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//expression=SimpleExpression
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }
		
		//SimpleExpression
		public RuleCall getExpressionSimpleExpressionParserRuleCall_0_2_0() { return cExpressionSimpleExpressionParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//{UnaryMinus} '-' expression=Primary
		public Group getGroup_1() { return cGroup_1; }
		
		//{UnaryMinus}
		public Action getUnaryMinusAction_1_0() { return cUnaryMinusAction_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
		
		//expression=Primary
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_1_2_0() { return cExpressionPrimaryParserRuleCall_1_2_0; }
		
		//{Not} '!' expression=Primary
		public Group getGroup_2() { return cGroup_2; }
		
		//{Not}
		public Action getNotAction_2_0() { return cNotAction_2_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_2_1() { return cExclamationMarkKeyword_2_1; }
		
		//expression=Primary
		public Assignment getExpressionAssignment_2_2() { return cExpressionAssignment_2_2; }
		
		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_2_2_0() { return cExpressionPrimaryParserRuleCall_2_2_0; }
		
		//Atomic
		public RuleCall getAtomicParserRuleCall_3() { return cAtomicParserRuleCall_3; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cRealConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueREALTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBoolConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cValueAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_1_0_0 = (Keyword)cValueAssignment_2_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_2_1_1 = (Keyword)cAlternatives_2_1.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cStringConstantAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cVectorConstantAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cValuesAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cValuesSimpleExpressionParserRuleCall_4_2_0 = (RuleCall)cValuesAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cValuesAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cValuesSimpleExpressionParserRuleCall_4_3_1_0 = (RuleCall)cValuesAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final RuleCall cRefParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cArraySizeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Atomic SimpleExpression:
		//	{IntConstant} value=INT | {RealConstant} value=REAL | {BoolConstant} (value?='true' | 'false') | {StringConstant}
		//	value=STRING | {VectorConstant} '[' values+=SimpleExpression (',' values+=SimpleExpression)* ']' | Ref | ArraySize;
		@Override public ParserRule getRule() { return rule; }
		
		//{IntConstant} value=INT | {RealConstant} value=REAL | {BoolConstant} (value?='true' | 'false') | {StringConstant}
		//value=STRING | {VectorConstant} '[' values+=SimpleExpression (',' values+=SimpleExpression)* ']' | Ref | ArraySize
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntConstant} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntConstant}
		public Action getIntConstantAction_0_0() { return cIntConstantAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//{RealConstant} value=REAL
		public Group getGroup_1() { return cGroup_1; }
		
		//{RealConstant}
		public Action getRealConstantAction_1_0() { return cRealConstantAction_1_0; }
		
		//value=REAL
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//REAL
		public RuleCall getValueREALTerminalRuleCall_1_1_0() { return cValueREALTerminalRuleCall_1_1_0; }
		
		//{BoolConstant} (value?='true' | 'false')
		public Group getGroup_2() { return cGroup_2; }
		
		//{BoolConstant}
		public Action getBoolConstantAction_2_0() { return cBoolConstantAction_2_0; }
		
		//(value?='true' | 'false')
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//value?='true'
		public Assignment getValueAssignment_2_1_0() { return cValueAssignment_2_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_2_1_0_0() { return cValueTrueKeyword_2_1_0_0; }
		
		//'false'
		public Keyword getFalseKeyword_2_1_1() { return cFalseKeyword_2_1_1; }
		
		//{StringConstant} value=STRING
		public Group getGroup_3() { return cGroup_3; }
		
		//{StringConstant}
		public Action getStringConstantAction_3_0() { return cStringConstantAction_3_0; }
		
		//value=STRING
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_1_0() { return cValueSTRINGTerminalRuleCall_3_1_0; }
		
		//{VectorConstant} '[' values+=SimpleExpression (',' values+=SimpleExpression)* ']'
		public Group getGroup_4() { return cGroup_4; }
		
		//{VectorConstant}
		public Action getVectorConstantAction_4_0() { return cVectorConstantAction_4_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_1() { return cLeftSquareBracketKeyword_4_1; }
		
		//values+=SimpleExpression
		public Assignment getValuesAssignment_4_2() { return cValuesAssignment_4_2; }
		
		//SimpleExpression
		public RuleCall getValuesSimpleExpressionParserRuleCall_4_2_0() { return cValuesSimpleExpressionParserRuleCall_4_2_0; }
		
		//(',' values+=SimpleExpression)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//','
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//values+=SimpleExpression
		public Assignment getValuesAssignment_4_3_1() { return cValuesAssignment_4_3_1; }
		
		//SimpleExpression
		public RuleCall getValuesSimpleExpressionParserRuleCall_4_3_1_0() { return cValuesSimpleExpressionParserRuleCall_4_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_4() { return cRightSquareBracketKeyword_4_4; }
		
		//Ref
		public RuleCall getRefParserRuleCall_5() { return cRefParserRuleCall_5; }
		
		//ArraySize
		public RuleCall getArraySizeParserRuleCall_6() { return cArraySizeParserRuleCall_6; }
	}
	public class RefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.Ref");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSimpleVarRefParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cArrayRefArrayAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cIndicesAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cIndicesSimpleExpressionParserRuleCall_1_0_2_0 = (RuleCall)cIndicesAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_0_3 = (Group)cGroup_1_0.eContents().get(3);
		private final Keyword cCommaKeyword_1_0_3_0 = (Keyword)cGroup_1_0_3.eContents().get(0);
		private final Assignment cIndicesAssignment_1_0_3_1 = (Assignment)cGroup_1_0_3.eContents().get(1);
		private final RuleCall cIndicesSimpleExpressionParserRuleCall_1_0_3_1_0 = (RuleCall)cIndicesAssignment_1_0_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_4 = (Keyword)cGroup_1_0.eContents().get(4);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cPropertyRefObjectAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cPropertyAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cPropertyIDTerminalRuleCall_1_1_2_0 = (RuleCall)cPropertyAssignment_1_1_2.eContents().get(0);
		
		//Ref:
		//	SimpleVarRef ({ArrayRef.array=current} '[' indices+=SimpleExpression (',' indices+=SimpleExpression)* ']' |
		//	{PropertyRef.object=current} '.' property=ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleVarRef ({ArrayRef.array=current} '[' indices+=SimpleExpression (',' indices+=SimpleExpression)* ']' |
		//{PropertyRef.object=current} '.' property=ID)*
		public Group getGroup() { return cGroup; }
		
		//SimpleVarRef
		public RuleCall getSimpleVarRefParserRuleCall_0() { return cSimpleVarRefParserRuleCall_0; }
		
		//({ArrayRef.array=current} '[' indices+=SimpleExpression (',' indices+=SimpleExpression)* ']' |
		//{PropertyRef.object=current} '.' property=ID)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{ArrayRef.array=current} '[' indices+=SimpleExpression (',' indices+=SimpleExpression)* ']'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{ArrayRef.array=current}
		public Action getArrayRefArrayAction_1_0_0() { return cArrayRefArrayAction_1_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0_1() { return cLeftSquareBracketKeyword_1_0_1; }
		
		//indices+=SimpleExpression
		public Assignment getIndicesAssignment_1_0_2() { return cIndicesAssignment_1_0_2; }
		
		//SimpleExpression
		public RuleCall getIndicesSimpleExpressionParserRuleCall_1_0_2_0() { return cIndicesSimpleExpressionParserRuleCall_1_0_2_0; }
		
		//(',' indices+=SimpleExpression)*
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }
		
		//','
		public Keyword getCommaKeyword_1_0_3_0() { return cCommaKeyword_1_0_3_0; }
		
		//indices+=SimpleExpression
		public Assignment getIndicesAssignment_1_0_3_1() { return cIndicesAssignment_1_0_3_1; }
		
		//SimpleExpression
		public RuleCall getIndicesSimpleExpressionParserRuleCall_1_0_3_1_0() { return cIndicesSimpleExpressionParserRuleCall_1_0_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_0_4() { return cRightSquareBracketKeyword_1_0_4; }
		
		//{PropertyRef.object=current} '.' property=ID
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{PropertyRef.object=current}
		public Action getPropertyRefObjectAction_1_1_0() { return cPropertyRefObjectAction_1_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1_1() { return cFullStopKeyword_1_1_1; }
		
		//property=ID
		public Assignment getPropertyAssignment_1_1_2() { return cPropertyAssignment_1_1_2; }
		
		//ID
		public RuleCall getPropertyIDTerminalRuleCall_1_1_2_0() { return cPropertyIDTerminalRuleCall_1_1_2_0; }
	}
	public class SimpleVarRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.SimpleVarRef");
		private final Assignment cTargetAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTargetIDTerminalRuleCall_0 = (RuleCall)cTargetAssignment.eContents().get(0);
		
		//SimpleVarRef:
		//	target=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//target=ID
		public Assignment getTargetAssignment() { return cTargetAssignment; }
		
		//ID
		public RuleCall getTargetIDTerminalRuleCall_0() { return cTargetIDTerminalRuleCall_0; }
	}
	public class ArraySizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.ArraySize");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSizeOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArrayAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArrayRefParserRuleCall_2_0 = (RuleCall)cArrayAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArraySize:
		//	'sizeOf' '(' array=Ref ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'sizeOf' '(' array=Ref ')'
		public Group getGroup() { return cGroup; }
		
		//'sizeOf'
		public Keyword getSizeOfKeyword_0() { return cSizeOfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//array=Ref
		public Assignment getArrayAssignment_2() { return cArrayAssignment_2; }
		
		//Ref
		public RuleCall getArrayRefParserRuleCall_2_0() { return cArrayRefParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	
	public class MoniLoggerAnnotationElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.MoniLoggerAnnotation");
		private final EnumLiteralDeclaration cInactiveEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cInactiveInactiveKeyword_0 = (Keyword)cInactiveEnumLiteralDeclaration.eContents().get(0);
		
		//enum MoniLoggerAnnotation:
		//	inactive='@Inactive';
		public EnumRule getRule() { return rule; }
		
		//inactive='@Inactive'
		public EnumLiteralDeclaration getInactiveEnumLiteralDeclaration() { return cInactiveEnumLiteralDeclaration; }
		
		//'@Inactive'
		public Keyword getInactiveInactiveKeyword_0() { return cInactiveInactiveKeyword_0; }
	}
	public class AppenderAnnotationElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.AppenderAnnotation");
		private final EnumLiteralDeclaration cAsyncEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cAsyncAsyncKeyword_0 = (Keyword)cAsyncEnumLiteralDeclaration.eContents().get(0);
		
		//enum AppenderAnnotation:
		//	async='@Async';
		public EnumRule getRule() { return rule; }
		
		//async='@Async'
		public EnumLiteralDeclaration getAsyncEnumLiteralDeclaration() { return cAsyncEnumLiteralDeclaration; }
		
		//'@Async'
		public Keyword getAsyncAsyncKeyword_0() { return cAsyncAsyncKeyword_0; }
	}
	public class LogLevelElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.LogLevel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInfoEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInfoINFOKeyword_0_0 = (Keyword)cInfoEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cConfigEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cConfigCONFIGKeyword_1_0 = (Keyword)cConfigEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFineEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFineFINEKeyword_2_0 = (Keyword)cFineEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFinerEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFinerFINERKeyword_3_0 = (Keyword)cFinerEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFinestEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFinestFINESTKeyword_4_0 = (Keyword)cFinestEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSevereEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSevereSEVEREKeyword_5_0 = (Keyword)cSevereEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cWarningEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cWarningWARNINGKeyword_6_0 = (Keyword)cWarningEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum LogLevel:
		//	info='INFO' | config='CONFIG' | fine='FINE' | finer='FINER' |
		//	finest='FINEST' | severe='SEVERE' | warning='WARNING';
		public EnumRule getRule() { return rule; }
		
		//info='INFO' | config='CONFIG' | fine='FINE' | finer='FINER' | finest='FINEST' | severe='SEVERE' | warning='WARNING'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//info='INFO'
		public EnumLiteralDeclaration getInfoEnumLiteralDeclaration_0() { return cInfoEnumLiteralDeclaration_0; }
		
		//'INFO'
		public Keyword getInfoINFOKeyword_0_0() { return cInfoINFOKeyword_0_0; }
		
		//config='CONFIG'
		public EnumLiteralDeclaration getConfigEnumLiteralDeclaration_1() { return cConfigEnumLiteralDeclaration_1; }
		
		//'CONFIG'
		public Keyword getConfigCONFIGKeyword_1_0() { return cConfigCONFIGKeyword_1_0; }
		
		//fine='FINE'
		public EnumLiteralDeclaration getFineEnumLiteralDeclaration_2() { return cFineEnumLiteralDeclaration_2; }
		
		//'FINE'
		public Keyword getFineFINEKeyword_2_0() { return cFineFINEKeyword_2_0; }
		
		//finer='FINER'
		public EnumLiteralDeclaration getFinerEnumLiteralDeclaration_3() { return cFinerEnumLiteralDeclaration_3; }
		
		//'FINER'
		public Keyword getFinerFINERKeyword_3_0() { return cFinerFINERKeyword_3_0; }
		
		//finest='FINEST'
		public EnumLiteralDeclaration getFinestEnumLiteralDeclaration_4() { return cFinestEnumLiteralDeclaration_4; }
		
		//'FINEST'
		public Keyword getFinestFINESTKeyword_4_0() { return cFinestFINESTKeyword_4_0; }
		
		//severe='SEVERE'
		public EnumLiteralDeclaration getSevereEnumLiteralDeclaration_5() { return cSevereEnumLiteralDeclaration_5; }
		
		//'SEVERE'
		public Keyword getSevereSEVEREKeyword_5_0() { return cSevereSEVEREKeyword_5_0; }
		
		//warning='WARNING'
		public EnumLiteralDeclaration getWarningEnumLiteralDeclaration_6() { return cWarningEnumLiteralDeclaration_6; }
		
		//'WARNING'
		public Keyword getWarningWARNINGKeyword_6_0() { return cWarningWARNINGKeyword_6_0; }
	}
	public class TemporalPatternKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.TemporalPatternKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSSKeyword_0_0 = (Keyword)cSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVVKeyword_1_0 = (Keyword)cVEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNSNSKeyword_2_0 = (Keyword)cNSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNVEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNVNVKeyword_3_0 = (Keyword)cNVEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum TemporalPatternKind:
		//	s='S' | v='V' | nS | nV;
		public EnumRule getRule() { return rule; }
		
		//s='S' | v='V' | nS | nV
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//s='S'
		public EnumLiteralDeclaration getSEnumLiteralDeclaration_0() { return cSEnumLiteralDeclaration_0; }
		
		//'S'
		public Keyword getSSKeyword_0_0() { return cSSKeyword_0_0; }
		
		//v='V'
		public EnumLiteralDeclaration getVEnumLiteralDeclaration_1() { return cVEnumLiteralDeclaration_1; }
		
		//'V'
		public Keyword getVVKeyword_1_0() { return cVVKeyword_1_0; }
		
		//nS
		public EnumLiteralDeclaration getNSEnumLiteralDeclaration_2() { return cNSEnumLiteralDeclaration_2; }
		
		//'nS'
		public Keyword getNSNSKeyword_2_0() { return cNSNSKeyword_2_0; }
		
		//nV
		public EnumLiteralDeclaration getNVEnumLiteralDeclaration_3() { return cNVEnumLiteralDeclaration_3; }
		
		//'nV'
		public Keyword getNVNVKeyword_3_0() { return cNVNVKeyword_3_0; }
	}
	
	private final DocumentElements pDocument;
	private final ImportElements pImport;
	private final FileAliasElements pFileAlias;
	private final AppenderElements pAppender;
	private final LocalAppenderElements pLocalAppender;
	private final ExternalAppenderElements pExternalAppender;
	private final LayoutElements pLayout;
	private final LocalLayoutElements pLocalLayout;
	private final ExternalLayoutElements pExternalLayout;
	private final ParameterDeclVarArgsElements pParameterDeclVarArgs;
	private final ParameterDeclNoVarArgsElements pParameterDeclNoVarArgs;
	private final MoniLoggerElements pMoniLogger;
	private final ParameterElements pParameter;
	private final EventElements pEvent;
	private final ASTEventKindElements pASTEventKind;
	private final ConditionElements pCondition;
	private final TemporalPatternElements pTemporalPattern;
	private final PatternElements pPattern;
	private final BoundTypeElements pBoundType;
	private final ExactBoundElements pExactBound;
	private final LowerBoundElements pLowerBound;
	private final UpperBoundElements pUpperBound;
	private final ScopeElements pScope;
	private final ActionElements pAction;
	private final AppenderCallElements pAppenderCall;
	private final LayoutCallElements pLayoutCall;
	private final EmitEventElements pEmitEvent;
	private final MoniloggerCallElements pMoniloggerCall;
	private final StreamEventElements pStreamEvent;
	private final EmptyOrPropertyValueElements pEmptyOrPropertyValue;
	private final PropertyValueElements pPropertyValue;
	private final ExpressionElements pExpression;
	private final ParameterReferenceElements pParameterReference;
	private final MoniLogExpressionElements pMoniLogExpression;
	private final LanguageValueElements pLanguageValue;
	private final LanguageExpressionElements pLanguageExpression;
	private final LanguageCallElements pLanguageCall;
	private final SimpleExpressionElements pSimpleExpression;
	private final ContractedIfElements pContractedIf;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final EqualityElements pEquality;
	private final ComparisonElements pComparison;
	private final PlusOrMinusElements pPlusOrMinus;
	private final MulOrDivElements pMulOrDiv;
	private final ModuloElements pModulo;
	private final PrimaryElements pPrimary;
	private final AtomicElements pAtomic;
	private final RefElements pRef;
	private final SimpleVarRefElements pSimpleVarRef;
	private final ArraySizeElements pArraySize;
	private final TerminalRule tREAL;
	private final MoniLoggerAnnotationElements eMoniLoggerAnnotation;
	private final AppenderAnnotationElements eAppenderAnnotation;
	private final LogLevelElements eLogLevel;
	private final TemporalPatternKindElements eTemporalPatternKind;
	private final QualifiedNameElements pQualifiedName;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MoniLogGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDocument = new DocumentElements();
		this.pImport = new ImportElements();
		this.pFileAlias = new FileAliasElements();
		this.pAppender = new AppenderElements();
		this.pLocalAppender = new LocalAppenderElements();
		this.pExternalAppender = new ExternalAppenderElements();
		this.pLayout = new LayoutElements();
		this.pLocalLayout = new LocalLayoutElements();
		this.pExternalLayout = new ExternalLayoutElements();
		this.pParameterDeclVarArgs = new ParameterDeclVarArgsElements();
		this.pParameterDeclNoVarArgs = new ParameterDeclNoVarArgsElements();
		this.pMoniLogger = new MoniLoggerElements();
		this.pParameter = new ParameterElements();
		this.pEvent = new EventElements();
		this.pASTEventKind = new ASTEventKindElements();
		this.pCondition = new ConditionElements();
		this.pTemporalPattern = new TemporalPatternElements();
		this.pPattern = new PatternElements();
		this.pBoundType = new BoundTypeElements();
		this.pExactBound = new ExactBoundElements();
		this.pLowerBound = new LowerBoundElements();
		this.pUpperBound = new UpperBoundElements();
		this.pScope = new ScopeElements();
		this.pAction = new ActionElements();
		this.pAppenderCall = new AppenderCallElements();
		this.pLayoutCall = new LayoutCallElements();
		this.pEmitEvent = new EmitEventElements();
		this.pMoniloggerCall = new MoniloggerCallElements();
		this.pStreamEvent = new StreamEventElements();
		this.pEmptyOrPropertyValue = new EmptyOrPropertyValueElements();
		this.pPropertyValue = new PropertyValueElements();
		this.pExpression = new ExpressionElements();
		this.pParameterReference = new ParameterReferenceElements();
		this.pMoniLogExpression = new MoniLogExpressionElements();
		this.pLanguageValue = new LanguageValueElements();
		this.pLanguageExpression = new LanguageExpressionElements();
		this.pLanguageCall = new LanguageCallElements();
		this.pSimpleExpression = new SimpleExpressionElements();
		this.pContractedIf = new ContractedIfElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pEquality = new EqualityElements();
		this.pComparison = new ComparisonElements();
		this.pPlusOrMinus = new PlusOrMinusElements();
		this.pMulOrDiv = new MulOrDivElements();
		this.pModulo = new ModuloElements();
		this.pPrimary = new PrimaryElements();
		this.pAtomic = new AtomicElements();
		this.pRef = new RefElements();
		this.pSimpleVarRef = new SimpleVarRefElements();
		this.pArraySize = new ArraySizeElements();
		this.tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog.REAL");
		this.eMoniLoggerAnnotation = new MoniLoggerAnnotationElements();
		this.eAppenderAnnotation = new AppenderAnnotationElements();
		this.eLogLevel = new LogLevelElements();
		this.eTemporalPatternKind = new TemporalPatternKindElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.gemoc.monilog.MoniLog".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Document:
	//	'package' name=QualifiedName
	//	imports+=Import* (events+=Event* & appenders+=Appender* & layouts+=Layout* & moniloggers+=MoniLogger*);
	public DocumentElements getDocumentAccess() {
		return pDocument;
	}
	
	public ParserRule getDocumentRule() {
		return getDocumentAccess().getRule();
	}
	
	//Import:
	//	'import' importedNamespace=QualifiedNameWithWildcard | 'import' alias=FileAlias;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//FileAlias:
	//	filePath=STRING 'as' name=ID;
	public FileAliasElements getFileAliasAccess() {
		return pFileAlias;
	}
	
	public ParserRule getFileAliasRule() {
		return getFileAliasAccess().getRule();
	}
	
	//@Exported
	//Appender:
	//	LocalAppender | ExternalAppender;
	public AppenderElements getAppenderAccess() {
		return pAppender;
	}
	
	public ParserRule getAppenderRule() {
		return getAppenderAccess().getRule();
	}
	
	//LocalAppender:
	//	annotations+=AppenderAnnotation*
	//	'appender' name=ID ('(' parameterDecl=ParameterDeclVarArgs ')')? '{'
	//	calls+=AppenderCall (';' calls+=AppenderCall)* ';'?
	//	'}';
	public LocalAppenderElements getLocalAppenderAccess() {
		return pLocalAppender;
	}
	
	public ParserRule getLocalAppenderRule() {
		return getLocalAppenderAccess().getRule();
	}
	
	//ExternalAppender:
	//	'appender' name=ID ('(' parameterDecl=ParameterDeclVarArgs ')')?;
	public ExternalAppenderElements getExternalAppenderAccess() {
		return pExternalAppender;
	}
	
	public ParserRule getExternalAppenderRule() {
		return getExternalAppenderAccess().getRule();
	}
	
	//Layout:
	//	LocalLayout | ExternalLayout;
	public LayoutElements getLayoutAccess() {
		return pLayout;
	}
	
	public ParserRule getLayoutRule() {
		return getLayoutAccess().getRule();
	}
	
	//@Exported
	//LocalLayout:
	//	'layout' name=ID ('(' parameterDecl=ParameterDeclVarArgs ')')? '{'
	//	call=LayoutCall
	//	'}';
	public LocalLayoutElements getLocalLayoutAccess() {
		return pLocalLayout;
	}
	
	public ParserRule getLocalLayoutRule() {
		return getLocalLayoutAccess().getRule();
	}
	
	//@Exported
	//ExternalLayout:
	//	'layout' name=ID ('(' parameterDecl=ParameterDeclVarArgs ')')?;
	public ExternalLayoutElements getExternalLayoutAccess() {
		return pExternalLayout;
	}
	
	public ParserRule getExternalLayoutRule() {
		return getExternalLayoutAccess().getRule();
	}
	
	//ParameterDeclVarArgs ParameterDecl:
	//	{ParameterDecl} (parameters+=Parameter (',' parameters+=Parameter)* (',' varArgs=Parameter '...')?)?;
	public ParameterDeclVarArgsElements getParameterDeclVarArgsAccess() {
		return pParameterDeclVarArgs;
	}
	
	public ParserRule getParameterDeclVarArgsRule() {
		return getParameterDeclVarArgsAccess().getRule();
	}
	
	//ParameterDeclNoVarArgs ParameterDecl:
	//	{ParameterDecl} (parameters+=Parameter (',' parameters+=Parameter)*)?;
	public ParameterDeclNoVarArgsElements getParameterDeclNoVarArgsAccess() {
		return pParameterDeclNoVarArgs;
	}
	
	public ParserRule getParameterDeclNoVarArgsRule() {
		return getParameterDeclNoVarArgsAccess().getRule();
	}
	
	//@Exported
	//MoniLogger:
	//	annotations+=MoniLoggerAnnotation*
	//	'monilogger' name=ID ('(' parameterDecl=ParameterDeclVarArgs ')')? ('[' level=LogLevel ']')? '{'
	//	'event' streamEvent=StreamEvent ('conditions' '{' conditions+=Condition (';' conditions+=Condition)* ';'? '}')?
	//	'actions' '{' actions+=Action (';' actions+=Action)* ';'? '}'
	//	'}';
	public MoniLoggerElements getMoniLoggerAccess() {
		return pMoniLogger;
	}
	
	public ParserRule getMoniLoggerRule() {
		return getMoniLoggerAccess().getRule();
	}
	
	//Parameter:
	//	name=ID;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//@Exported
	//Event:
	//	{ASTEvent}
	//	'call' name=ID ('(' parameterDecl=ParameterDeclNoVarArgs ')')? '{'
	//	kind=ASTEventKind ruleID=ID
	//	'}' | {ComplexEvent} 'complex' name=ID ('[' kind=TemporalPatternKind ']')? ('(' parameterDecl=ParameterDeclNoVarArgs
	//	')')? '{'
	//	pattern=TemporalPattern
	//	'}' | {UserEvent} 'custom' name=ID ('(' parameterDecl=ParameterDeclNoVarArgs ')')?;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//ASTEventKind:
	//	{BeforeASTEvent} 'before' | {AfterASTEvent} 'after';
	public ASTEventKindElements getASTEventKindAccess() {
		return pASTEventKind;
	}
	
	public ParserRule getASTEventKindRule() {
		return getASTEventKindAccess().getRule();
	}
	
	//Condition:
	//	expression=LanguageValue;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//TemporalPattern:
	//	pattern=Pattern scope=Scope;
	public TemporalPatternElements getTemporalPatternAccess() {
		return pTemporalPattern;
	}
	
	public ParserRule getTemporalPatternRule() {
		return getTemporalPatternAccess().getRule();
	}
	
	//Pattern:
	//	{Existence} 'exists'? bound=BoundType? event=StreamEvent | {Universality} 'always' event=StreamEvent | {Absence}
	//	'never' event=StreamEvent | {Precedence} predecessor=StreamEvent 'precedes' successor=StreamEvent | {Response}
	//	event=StreamEvent 'respondsTo' trigger=StreamEvent;
	public PatternElements getPatternAccess() {
		return pPattern;
	}
	
	public ParserRule getPatternRule() {
		return getPatternAccess().getRule();
	}
	
	//BoundType:
	//	ExactBound | LowerBound | UpperBound;
	public BoundTypeElements getBoundTypeAccess() {
		return pBoundType;
	}
	
	public ParserRule getBoundTypeRule() {
		return getBoundTypeAccess().getRule();
	}
	
	//ExactBound:
	//	n=INT;
	public ExactBoundElements getExactBoundAccess() {
		return pExactBound;
	}
	
	public ParserRule getExactBoundRule() {
		return getExactBoundAccess().getRule();
	}
	
	//LowerBound:
	//	'atleast' n=INT;
	public LowerBoundElements getLowerBoundAccess() {
		return pLowerBound;
	}
	
	public ParserRule getLowerBoundRule() {
		return getLowerBoundAccess().getRule();
	}
	
	//UpperBound:
	//	'atmost' n=INT;
	public UpperBoundElements getUpperBoundAccess() {
		return pUpperBound;
	}
	
	public ParserRule getUpperBoundRule() {
		return getUpperBoundAccess().getRule();
	}
	
	//Scope:
	//	{Globally} 'globally'? | {After} 'after' lowerBound=StreamEvent | {Before} 'before' upperBound=StreamEvent | {Between}
	//	'between' lowerBound=StreamEvent 'and' upperBound=StreamEvent | {AfterUntil} 'after' lowerBound=StreamEvent 'until'
	//	upperBound=StreamEvent;
	public ScopeElements getScopeAccess() {
		return pScope;
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}
	
	//Action:
	//	LanguageValue | AppenderCall | EmitEvent | MoniloggerCall;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//AppenderCall:
	//	appender=[Appender|QualifiedName] '.' 'call' ('(' args+=Expression (',' args+=Expression)* ')')?;
	public AppenderCallElements getAppenderCallAccess() {
		return pAppenderCall;
	}
	
	public ParserRule getAppenderCallRule() {
		return getAppenderCallAccess().getRule();
	}
	
	//LayoutCall:
	//	layout=[Layout|QualifiedName] '.' 'call' ('(' args+=Expression (',' args+=Expression)* ')')?;
	public LayoutCallElements getLayoutCallAccess() {
		return pLayoutCall;
	}
	
	public ParserRule getLayoutCallRule() {
		return getLayoutCallAccess().getRule();
	}
	
	//EmitEvent:
	//	event=[UserEvent] '.' 'emit' ('(' args+=Expression (',' args+=Expression)* ')')?;
	public EmitEventElements getEmitEventAccess() {
		return pEmitEvent;
	}
	
	public ParserRule getEmitEventRule() {
		return getEmitEventAccess().getRule();
	}
	
	////SetVariable:
	////	'set' '(' variable=STRING ',' value=LanguageValue ')';
	//MoniloggerCall:
	//	{StartMoniLogger} monilogger=[MoniLogger] '.' 'start' ('(' args+=Expression (',' args+=Expression)* ')')? |
	//	{StopMoniLogger} monilogger=[MoniLogger] '.' 'stop';
	public MoniloggerCallElements getMoniloggerCallAccess() {
		return pMoniloggerCall;
	}
	
	public ParserRule getMoniloggerCallRule() {
		return getMoniloggerCallAccess().getRule();
	}
	
	//StreamEvent:
	//	event=[Event] ('(' values+=EmptyOrPropertyValue (',' values+=EmptyOrPropertyValue)* ')')?;
	public StreamEventElements getStreamEventAccess() {
		return pStreamEvent;
	}
	
	public ParserRule getStreamEventRule() {
		return getStreamEventAccess().getRule();
	}
	
	//EmptyOrPropertyValue:
	//	{Empty} | PropertyValue;
	public EmptyOrPropertyValueElements getEmptyOrPropertyValueAccess() {
		return pEmptyOrPropertyValue;
	}
	
	public ParserRule getEmptyOrPropertyValueRule() {
		return getEmptyOrPropertyValueAccess().getRule();
	}
	
	//PropertyValue:
	//	id=ID ('=' value=Expression)? | value=LanguageValue;
	public PropertyValueElements getPropertyValueAccess() {
		return pPropertyValue;
	}
	
	public ParserRule getPropertyValueRule() {
		return getPropertyValueAccess().getRule();
	}
	
	//Expression:
	//	ParameterReference | MoniLogExpression | LanguageValue | LayoutCall;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//ParameterReference:
	//	parameter=[Parameter];
	public ParameterReferenceElements getParameterReferenceAccess() {
		return pParameterReference;
	}
	
	public ParserRule getParameterReferenceRule() {
		return getParameterReferenceAccess().getRule();
	}
	
	//MoniLogExpression:
	//	'{' expression=SimpleExpression '}';
	public MoniLogExpressionElements getMoniLogExpressionAccess() {
		return pMoniLogExpression;
	}
	
	public ParserRule getMoniLogExpressionRule() {
		return getMoniLogExpressionAccess().getRule();
	}
	
	//LanguageValue:
	//	languageId=ID '(' value=(LanguageExpression | LanguageCall) ')';
	public LanguageValueElements getLanguageValueAccess() {
		return pLanguageValue;
	}
	
	public ParserRule getLanguageValueRule() {
		return getLanguageValueAccess().getRule();
	}
	
	//LanguageExpression:
	//	expression=STRING;
	public LanguageExpressionElements getLanguageExpressionAccess() {
		return pLanguageExpression;
	}
	
	public ParserRule getLanguageExpressionRule() {
		return getLanguageExpressionAccess().getRule();
	}
	
	//LanguageCall:
	//	file=[FileAlias] '.' fqn=QualifiedName ('(' args+=Expression (',' args+=Expression)* ')')?;
	public LanguageCallElements getLanguageCallAccess() {
		return pLanguageCall;
	}
	
	public ParserRule getLanguageCallRule() {
		return getLanguageCallAccess().getRule();
	}
	
	////==================================== SIMPLE EXPRESSIONS ====================================//
	//SimpleExpression:
	//	ContractedIf;
	public SimpleExpressionElements getSimpleExpressionAccess() {
		return pSimpleExpression;
	}
	
	public ParserRule getSimpleExpressionRule() {
		return getSimpleExpressionAccess().getRule();
	}
	
	//ContractedIf SimpleExpression:
	//	Or ({ContractedIf.condition=current} '?' then=Or ':' else=Or)*;
	public ContractedIfElements getContractedIfAccess() {
		return pContractedIf;
	}
	
	public ParserRule getContractedIfRule() {
		return getContractedIfAccess().getRule();
	}
	
	//Or SimpleExpression:
	//	And ({Or.left=current} op='||' right=And)*;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And SimpleExpression:
	//	Equality ({And.left=current} op='&&' right=Equality)*;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Equality SimpleExpression:
	//	Comparison ({Equality.left=current} op=('==' | '!=') right=Comparison)*;
	public EqualityElements getEqualityAccess() {
		return pEquality;
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}
	
	//Comparison SimpleExpression:
	//	PlusOrMinus ({Comparison.left=current} op=('>=' | '<=' | '>' | '<') right=PlusOrMinus)*;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//PlusOrMinus SimpleExpression:
	//	MulOrDiv (({Plus.left=current} op='+' | {Minus.left=current} op='-') right=MulOrDiv)*;
	public PlusOrMinusElements getPlusOrMinusAccess() {
		return pPlusOrMinus;
	}
	
	public ParserRule getPlusOrMinusRule() {
		return getPlusOrMinusAccess().getRule();
	}
	
	//MulOrDiv SimpleExpression:
	//	Modulo (({Mul.left=current} op='*' | {Div.Left=current} op='/') right=Modulo)*;
	public MulOrDivElements getMulOrDivAccess() {
		return pMulOrDiv;
	}
	
	public ParserRule getMulOrDivRule() {
		return getMulOrDivAccess().getRule();
	}
	
	//Modulo SimpleExpression:
	//	Primary ({Modulo.left=current} op='%' right=Primary)*;
	public ModuloElements getModuloAccess() {
		return pModulo;
	}
	
	public ParserRule getModuloRule() {
		return getModuloAccess().getRule();
	}
	
	//Primary SimpleExpression:
	//	{Parenthesis} '(' expression=SimpleExpression ')' | {UnaryMinus} '-' expression=Primary | {Not} '!' expression=Primary
	//	| Atomic;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//Atomic SimpleExpression:
	//	{IntConstant} value=INT | {RealConstant} value=REAL | {BoolConstant} (value?='true' | 'false') | {StringConstant}
	//	value=STRING | {VectorConstant} '[' values+=SimpleExpression (',' values+=SimpleExpression)* ']' | Ref | ArraySize;
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	//Ref:
	//	SimpleVarRef ({ArrayRef.array=current} '[' indices+=SimpleExpression (',' indices+=SimpleExpression)* ']' |
	//	{PropertyRef.object=current} '.' property=ID)*;
	public RefElements getRefAccess() {
		return pRef;
	}
	
	public ParserRule getRefRule() {
		return getRefAccess().getRule();
	}
	
	//SimpleVarRef:
	//	target=ID;
	public SimpleVarRefElements getSimpleVarRefAccess() {
		return pSimpleVarRef;
	}
	
	public ParserRule getSimpleVarRefRule() {
		return getSimpleVarRefAccess().getRule();
	}
	
	//ArraySize:
	//	'sizeOf' '(' array=Ref ')';
	public ArraySizeElements getArraySizeAccess() {
		return pArraySize;
	}
	
	public ParserRule getArraySizeRule() {
		return getArraySizeAccess().getRule();
	}
	
	//terminal REAL:
	//	INT '.' INT;
	public TerminalRule getREALRule() {
		return tREAL;
	}
	
	//enum MoniLoggerAnnotation:
	//	inactive='@Inactive';
	public MoniLoggerAnnotationElements getMoniLoggerAnnotationAccess() {
		return eMoniLoggerAnnotation;
	}
	
	public EnumRule getMoniLoggerAnnotationRule() {
		return getMoniLoggerAnnotationAccess().getRule();
	}
	
	//enum AppenderAnnotation:
	//	async='@Async';
	public AppenderAnnotationElements getAppenderAnnotationAccess() {
		return eAppenderAnnotation;
	}
	
	public EnumRule getAppenderAnnotationRule() {
		return getAppenderAnnotationAccess().getRule();
	}
	
	//enum LogLevel:
	//	info='INFO' | config='CONFIG' | fine='FINE' | finer='FINER' |
	//	finest='FINEST' | severe='SEVERE' | warning='WARNING';
	public LogLevelElements getLogLevelAccess() {
		return eLogLevel;
	}
	
	public EnumRule getLogLevelRule() {
		return getLogLevelAccess().getRule();
	}
	
	//enum TemporalPatternKind:
	//	s='S' | v='V' | nS | nV;
	public TemporalPatternKindElements getTemporalPatternKindAccess() {
		return eTemporalPatternKind;
	}
	
	public EnumRule getTemporalPatternKindRule() {
		return getTemporalPatternKindAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.*'?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
