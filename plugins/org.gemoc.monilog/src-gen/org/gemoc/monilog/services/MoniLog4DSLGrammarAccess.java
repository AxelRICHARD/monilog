/*
 * generated by Xtext 2.22.0
 */
package org.gemoc.monilog.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MoniLog4DSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cDefaultLanguageKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cDefaultLanguageIDAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cDefaultLanguageIDAlternatives_0_1_0 = (Alternatives)cDefaultLanguageIDAssignment_0_1.eContents().get(0);
		private final RuleCall cDefaultLanguageIDIDTerminalRuleCall_0_1_0_0 = (RuleCall)cDefaultLanguageIDAlternatives_0_1_0.eContents().get(0);
		private final RuleCall cDefaultLanguageIDSTRINGTerminalRuleCall_0_1_0_1 = (RuleCall)cDefaultLanguageIDAlternatives_0_1_0.eContents().get(1);
		private final Assignment cMoniLogSpecsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMoniLogSpecsMoniLogSpecParserRuleCall_1_0 = (RuleCall)cMoniLogSpecsAssignment_1.eContents().get(0);
		
		//Model:
		//	('default-language' defaultLanguageID=(ID | STRING))?
		//	moniLogSpecs+=MoniLogSpec+;
		@Override public ParserRule getRule() { return rule; }
		
		//('default-language' defaultLanguageID=(ID | STRING))? moniLogSpecs+=MoniLogSpec+
		public Group getGroup() { return cGroup; }
		
		//('default-language' defaultLanguageID=(ID | STRING))?
		public Group getGroup_0() { return cGroup_0; }
		
		//'default-language'
		public Keyword getDefaultLanguageKeyword_0_0() { return cDefaultLanguageKeyword_0_0; }
		
		//defaultLanguageID=(ID | STRING)
		public Assignment getDefaultLanguageIDAssignment_0_1() { return cDefaultLanguageIDAssignment_0_1; }
		
		//(ID | STRING)
		public Alternatives getDefaultLanguageIDAlternatives_0_1_0() { return cDefaultLanguageIDAlternatives_0_1_0; }
		
		//ID
		public RuleCall getDefaultLanguageIDIDTerminalRuleCall_0_1_0_0() { return cDefaultLanguageIDIDTerminalRuleCall_0_1_0_0; }
		
		//STRING
		public RuleCall getDefaultLanguageIDSTRINGTerminalRuleCall_0_1_0_1() { return cDefaultLanguageIDSTRINGTerminalRuleCall_0_1_0_1; }
		
		//moniLogSpecs+=MoniLogSpec+
		public Assignment getMoniLogSpecsAssignment_1() { return cMoniLogSpecsAssignment_1; }
		
		//MoniLogSpec
		public RuleCall getMoniLogSpecsMoniLogSpecParserRuleCall_1_0() { return cMoniLogSpecsMoniLogSpecParserRuleCall_1_0; }
	}
	public class MoniLogSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.MoniLogSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMonilogKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLevelAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLevelLogLevelEnumRuleCall_2_1_0 = (RuleCall)cLevelAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEventsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cEventsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cEventsEventParserRuleCall_4_2_0 = (RuleCall)cEventsAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cEventsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cEventsEventParserRuleCall_4_3_1_0 = (RuleCall)cEventsAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cConditionsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cConditionsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cConditionsConditionParserRuleCall_5_2_0 = (RuleCall)cConditionsAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cConditionsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cConditionsConditionParserRuleCall_5_3_1_0 = (RuleCall)cConditionsAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Keyword cActionsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cActionsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cActionsActionParserRuleCall_8_0 = (RuleCall)cActionsAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cActionsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_9_1_0 = (RuleCall)cActionsAssignment_9_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//MoniLogSpec:
		//	'monilog' name=STRING? ('[' level=LogLevel ']')? '{' ('events' '{' events+=Event (',' events+=Event)* '}')?
		//	('conditions' '{' conditions+=Condition (',' conditions+=Condition)* '}')?
		//	'actions' '{' actions+=Action (',' actions+=Action)* '}'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'monilog' name=STRING? ('[' level=LogLevel ']')? '{' ('events' '{' events+=Event (',' events+=Event)* '}')?
		//('conditions' '{' conditions+=Condition (',' conditions+=Condition)* '}')? 'actions' '{' actions+=Action (','
		//actions+=Action)* '}' '}'
		public Group getGroup() { return cGroup; }
		
		//'monilog'
		public Keyword getMonilogKeyword_0() { return cMonilogKeyword_0; }
		
		//name=STRING?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//('[' level=LogLevel ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//level=LogLevel
		public Assignment getLevelAssignment_2_1() { return cLevelAssignment_2_1; }
		
		//LogLevel
		public RuleCall getLevelLogLevelEnumRuleCall_2_1_0() { return cLevelLogLevelEnumRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('events' '{' events+=Event (',' events+=Event)* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'events'
		public Keyword getEventsKeyword_4_0() { return cEventsKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//events+=Event
		public Assignment getEventsAssignment_4_2() { return cEventsAssignment_4_2; }
		
		//Event
		public RuleCall getEventsEventParserRuleCall_4_2_0() { return cEventsEventParserRuleCall_4_2_0; }
		
		//(',' events+=Event)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//','
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//events+=Event
		public Assignment getEventsAssignment_4_3_1() { return cEventsAssignment_4_3_1; }
		
		//Event
		public RuleCall getEventsEventParserRuleCall_4_3_1_0() { return cEventsEventParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//('conditions' '{' conditions+=Condition (',' conditions+=Condition)* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'conditions'
		public Keyword getConditionsKeyword_5_0() { return cConditionsKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//conditions+=Condition
		public Assignment getConditionsAssignment_5_2() { return cConditionsAssignment_5_2; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_5_2_0() { return cConditionsConditionParserRuleCall_5_2_0; }
		
		//(',' conditions+=Condition)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//','
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//conditions+=Condition
		public Assignment getConditionsAssignment_5_3_1() { return cConditionsAssignment_5_3_1; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_5_3_1_0() { return cConditionsConditionParserRuleCall_5_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }
		
		//'actions'
		public Keyword getActionsKeyword_6() { return cActionsKeyword_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//actions+=Action
		public Assignment getActionsAssignment_8() { return cActionsAssignment_8; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_8_0() { return cActionsActionParserRuleCall_8_0; }
		
		//(',' actions+=Action)*
		public Group getGroup_9() { return cGroup_9; }
		
		//','
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }
		
		//actions+=Action
		public Assignment getActionsAssignment_9_1() { return cActionsAssignment_9_1; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_9_1_0() { return cActionsActionParserRuleCall_9_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.Event");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBeforeEventParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAfterEventParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBeforeAfterEventParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Event:
		//	BeforeEvent | AfterEvent | BeforeAfterEvent;
		@Override public ParserRule getRule() { return rule; }
		
		//BeforeEvent | AfterEvent | BeforeAfterEvent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BeforeEvent
		public RuleCall getBeforeEventParserRuleCall_0() { return cBeforeEventParserRuleCall_0; }
		
		//AfterEvent
		public RuleCall getAfterEventParserRuleCall_1() { return cAfterEventParserRuleCall_1; }
		
		//BeforeAfterEvent
		public RuleCall getBeforeAfterEventParserRuleCall_2() { return cBeforeAfterEventParserRuleCall_2; }
	}
	public class BeforeEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.BeforeEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBeforeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRuleIDAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cRuleIDAlternatives_1_0 = (Alternatives)cRuleIDAssignment_1.eContents().get(0);
		private final RuleCall cRuleIDIDTerminalRuleCall_1_0_0 = (RuleCall)cRuleIDAlternatives_1_0.eContents().get(0);
		private final RuleCall cRuleIDSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cRuleIDAlternatives_1_0.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cFrequencyKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cFrequencyAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cFrequencyINTTerminalRuleCall_2_0_1_0 = (RuleCall)cFrequencyAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cLimitKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cLimitAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cLimitINTTerminalRuleCall_2_1_1_0 = (RuleCall)cLimitAssignment_2_1_1.eContents().get(0);
		
		//BeforeEvent:
		//	'before' ruleID=(ID | STRING) (('frequency^' frequency=INT)? & ('limit' limit=INT)?);
		@Override public ParserRule getRule() { return rule; }
		
		//'before' ruleID=(ID | STRING) (('frequency^' frequency=INT)? & ('limit' limit=INT)?)
		public Group getGroup() { return cGroup; }
		
		//'before'
		public Keyword getBeforeKeyword_0() { return cBeforeKeyword_0; }
		
		//ruleID=(ID | STRING)
		public Assignment getRuleIDAssignment_1() { return cRuleIDAssignment_1; }
		
		//(ID | STRING)
		public Alternatives getRuleIDAlternatives_1_0() { return cRuleIDAlternatives_1_0; }
		
		//ID
		public RuleCall getRuleIDIDTerminalRuleCall_1_0_0() { return cRuleIDIDTerminalRuleCall_1_0_0; }
		
		//STRING
		public RuleCall getRuleIDSTRINGTerminalRuleCall_1_0_1() { return cRuleIDSTRINGTerminalRuleCall_1_0_1; }
		
		//(('frequency^' frequency=INT)? & ('limit' limit=INT)?)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//('frequency^' frequency=INT)?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'frequency^'
		public Keyword getFrequencyKeyword_2_0_0() { return cFrequencyKeyword_2_0_0; }
		
		//frequency=INT
		public Assignment getFrequencyAssignment_2_0_1() { return cFrequencyAssignment_2_0_1; }
		
		//INT
		public RuleCall getFrequencyINTTerminalRuleCall_2_0_1_0() { return cFrequencyINTTerminalRuleCall_2_0_1_0; }
		
		//('limit' limit=INT)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'limit'
		public Keyword getLimitKeyword_2_1_0() { return cLimitKeyword_2_1_0; }
		
		//limit=INT
		public Assignment getLimitAssignment_2_1_1() { return cLimitAssignment_2_1_1; }
		
		//INT
		public RuleCall getLimitINTTerminalRuleCall_2_1_1_0() { return cLimitINTTerminalRuleCall_2_1_1_0; }
	}
	public class AfterEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.AfterEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAfterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRuleIDAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cRuleIDAlternatives_1_0 = (Alternatives)cRuleIDAssignment_1.eContents().get(0);
		private final RuleCall cRuleIDIDTerminalRuleCall_1_0_0 = (RuleCall)cRuleIDAlternatives_1_0.eContents().get(0);
		private final RuleCall cRuleIDSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cRuleIDAlternatives_1_0.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cFrequencyKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cFrequencyAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cFrequencyINTTerminalRuleCall_2_0_1_0 = (RuleCall)cFrequencyAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cLimitKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cLimitAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cLimitINTTerminalRuleCall_2_1_1_0 = (RuleCall)cLimitAssignment_2_1_1.eContents().get(0);
		
		//AfterEvent:
		//	'after' ruleID=(ID | STRING) (('frequency' frequency=INT)? & ('limit' limit=INT)?);
		@Override public ParserRule getRule() { return rule; }
		
		//'after' ruleID=(ID | STRING) (('frequency' frequency=INT)? & ('limit' limit=INT)?)
		public Group getGroup() { return cGroup; }
		
		//'after'
		public Keyword getAfterKeyword_0() { return cAfterKeyword_0; }
		
		//ruleID=(ID | STRING)
		public Assignment getRuleIDAssignment_1() { return cRuleIDAssignment_1; }
		
		//(ID | STRING)
		public Alternatives getRuleIDAlternatives_1_0() { return cRuleIDAlternatives_1_0; }
		
		//ID
		public RuleCall getRuleIDIDTerminalRuleCall_1_0_0() { return cRuleIDIDTerminalRuleCall_1_0_0; }
		
		//STRING
		public RuleCall getRuleIDSTRINGTerminalRuleCall_1_0_1() { return cRuleIDSTRINGTerminalRuleCall_1_0_1; }
		
		//(('frequency' frequency=INT)? & ('limit' limit=INT)?)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//('frequency' frequency=INT)?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'frequency'
		public Keyword getFrequencyKeyword_2_0_0() { return cFrequencyKeyword_2_0_0; }
		
		//frequency=INT
		public Assignment getFrequencyAssignment_2_0_1() { return cFrequencyAssignment_2_0_1; }
		
		//INT
		public RuleCall getFrequencyINTTerminalRuleCall_2_0_1_0() { return cFrequencyINTTerminalRuleCall_2_0_1_0; }
		
		//('limit' limit=INT)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'limit'
		public Keyword getLimitKeyword_2_1_0() { return cLimitKeyword_2_1_0; }
		
		//limit=INT
		public Assignment getLimitAssignment_2_1_1() { return cLimitAssignment_2_1_1; }
		
		//INT
		public RuleCall getLimitINTTerminalRuleCall_2_1_1_0() { return cLimitINTTerminalRuleCall_2_1_1_0; }
	}
	public class BeforeAfterEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.BeforeAfterEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRuleIDAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cRuleIDAlternatives_0_0 = (Alternatives)cRuleIDAssignment_0.eContents().get(0);
		private final RuleCall cRuleIDIDTerminalRuleCall_0_0_0 = (RuleCall)cRuleIDAlternatives_0_0.eContents().get(0);
		private final RuleCall cRuleIDSTRINGTerminalRuleCall_0_0_1 = (RuleCall)cRuleIDAlternatives_0_0.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cUnorderedGroup_1.eContents().get(0);
		private final Keyword cFrequencyKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cFrequencyAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cFrequencyINTTerminalRuleCall_1_0_1_0 = (RuleCall)cFrequencyAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cLimitKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cLimitAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cLimitINTTerminalRuleCall_1_1_1_0 = (RuleCall)cLimitAssignment_1_1_1.eContents().get(0);
		
		//BeforeAfterEvent:
		//	ruleID=(ID | STRING) (('frequency' frequency=INT)? & ('limit' limit=INT)?);
		@Override public ParserRule getRule() { return rule; }
		
		//ruleID=(ID | STRING) (('frequency' frequency=INT)? & ('limit' limit=INT)?)
		public Group getGroup() { return cGroup; }
		
		//ruleID=(ID | STRING)
		public Assignment getRuleIDAssignment_0() { return cRuleIDAssignment_0; }
		
		//(ID | STRING)
		public Alternatives getRuleIDAlternatives_0_0() { return cRuleIDAlternatives_0_0; }
		
		//ID
		public RuleCall getRuleIDIDTerminalRuleCall_0_0_0() { return cRuleIDIDTerminalRuleCall_0_0_0; }
		
		//STRING
		public RuleCall getRuleIDSTRINGTerminalRuleCall_0_0_1() { return cRuleIDSTRINGTerminalRuleCall_0_0_1; }
		
		//(('frequency' frequency=INT)? & ('limit' limit=INT)?)
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }
		
		//('frequency' frequency=INT)?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'frequency'
		public Keyword getFrequencyKeyword_1_0_0() { return cFrequencyKeyword_1_0_0; }
		
		//frequency=INT
		public Assignment getFrequencyAssignment_1_0_1() { return cFrequencyAssignment_1_0_1; }
		
		//INT
		public RuleCall getFrequencyINTTerminalRuleCall_1_0_1_0() { return cFrequencyINTTerminalRuleCall_1_0_1_0; }
		
		//('limit' limit=INT)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'limit'
		public Keyword getLimitKeyword_1_1_0() { return cLimitKeyword_1_1_0; }
		
		//limit=INT
		public Assignment getLimitAssignment_1_1_1() { return cLimitAssignment_1_1_1; }
		
		//INT
		public RuleCall getLimitINTTerminalRuleCall_1_1_1_0() { return cLimitINTTerminalRuleCall_1_1_1_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTemporalPropertyConditionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cStreamKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cPatternAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cPatternTemporalPatternParserRuleCall_0_3_0 = (RuleCall)cPatternAssignment_0_3.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cCommaKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cKindAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cKindTemporalPropertyConditionKindEnumRuleCall_0_4_1_0 = (RuleCall)cKindAssignment_0_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLanguageExpressionConditionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionLanguageExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		
		//Condition:
		//	{TemporalPropertyCondition} 'stream' '(' pattern=TemporalPattern (',' kind=TemporalPropertyConditionKind)? ')' |
		//	{LanguageExpressionCondition} expression=LanguageExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{TemporalPropertyCondition} 'stream' '(' pattern=TemporalPattern (',' kind=TemporalPropertyConditionKind)? ')' |
		//{LanguageExpressionCondition} expression=LanguageExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{TemporalPropertyCondition} 'stream' '(' pattern=TemporalPattern (',' kind=TemporalPropertyConditionKind)? ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{TemporalPropertyCondition}
		public Action getTemporalPropertyConditionAction_0_0() { return cTemporalPropertyConditionAction_0_0; }
		
		//'stream'
		public Keyword getStreamKeyword_0_1() { return cStreamKeyword_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }
		
		//pattern=TemporalPattern
		public Assignment getPatternAssignment_0_3() { return cPatternAssignment_0_3; }
		
		//TemporalPattern
		public RuleCall getPatternTemporalPatternParserRuleCall_0_3_0() { return cPatternTemporalPatternParserRuleCall_0_3_0; }
		
		//(',' kind=TemporalPropertyConditionKind)?
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//','
		public Keyword getCommaKeyword_0_4_0() { return cCommaKeyword_0_4_0; }
		
		//kind=TemporalPropertyConditionKind
		public Assignment getKindAssignment_0_4_1() { return cKindAssignment_0_4_1; }
		
		//TemporalPropertyConditionKind
		public RuleCall getKindTemporalPropertyConditionKindEnumRuleCall_0_4_1_0() { return cKindTemporalPropertyConditionKindEnumRuleCall_0_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_5() { return cRightParenthesisKeyword_0_5; }
		
		//{LanguageExpressionCondition} expression=LanguageExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//{LanguageExpressionCondition}
		public Action getLanguageExpressionConditionAction_1_0() { return cLanguageExpressionConditionAction_1_0; }
		
		//expression=LanguageExpression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }
		
		//LanguageExpression
		public RuleCall getExpressionLanguageExpressionParserRuleCall_1_1_0() { return cExpressionLanguageExpressionParserRuleCall_1_1_0; }
	}
	public class TemporalPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.TemporalPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPatternAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPatternPatternParserRuleCall_0_0 = (RuleCall)cPatternAssignment_0.eContents().get(0);
		private final Assignment cScopeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cScopeScopeParserRuleCall_1_0 = (RuleCall)cScopeAssignment_1.eContents().get(0);
		
		//TemporalPattern:
		//	pattern=Pattern scope=Scope;
		@Override public ParserRule getRule() { return rule; }
		
		//pattern=Pattern scope=Scope
		public Group getGroup() { return cGroup; }
		
		//pattern=Pattern
		public Assignment getPatternAssignment_0() { return cPatternAssignment_0; }
		
		//Pattern
		public RuleCall getPatternPatternParserRuleCall_0_0() { return cPatternPatternParserRuleCall_0_0; }
		
		//scope=Scope
		public Assignment getScopeAssignment_1() { return cScopeAssignment_1; }
		
		//Scope
		public RuleCall getScopeScopeParserRuleCall_1_0() { return cScopeScopeParserRuleCall_1_0; }
	}
	public class PatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.Pattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUniversalityAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cAlwaysKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cEventAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cEventStreamEventParserRuleCall_0_2_0 = (RuleCall)cEventAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cExistenceAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExistsKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cBoundAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cBoundBoundTypeParserRuleCall_1_2_0 = (RuleCall)cBoundAssignment_1_2.eContents().get(0);
		private final Assignment cEventAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cEventStreamEventParserRuleCall_1_3_0 = (RuleCall)cEventAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cAbsenceAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cNeverKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cEventAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cEventStreamEventParserRuleCall_2_2_0 = (RuleCall)cEventAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cPrecedenceAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cPredecessorAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPredecessorStreamEventParserRuleCall_3_1_0 = (RuleCall)cPredecessorAssignment_3_1.eContents().get(0);
		private final Keyword cPrecedesKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cSuccessorAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cSuccessorStreamEventParserRuleCall_3_3_0 = (RuleCall)cSuccessorAssignment_3_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cResponseAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cEventAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEventStreamEventParserRuleCall_4_1_0 = (RuleCall)cEventAssignment_4_1.eContents().get(0);
		private final Keyword cRespondsToKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cTriggerAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cTriggerStreamEventParserRuleCall_4_3_0 = (RuleCall)cTriggerAssignment_4_3.eContents().get(0);
		
		//Pattern:
		//	{Universality} 'always' event=StreamEvent | {Existence} 'exists' bound=BoundType event=StreamEvent | {Absence} 'never'
		//	event=StreamEvent | {Precedence} predecessor=StreamEvent 'precedes' successor=StreamEvent | {Response}
		//	event=StreamEvent 'respondsTo' trigger=StreamEvent;
		@Override public ParserRule getRule() { return rule; }
		
		//{Universality} 'always' event=StreamEvent | {Existence} 'exists' bound=BoundType event=StreamEvent | {Absence} 'never'
		//event=StreamEvent | {Precedence} predecessor=StreamEvent 'precedes' successor=StreamEvent | {Response}
		//event=StreamEvent 'respondsTo' trigger=StreamEvent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Universality} 'always' event=StreamEvent
		public Group getGroup_0() { return cGroup_0; }
		
		//{Universality}
		public Action getUniversalityAction_0_0() { return cUniversalityAction_0_0; }
		
		//'always'
		public Keyword getAlwaysKeyword_0_1() { return cAlwaysKeyword_0_1; }
		
		//event=StreamEvent
		public Assignment getEventAssignment_0_2() { return cEventAssignment_0_2; }
		
		//StreamEvent
		public RuleCall getEventStreamEventParserRuleCall_0_2_0() { return cEventStreamEventParserRuleCall_0_2_0; }
		
		//{Existence} 'exists' bound=BoundType event=StreamEvent
		public Group getGroup_1() { return cGroup_1; }
		
		//{Existence}
		public Action getExistenceAction_1_0() { return cExistenceAction_1_0; }
		
		//'exists'
		public Keyword getExistsKeyword_1_1() { return cExistsKeyword_1_1; }
		
		//bound=BoundType
		public Assignment getBoundAssignment_1_2() { return cBoundAssignment_1_2; }
		
		//BoundType
		public RuleCall getBoundBoundTypeParserRuleCall_1_2_0() { return cBoundBoundTypeParserRuleCall_1_2_0; }
		
		//event=StreamEvent
		public Assignment getEventAssignment_1_3() { return cEventAssignment_1_3; }
		
		//StreamEvent
		public RuleCall getEventStreamEventParserRuleCall_1_3_0() { return cEventStreamEventParserRuleCall_1_3_0; }
		
		//{Absence} 'never' event=StreamEvent
		public Group getGroup_2() { return cGroup_2; }
		
		//{Absence}
		public Action getAbsenceAction_2_0() { return cAbsenceAction_2_0; }
		
		//'never'
		public Keyword getNeverKeyword_2_1() { return cNeverKeyword_2_1; }
		
		//event=StreamEvent
		public Assignment getEventAssignment_2_2() { return cEventAssignment_2_2; }
		
		//StreamEvent
		public RuleCall getEventStreamEventParserRuleCall_2_2_0() { return cEventStreamEventParserRuleCall_2_2_0; }
		
		//{Precedence} predecessor=StreamEvent 'precedes' successor=StreamEvent
		public Group getGroup_3() { return cGroup_3; }
		
		//{Precedence}
		public Action getPrecedenceAction_3_0() { return cPrecedenceAction_3_0; }
		
		//predecessor=StreamEvent
		public Assignment getPredecessorAssignment_3_1() { return cPredecessorAssignment_3_1; }
		
		//StreamEvent
		public RuleCall getPredecessorStreamEventParserRuleCall_3_1_0() { return cPredecessorStreamEventParserRuleCall_3_1_0; }
		
		//'precedes'
		public Keyword getPrecedesKeyword_3_2() { return cPrecedesKeyword_3_2; }
		
		//successor=StreamEvent
		public Assignment getSuccessorAssignment_3_3() { return cSuccessorAssignment_3_3; }
		
		//StreamEvent
		public RuleCall getSuccessorStreamEventParserRuleCall_3_3_0() { return cSuccessorStreamEventParserRuleCall_3_3_0; }
		
		//{Response} event=StreamEvent 'respondsTo' trigger=StreamEvent
		public Group getGroup_4() { return cGroup_4; }
		
		//{Response}
		public Action getResponseAction_4_0() { return cResponseAction_4_0; }
		
		//event=StreamEvent
		public Assignment getEventAssignment_4_1() { return cEventAssignment_4_1; }
		
		//StreamEvent
		public RuleCall getEventStreamEventParserRuleCall_4_1_0() { return cEventStreamEventParserRuleCall_4_1_0; }
		
		//'respondsTo'
		public Keyword getRespondsToKeyword_4_2() { return cRespondsToKeyword_4_2; }
		
		//trigger=StreamEvent
		public Assignment getTriggerAssignment_4_3() { return cTriggerAssignment_4_3; }
		
		//StreamEvent
		public RuleCall getTriggerStreamEventParserRuleCall_4_3_0() { return cTriggerStreamEventParserRuleCall_4_3_0; }
	}
	public class BoundTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.BoundType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExactBoundParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLowerBoundParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUpperBoundParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BoundType:
		//	ExactBound | LowerBound | UpperBound;
		@Override public ParserRule getRule() { return rule; }
		
		//ExactBound | LowerBound | UpperBound
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExactBound
		public RuleCall getExactBoundParserRuleCall_0() { return cExactBoundParserRuleCall_0; }
		
		//LowerBound
		public RuleCall getLowerBoundParserRuleCall_1() { return cLowerBoundParserRuleCall_1; }
		
		//UpperBound
		public RuleCall getUpperBoundParserRuleCall_2() { return cUpperBoundParserRuleCall_2; }
	}
	public class ExactBoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.ExactBound");
		private final Assignment cNAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNINTTerminalRuleCall_0 = (RuleCall)cNAssignment.eContents().get(0);
		
		//ExactBound:
		//	n=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//n=INT
		public Assignment getNAssignment() { return cNAssignment; }
		
		//INT
		public RuleCall getNINTTerminalRuleCall_0() { return cNINTTerminalRuleCall_0; }
	}
	public class LowerBoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.LowerBound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAtleastKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNINTTerminalRuleCall_1_0 = (RuleCall)cNAssignment_1.eContents().get(0);
		
		//LowerBound:
		//	'atleast' n=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'atleast' n=INT
		public Group getGroup() { return cGroup; }
		
		//'atleast'
		public Keyword getAtleastKeyword_0() { return cAtleastKeyword_0; }
		
		//n=INT
		public Assignment getNAssignment_1() { return cNAssignment_1; }
		
		//INT
		public RuleCall getNINTTerminalRuleCall_1_0() { return cNINTTerminalRuleCall_1_0; }
	}
	public class UpperBoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.UpperBound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAtmostKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNINTTerminalRuleCall_1_0 = (RuleCall)cNAssignment_1.eContents().get(0);
		
		//UpperBound:
		//	'atmost' n=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'atmost' n=INT
		public Group getGroup() { return cGroup; }
		
		//'atmost'
		public Keyword getAtmostKeyword_0() { return cAtmostKeyword_0; }
		
		//n=INT
		public Assignment getNAssignment_1() { return cNAssignment_1; }
		
		//INT
		public RuleCall getNINTTerminalRuleCall_1_0() { return cNINTTerminalRuleCall_1_0; }
	}
	public class ScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.Scope");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cGloballyAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cGloballyKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAfterAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAfterKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cLowerBoundAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLowerBoundStreamEventParserRuleCall_1_2_0 = (RuleCall)cLowerBoundAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBeforeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cBeforeKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cUpperBoundAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cUpperBoundStreamEventParserRuleCall_2_2_0 = (RuleCall)cUpperBoundAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBetweenAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cBetweenKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cLowerBoundAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cLowerBoundStreamEventParserRuleCall_3_2_0 = (RuleCall)cLowerBoundAssignment_3_2.eContents().get(0);
		private final Keyword cAndKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cUpperBoundAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cUpperBoundStreamEventParserRuleCall_3_4_0 = (RuleCall)cUpperBoundAssignment_3_4.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cAfterUntilAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cAfterKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cLowerBoundAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cLowerBoundStreamEventParserRuleCall_4_2_0 = (RuleCall)cLowerBoundAssignment_4_2.eContents().get(0);
		private final Keyword cUntilKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cUpperBoundAssignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final RuleCall cUpperBoundStreamEventParserRuleCall_4_4_0 = (RuleCall)cUpperBoundAssignment_4_4.eContents().get(0);
		
		//Scope:
		//	{Globally} 'globally'? | {After} 'after' lowerBound=StreamEvent | {Before} 'before' upperBound=StreamEvent | {Between}
		//	'between' lowerBound=StreamEvent 'and' upperBound=StreamEvent | {AfterUntil} 'after' lowerBound=StreamEvent 'until'
		//	upperBound=StreamEvent;
		@Override public ParserRule getRule() { return rule; }
		
		//{Globally} 'globally'? | {After} 'after' lowerBound=StreamEvent | {Before} 'before' upperBound=StreamEvent | {Between}
		//'between' lowerBound=StreamEvent 'and' upperBound=StreamEvent | {AfterUntil} 'after' lowerBound=StreamEvent 'until'
		//upperBound=StreamEvent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Globally} 'globally'?
		public Group getGroup_0() { return cGroup_0; }
		
		//{Globally}
		public Action getGloballyAction_0_0() { return cGloballyAction_0_0; }
		
		//'globally'?
		public Keyword getGloballyKeyword_0_1() { return cGloballyKeyword_0_1; }
		
		//{After} 'after' lowerBound=StreamEvent
		public Group getGroup_1() { return cGroup_1; }
		
		//{After}
		public Action getAfterAction_1_0() { return cAfterAction_1_0; }
		
		//'after'
		public Keyword getAfterKeyword_1_1() { return cAfterKeyword_1_1; }
		
		//lowerBound=StreamEvent
		public Assignment getLowerBoundAssignment_1_2() { return cLowerBoundAssignment_1_2; }
		
		//StreamEvent
		public RuleCall getLowerBoundStreamEventParserRuleCall_1_2_0() { return cLowerBoundStreamEventParserRuleCall_1_2_0; }
		
		//{Before} 'before' upperBound=StreamEvent
		public Group getGroup_2() { return cGroup_2; }
		
		//{Before}
		public Action getBeforeAction_2_0() { return cBeforeAction_2_0; }
		
		//'before'
		public Keyword getBeforeKeyword_2_1() { return cBeforeKeyword_2_1; }
		
		//upperBound=StreamEvent
		public Assignment getUpperBoundAssignment_2_2() { return cUpperBoundAssignment_2_2; }
		
		//StreamEvent
		public RuleCall getUpperBoundStreamEventParserRuleCall_2_2_0() { return cUpperBoundStreamEventParserRuleCall_2_2_0; }
		
		//{Between} 'between' lowerBound=StreamEvent 'and' upperBound=StreamEvent
		public Group getGroup_3() { return cGroup_3; }
		
		//{Between}
		public Action getBetweenAction_3_0() { return cBetweenAction_3_0; }
		
		//'between'
		public Keyword getBetweenKeyword_3_1() { return cBetweenKeyword_3_1; }
		
		//lowerBound=StreamEvent
		public Assignment getLowerBoundAssignment_3_2() { return cLowerBoundAssignment_3_2; }
		
		//StreamEvent
		public RuleCall getLowerBoundStreamEventParserRuleCall_3_2_0() { return cLowerBoundStreamEventParserRuleCall_3_2_0; }
		
		//'and'
		public Keyword getAndKeyword_3_3() { return cAndKeyword_3_3; }
		
		//upperBound=StreamEvent
		public Assignment getUpperBoundAssignment_3_4() { return cUpperBoundAssignment_3_4; }
		
		//StreamEvent
		public RuleCall getUpperBoundStreamEventParserRuleCall_3_4_0() { return cUpperBoundStreamEventParserRuleCall_3_4_0; }
		
		//{AfterUntil} 'after' lowerBound=StreamEvent 'until' upperBound=StreamEvent
		public Group getGroup_4() { return cGroup_4; }
		
		//{AfterUntil}
		public Action getAfterUntilAction_4_0() { return cAfterUntilAction_4_0; }
		
		//'after'
		public Keyword getAfterKeyword_4_1() { return cAfterKeyword_4_1; }
		
		//lowerBound=StreamEvent
		public Assignment getLowerBoundAssignment_4_2() { return cLowerBoundAssignment_4_2; }
		
		//StreamEvent
		public RuleCall getLowerBoundStreamEventParserRuleCall_4_2_0() { return cLowerBoundStreamEventParserRuleCall_4_2_0; }
		
		//'until'
		public Keyword getUntilKeyword_4_3() { return cUntilKeyword_4_3; }
		
		//upperBound=StreamEvent
		public Assignment getUpperBoundAssignment_4_4() { return cUpperBoundAssignment_4_4; }
		
		//StreamEvent
		public RuleCall getUpperBoundStreamEventParserRuleCall_4_4_0() { return cUpperBoundStreamEventParserRuleCall_4_4_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNotifyAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cNotifyKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cAppendParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Action:
		//	{Notify} 'notify' | Append;
		@Override public ParserRule getRule() { return rule; }
		
		//{Notify} 'notify' | Append
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Notify} 'notify'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Notify}
		public Action getNotifyAction_0_0() { return cNotifyAction_0_0; }
		
		//'notify'
		public Keyword getNotifyKeyword_0_1() { return cNotifyKeyword_0_1; }
		
		//Append
		public RuleCall getAppendParserRuleCall_1() { return cAppendParserRuleCall_1; }
	}
	public class AppendElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.Append");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAppendKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAppenderAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAppenderAppenderParserRuleCall_1_0 = (RuleCall)cAppenderAssignment_1.eContents().get(0);
		
		//Append:
		//	'append' appender=Appender;
		@Override public ParserRule getRule() { return rule; }
		
		//'append' appender=Appender
		public Group getGroup() { return cGroup; }
		
		//'append'
		public Keyword getAppendKeyword_0() { return cAppendKeyword_0; }
		
		//appender=Appender
		public Assignment getAppenderAssignment_1() { return cAppenderAssignment_1; }
		
		//Appender
		public RuleCall getAppenderAppenderParserRuleCall_1_0() { return cAppenderAppenderParserRuleCall_1_0; }
	}
	public class AppenderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.Appender");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStreamAppenderParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFileAppenderParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConsoleAppenderParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Appender:
		//	StreamAppender | FileAppender | ConsoleAppender;
		@Override public ParserRule getRule() { return rule; }
		
		//StreamAppender | FileAppender | ConsoleAppender
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StreamAppender
		public RuleCall getStreamAppenderParserRuleCall_0() { return cStreamAppenderParserRuleCall_0; }
		
		//FileAppender
		public RuleCall getFileAppenderParserRuleCall_1() { return cFileAppenderParserRuleCall_1; }
		
		//ConsoleAppender
		public RuleCall getConsoleAppenderParserRuleCall_2() { return cConsoleAppenderParserRuleCall_2; }
	}
	public class StreamAppenderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.StreamAppender");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStreamKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEventAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cEventAlternatives_2_0 = (Alternatives)cEventAssignment_2.eContents().get(0);
		private final RuleCall cEventIDTerminalRuleCall_2_0_0 = (RuleCall)cEventAlternatives_2_0.eContents().get(0);
		private final RuleCall cEventSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cEventAlternatives_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuesLanguageExpressionParserRuleCall_3_1_0 = (RuleCall)cValuesAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cValuesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cValuesLanguageExpressionParserRuleCall_3_2_1_0 = (RuleCall)cValuesAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StreamAppender:
		//	'stream' '(' event=(ID | STRING) ('[' values+=LanguageExpression (',' values+=LanguageExpression)* ']')? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'stream' '(' event=(ID | STRING) ('[' values+=LanguageExpression (',' values+=LanguageExpression)* ']')? ')'
		public Group getGroup() { return cGroup; }
		
		//'stream'
		public Keyword getStreamKeyword_0() { return cStreamKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//event=(ID | STRING)
		public Assignment getEventAssignment_2() { return cEventAssignment_2; }
		
		//(ID | STRING)
		public Alternatives getEventAlternatives_2_0() { return cEventAlternatives_2_0; }
		
		//ID
		public RuleCall getEventIDTerminalRuleCall_2_0_0() { return cEventIDTerminalRuleCall_2_0_0; }
		
		//STRING
		public RuleCall getEventSTRINGTerminalRuleCall_2_0_1() { return cEventSTRINGTerminalRuleCall_2_0_1; }
		
		//('[' values+=LanguageExpression (',' values+=LanguageExpression)* ']')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }
		
		//values+=LanguageExpression
		public Assignment getValuesAssignment_3_1() { return cValuesAssignment_3_1; }
		
		//LanguageExpression
		public RuleCall getValuesLanguageExpressionParserRuleCall_3_1_0() { return cValuesLanguageExpressionParserRuleCall_3_1_0; }
		
		//(',' values+=LanguageExpression)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//values+=LanguageExpression
		public Assignment getValuesAssignment_3_2_1() { return cValuesAssignment_3_2_1; }
		
		//LanguageExpression
		public RuleCall getValuesLanguageExpressionParserRuleCall_3_2_1_0() { return cValuesLanguageExpressionParserRuleCall_3_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_3() { return cRightSquareBracketKeyword_3_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class FileAppenderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.FileAppender");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFilenameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFilenameSTRINGTerminalRuleCall_2_0 = (RuleCall)cFilenameAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLayoutAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLayoutLayoutParserRuleCall_4_0 = (RuleCall)cLayoutAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//FileAppender:
		//	'file' '(' filename=STRING ',' layout=Layout ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'file' '(' filename=STRING ',' layout=Layout ')'
		public Group getGroup() { return cGroup; }
		
		//'file'
		public Keyword getFileKeyword_0() { return cFileKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//filename=STRING
		public Assignment getFilenameAssignment_2() { return cFilenameAssignment_2; }
		
		//STRING
		public RuleCall getFilenameSTRINGTerminalRuleCall_2_0() { return cFilenameSTRINGTerminalRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//layout=Layout
		public Assignment getLayoutAssignment_4() { return cLayoutAssignment_4; }
		
		//Layout
		public RuleCall getLayoutLayoutParserRuleCall_4_0() { return cLayoutLayoutParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ConsoleAppenderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.ConsoleAppender");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConsoleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLayoutAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLayoutLayoutParserRuleCall_2_0 = (RuleCall)cLayoutAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ConsoleAppender:
		//	'console' '(' layout=Layout ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'console' '(' layout=Layout ')'
		public Group getGroup() { return cGroup; }
		
		//'console'
		public Keyword getConsoleKeyword_0() { return cConsoleKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//layout=Layout
		public Assignment getLayoutAssignment_2() { return cLayoutAssignment_2; }
		
		//Layout
		public RuleCall getLayoutLayoutParserRuleCall_2_0() { return cLayoutLayoutParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class LayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.Layout");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringLayoutParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExternalLayoutParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Layout:
		//	StringLayout | ExternalLayout;
		@Override public ParserRule getRule() { return rule; }
		
		//StringLayout | ExternalLayout
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringLayout
		public RuleCall getStringLayoutParserRuleCall_0() { return cStringLayoutParserRuleCall_0; }
		
		//ExternalLayout
		public RuleCall getExternalLayoutParserRuleCall_1() { return cExternalLayoutParserRuleCall_1; }
	}
	public class StringLayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.StringLayout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFormatStringAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFormatStringSTRINGTerminalRuleCall_0_0 = (RuleCall)cFormatStringAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValuesLanguageExpressionParserRuleCall_1_1_0 = (RuleCall)cValuesAssignment_1_1.eContents().get(0);
		
		//StringLayout:
		//	formatString=STRING (',' values+=LanguageExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//formatString=STRING (',' values+=LanguageExpression)*
		public Group getGroup() { return cGroup; }
		
		//formatString=STRING
		public Assignment getFormatStringAssignment_0() { return cFormatStringAssignment_0; }
		
		//STRING
		public RuleCall getFormatStringSTRINGTerminalRuleCall_0_0() { return cFormatStringSTRINGTerminalRuleCall_0_0; }
		
		//(',' values+=LanguageExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//values+=LanguageExpression
		public Assignment getValuesAssignment_1_1() { return cValuesAssignment_1_1; }
		
		//LanguageExpression
		public RuleCall getValuesLanguageExpressionParserRuleCall_1_1_0() { return cValuesLanguageExpressionParserRuleCall_1_1_0; }
	}
	public class ExternalLayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.ExternalLayout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPathAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPathFQNParserRuleCall_0_0 = (RuleCall)cPathAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValuesLanguageExpressionParserRuleCall_1_1_0 = (RuleCall)cValuesAssignment_1_1.eContents().get(0);
		
		//ExternalLayout:
		//	path=FQN (',' values+=LanguageExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//path=FQN (',' values+=LanguageExpression)*
		public Group getGroup() { return cGroup; }
		
		//path=FQN
		public Assignment getPathAssignment_0() { return cPathAssignment_0; }
		
		//FQN
		public RuleCall getPathFQNParserRuleCall_0_0() { return cPathFQNParserRuleCall_0_0; }
		
		//(',' values+=LanguageExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//values+=LanguageExpression
		public Assignment getValuesAssignment_1_1() { return cValuesAssignment_1_1; }
		
		//LanguageExpression
		public RuleCall getValuesLanguageExpressionParserRuleCall_1_1_0() { return cValuesLanguageExpressionParserRuleCall_1_1_0; }
	}
	public class StreamEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.StreamEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cEventIdAlternatives_0_0 = (Alternatives)cEventIdAssignment_0.eContents().get(0);
		private final RuleCall cEventIdIDTerminalRuleCall_0_0_0 = (RuleCall)cEventIdAlternatives_0_0.eContents().get(0);
		private final RuleCall cEventIdSTRINGTerminalRuleCall_0_0_1 = (RuleCall)cEventIdAlternatives_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValuesEmptyOrPropertyValueParserRuleCall_1_1_0 = (RuleCall)cValuesAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cValuesAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cValuesEmptyOrPropertyValueParserRuleCall_1_2_1_0 = (RuleCall)cValuesAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//StreamEvent:
		//	eventId=(ID | STRING) ('[' values+=EmptyOrPropertyValue (',' values+=EmptyOrPropertyValue)* ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//eventId=(ID | STRING) ('[' values+=EmptyOrPropertyValue (',' values+=EmptyOrPropertyValue)* ']')?
		public Group getGroup() { return cGroup; }
		
		//eventId=(ID | STRING)
		public Assignment getEventIdAssignment_0() { return cEventIdAssignment_0; }
		
		//(ID | STRING)
		public Alternatives getEventIdAlternatives_0_0() { return cEventIdAlternatives_0_0; }
		
		//ID
		public RuleCall getEventIdIDTerminalRuleCall_0_0_0() { return cEventIdIDTerminalRuleCall_0_0_0; }
		
		//STRING
		public RuleCall getEventIdSTRINGTerminalRuleCall_0_0_1() { return cEventIdSTRINGTerminalRuleCall_0_0_1; }
		
		//('[' values+=EmptyOrPropertyValue (',' values+=EmptyOrPropertyValue)* ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//values+=EmptyOrPropertyValue
		public Assignment getValuesAssignment_1_1() { return cValuesAssignment_1_1; }
		
		//EmptyOrPropertyValue
		public RuleCall getValuesEmptyOrPropertyValueParserRuleCall_1_1_0() { return cValuesEmptyOrPropertyValueParserRuleCall_1_1_0; }
		
		//(',' values+=EmptyOrPropertyValue)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//values+=EmptyOrPropertyValue
		public Assignment getValuesAssignment_1_2_1() { return cValuesAssignment_1_2_1; }
		
		//EmptyOrPropertyValue
		public RuleCall getValuesEmptyOrPropertyValueParserRuleCall_1_2_1_0() { return cValuesEmptyOrPropertyValueParserRuleCall_1_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}
	public class EmptyOrPropertyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.EmptyOrPropertyValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Action cEmptyAction_0 = (Action)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cPropertyValueAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cIdAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_1_0 = (RuleCall)cIdAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cEqualsSignKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cValueAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cValueLanguageExpressionParserRuleCall_1_2_1_0 = (RuleCall)cValueAssignment_1_2_1.eContents().get(0);
		
		//EmptyOrPropertyValue:
		//	{Empty} | {PropertyValue} id=ID ('=' value=LanguageExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Empty} | {PropertyValue} id=ID ('=' value=LanguageExpression)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Empty}
		public Action getEmptyAction_0() { return cEmptyAction_0; }
		
		//{PropertyValue} id=ID ('=' value=LanguageExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{PropertyValue}
		public Action getPropertyValueAction_1_0() { return cPropertyValueAction_1_0; }
		
		//id=ID
		public Assignment getIdAssignment_1_1() { return cIdAssignment_1_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_1_0() { return cIdIDTerminalRuleCall_1_1_0; }
		
		//('=' value=LanguageExpression)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_2_0() { return cEqualsSignKeyword_1_2_0; }
		
		//value=LanguageExpression
		public Assignment getValueAssignment_1_2_1() { return cValueAssignment_1_2_1; }
		
		//LanguageExpression
		public RuleCall getValueLanguageExpressionParserRuleCall_1_2_1_0() { return cValueLanguageExpressionParserRuleCall_1_2_1_0; }
	}
	public class LanguageExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.LanguageExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExplicitLanguageExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cLanguageIdAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cLanguageIdAlternatives_0_1_0 = (Alternatives)cLanguageIdAssignment_0_1.eContents().get(0);
		private final RuleCall cLanguageIdIDTerminalRuleCall_0_1_0_0 = (RuleCall)cLanguageIdAlternatives_0_1_0.eContents().get(0);
		private final RuleCall cLanguageIdSTRINGTerminalRuleCall_0_1_0_1 = (RuleCall)cLanguageIdAlternatives_0_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cExpressionAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cExpressionSTRINGTerminalRuleCall_0_3_0 = (RuleCall)cExpressionAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cDefaultLanguageExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		
		//LanguageExpression:
		//	{ExplicitLanguageExpression} languageId=(ID | STRING) '(' expression=STRING ')' | {DefaultLanguageExpression}
		//	expression=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExplicitLanguageExpression} languageId=(ID | STRING) '(' expression=STRING ')' | {DefaultLanguageExpression}
		//expression=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ExplicitLanguageExpression} languageId=(ID | STRING) '(' expression=STRING ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{ExplicitLanguageExpression}
		public Action getExplicitLanguageExpressionAction_0_0() { return cExplicitLanguageExpressionAction_0_0; }
		
		//languageId=(ID | STRING)
		public Assignment getLanguageIdAssignment_0_1() { return cLanguageIdAssignment_0_1; }
		
		//(ID | STRING)
		public Alternatives getLanguageIdAlternatives_0_1_0() { return cLanguageIdAlternatives_0_1_0; }
		
		//ID
		public RuleCall getLanguageIdIDTerminalRuleCall_0_1_0_0() { return cLanguageIdIDTerminalRuleCall_0_1_0_0; }
		
		//STRING
		public RuleCall getLanguageIdSTRINGTerminalRuleCall_0_1_0_1() { return cLanguageIdSTRINGTerminalRuleCall_0_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }
		
		//expression=STRING
		public Assignment getExpressionAssignment_0_3() { return cExpressionAssignment_0_3; }
		
		//STRING
		public RuleCall getExpressionSTRINGTerminalRuleCall_0_3_0() { return cExpressionSTRINGTerminalRuleCall_0_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//{DefaultLanguageExpression} expression=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//{DefaultLanguageExpression}
		public Action getDefaultLanguageExpressionAction_1_0() { return cDefaultLanguageExpressionAction_1_0; }
		
		//expression=STRING
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }
		
		//STRING
		public RuleCall getExpressionSTRINGTerminalRuleCall_1_1_0() { return cExpressionSTRINGTerminalRuleCall_1_1_0; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	public class LogLevelElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.LogLevel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cConfigEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cConfigCONFIGKeyword_0_0 = (Keyword)cConfigEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFineEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFineFINEKeyword_1_0 = (Keyword)cFineEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFinerEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFinerFINERKeyword_2_0 = (Keyword)cFinerEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFinestEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFinestFINESTKeyword_3_0 = (Keyword)cFinestEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cInfoEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cInfoINFOKeyword_4_0 = (Keyword)cInfoEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSevereEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSevereSEVEREKeyword_5_0 = (Keyword)cSevereEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cWarningEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cWarningWARNINGKeyword_6_0 = (Keyword)cWarningEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum LogLevel:
		//	config='CONFIG' | fine='FINE' | finer='FINER' | finest='FINEST' |
		//	info='INFO' | severe='SEVERE' | warning='WARNING';
		public EnumRule getRule() { return rule; }
		
		//config='CONFIG' | fine='FINE' | finer='FINER' | finest='FINEST' | info='INFO' | severe='SEVERE' | warning='WARNING'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//config='CONFIG'
		public EnumLiteralDeclaration getConfigEnumLiteralDeclaration_0() { return cConfigEnumLiteralDeclaration_0; }
		
		//'CONFIG'
		public Keyword getConfigCONFIGKeyword_0_0() { return cConfigCONFIGKeyword_0_0; }
		
		//fine='FINE'
		public EnumLiteralDeclaration getFineEnumLiteralDeclaration_1() { return cFineEnumLiteralDeclaration_1; }
		
		//'FINE'
		public Keyword getFineFINEKeyword_1_0() { return cFineFINEKeyword_1_0; }
		
		//finer='FINER'
		public EnumLiteralDeclaration getFinerEnumLiteralDeclaration_2() { return cFinerEnumLiteralDeclaration_2; }
		
		//'FINER'
		public Keyword getFinerFINERKeyword_2_0() { return cFinerFINERKeyword_2_0; }
		
		//finest='FINEST'
		public EnumLiteralDeclaration getFinestEnumLiteralDeclaration_3() { return cFinestEnumLiteralDeclaration_3; }
		
		//'FINEST'
		public Keyword getFinestFINESTKeyword_3_0() { return cFinestFINESTKeyword_3_0; }
		
		//info='INFO'
		public EnumLiteralDeclaration getInfoEnumLiteralDeclaration_4() { return cInfoEnumLiteralDeclaration_4; }
		
		//'INFO'
		public Keyword getInfoINFOKeyword_4_0() { return cInfoINFOKeyword_4_0; }
		
		//severe='SEVERE'
		public EnumLiteralDeclaration getSevereEnumLiteralDeclaration_5() { return cSevereEnumLiteralDeclaration_5; }
		
		//'SEVERE'
		public Keyword getSevereSEVEREKeyword_5_0() { return cSevereSEVEREKeyword_5_0; }
		
		//warning='WARNING'
		public EnumLiteralDeclaration getWarningEnumLiteralDeclaration_6() { return cWarningEnumLiteralDeclaration_6; }
		
		//'WARNING'
		public Keyword getWarningWARNINGKeyword_6_0() { return cWarningWARNINGKeyword_6_0; }
	}
	public class TemporalPropertyConditionKindElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.TemporalPropertyConditionKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSSKeyword_0_0 = (Keyword)cSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVVKeyword_1_0 = (Keyword)cVEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNSNSKeyword_2_0 = (Keyword)cNSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNVEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNVNVKeyword_3_0 = (Keyword)cNVEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum TemporalPropertyConditionKind:
		//	s='S' | v='V' | nS | nV;
		public EnumRule getRule() { return rule; }
		
		//s='S' | v='V' | nS | nV
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//s='S'
		public EnumLiteralDeclaration getSEnumLiteralDeclaration_0() { return cSEnumLiteralDeclaration_0; }
		
		//'S'
		public Keyword getSSKeyword_0_0() { return cSSKeyword_0_0; }
		
		//v='V'
		public EnumLiteralDeclaration getVEnumLiteralDeclaration_1() { return cVEnumLiteralDeclaration_1; }
		
		//'V'
		public Keyword getVVKeyword_1_0() { return cVVKeyword_1_0; }
		
		//nS
		public EnumLiteralDeclaration getNSEnumLiteralDeclaration_2() { return cNSEnumLiteralDeclaration_2; }
		
		//'nS'
		public Keyword getNSNSKeyword_2_0() { return cNSNSKeyword_2_0; }
		
		//nV
		public EnumLiteralDeclaration getNVEnumLiteralDeclaration_3() { return cNVEnumLiteralDeclaration_3; }
		
		//'nV'
		public Keyword getNVNVKeyword_3_0() { return cNVNVKeyword_3_0; }
	}
	
	private final ModelElements pModel;
	private final MoniLogSpecElements pMoniLogSpec;
	private final LogLevelElements eLogLevel;
	private final EventElements pEvent;
	private final BeforeEventElements pBeforeEvent;
	private final AfterEventElements pAfterEvent;
	private final BeforeAfterEventElements pBeforeAfterEvent;
	private final ConditionElements pCondition;
	private final TemporalPatternElements pTemporalPattern;
	private final PatternElements pPattern;
	private final BoundTypeElements pBoundType;
	private final ExactBoundElements pExactBound;
	private final LowerBoundElements pLowerBound;
	private final UpperBoundElements pUpperBound;
	private final ScopeElements pScope;
	private final TemporalPropertyConditionKindElements eTemporalPropertyConditionKind;
	private final ActionElements pAction;
	private final AppendElements pAppend;
	private final AppenderElements pAppender;
	private final StreamAppenderElements pStreamAppender;
	private final FileAppenderElements pFileAppender;
	private final ConsoleAppenderElements pConsoleAppender;
	private final LayoutElements pLayout;
	private final StringLayoutElements pStringLayout;
	private final ExternalLayoutElements pExternalLayout;
	private final StreamEventElements pStreamEvent;
	private final EmptyOrPropertyValueElements pEmptyOrPropertyValue;
	private final LanguageExpressionElements pLanguageExpression;
	private final FQNElements pFQN;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MoniLog4DSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pMoniLogSpec = new MoniLogSpecElements();
		this.eLogLevel = new LogLevelElements();
		this.pEvent = new EventElements();
		this.pBeforeEvent = new BeforeEventElements();
		this.pAfterEvent = new AfterEventElements();
		this.pBeforeAfterEvent = new BeforeAfterEventElements();
		this.pCondition = new ConditionElements();
		this.pTemporalPattern = new TemporalPatternElements();
		this.pPattern = new PatternElements();
		this.pBoundType = new BoundTypeElements();
		this.pExactBound = new ExactBoundElements();
		this.pLowerBound = new LowerBoundElements();
		this.pUpperBound = new UpperBoundElements();
		this.pScope = new ScopeElements();
		this.eTemporalPropertyConditionKind = new TemporalPropertyConditionKindElements();
		this.pAction = new ActionElements();
		this.pAppend = new AppendElements();
		this.pAppender = new AppenderElements();
		this.pStreamAppender = new StreamAppenderElements();
		this.pFileAppender = new FileAppenderElements();
		this.pConsoleAppender = new ConsoleAppenderElements();
		this.pLayout = new LayoutElements();
		this.pStringLayout = new StringLayoutElements();
		this.pExternalLayout = new ExternalLayoutElements();
		this.pStreamEvent = new StreamEventElements();
		this.pEmptyOrPropertyValue = new EmptyOrPropertyValueElements();
		this.pLanguageExpression = new LanguageExpressionElements();
		this.pFQN = new FQNElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.gemoc.monilog.MoniLog4DSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	('default-language' defaultLanguageID=(ID | STRING))?
	//	moniLogSpecs+=MoniLogSpec+;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//MoniLogSpec:
	//	'monilog' name=STRING? ('[' level=LogLevel ']')? '{' ('events' '{' events+=Event (',' events+=Event)* '}')?
	//	('conditions' '{' conditions+=Condition (',' conditions+=Condition)* '}')?
	//	'actions' '{' actions+=Action (',' actions+=Action)* '}'
	//	'}';
	public MoniLogSpecElements getMoniLogSpecAccess() {
		return pMoniLogSpec;
	}
	
	public ParserRule getMoniLogSpecRule() {
		return getMoniLogSpecAccess().getRule();
	}
	
	//enum LogLevel:
	//	config='CONFIG' | fine='FINE' | finer='FINER' | finest='FINEST' |
	//	info='INFO' | severe='SEVERE' | warning='WARNING';
	public LogLevelElements getLogLevelAccess() {
		return eLogLevel;
	}
	
	public EnumRule getLogLevelRule() {
		return getLogLevelAccess().getRule();
	}
	
	//Event:
	//	BeforeEvent | AfterEvent | BeforeAfterEvent;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//BeforeEvent:
	//	'before' ruleID=(ID | STRING) (('frequency^' frequency=INT)? & ('limit' limit=INT)?);
	public BeforeEventElements getBeforeEventAccess() {
		return pBeforeEvent;
	}
	
	public ParserRule getBeforeEventRule() {
		return getBeforeEventAccess().getRule();
	}
	
	//AfterEvent:
	//	'after' ruleID=(ID | STRING) (('frequency' frequency=INT)? & ('limit' limit=INT)?);
	public AfterEventElements getAfterEventAccess() {
		return pAfterEvent;
	}
	
	public ParserRule getAfterEventRule() {
		return getAfterEventAccess().getRule();
	}
	
	//BeforeAfterEvent:
	//	ruleID=(ID | STRING) (('frequency' frequency=INT)? & ('limit' limit=INT)?);
	public BeforeAfterEventElements getBeforeAfterEventAccess() {
		return pBeforeAfterEvent;
	}
	
	public ParserRule getBeforeAfterEventRule() {
		return getBeforeAfterEventAccess().getRule();
	}
	
	//Condition:
	//	{TemporalPropertyCondition} 'stream' '(' pattern=TemporalPattern (',' kind=TemporalPropertyConditionKind)? ')' |
	//	{LanguageExpressionCondition} expression=LanguageExpression;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//TemporalPattern:
	//	pattern=Pattern scope=Scope;
	public TemporalPatternElements getTemporalPatternAccess() {
		return pTemporalPattern;
	}
	
	public ParserRule getTemporalPatternRule() {
		return getTemporalPatternAccess().getRule();
	}
	
	//Pattern:
	//	{Universality} 'always' event=StreamEvent | {Existence} 'exists' bound=BoundType event=StreamEvent | {Absence} 'never'
	//	event=StreamEvent | {Precedence} predecessor=StreamEvent 'precedes' successor=StreamEvent | {Response}
	//	event=StreamEvent 'respondsTo' trigger=StreamEvent;
	public PatternElements getPatternAccess() {
		return pPattern;
	}
	
	public ParserRule getPatternRule() {
		return getPatternAccess().getRule();
	}
	
	//BoundType:
	//	ExactBound | LowerBound | UpperBound;
	public BoundTypeElements getBoundTypeAccess() {
		return pBoundType;
	}
	
	public ParserRule getBoundTypeRule() {
		return getBoundTypeAccess().getRule();
	}
	
	//ExactBound:
	//	n=INT;
	public ExactBoundElements getExactBoundAccess() {
		return pExactBound;
	}
	
	public ParserRule getExactBoundRule() {
		return getExactBoundAccess().getRule();
	}
	
	//LowerBound:
	//	'atleast' n=INT;
	public LowerBoundElements getLowerBoundAccess() {
		return pLowerBound;
	}
	
	public ParserRule getLowerBoundRule() {
		return getLowerBoundAccess().getRule();
	}
	
	//UpperBound:
	//	'atmost' n=INT;
	public UpperBoundElements getUpperBoundAccess() {
		return pUpperBound;
	}
	
	public ParserRule getUpperBoundRule() {
		return getUpperBoundAccess().getRule();
	}
	
	//Scope:
	//	{Globally} 'globally'? | {After} 'after' lowerBound=StreamEvent | {Before} 'before' upperBound=StreamEvent | {Between}
	//	'between' lowerBound=StreamEvent 'and' upperBound=StreamEvent | {AfterUntil} 'after' lowerBound=StreamEvent 'until'
	//	upperBound=StreamEvent;
	public ScopeElements getScopeAccess() {
		return pScope;
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}
	
	//enum TemporalPropertyConditionKind:
	//	s='S' | v='V' | nS | nV;
	public TemporalPropertyConditionKindElements getTemporalPropertyConditionKindAccess() {
		return eTemporalPropertyConditionKind;
	}
	
	public EnumRule getTemporalPropertyConditionKindRule() {
		return getTemporalPropertyConditionKindAccess().getRule();
	}
	
	//Action:
	//	{Notify} 'notify' | Append;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Append:
	//	'append' appender=Appender;
	public AppendElements getAppendAccess() {
		return pAppend;
	}
	
	public ParserRule getAppendRule() {
		return getAppendAccess().getRule();
	}
	
	//Appender:
	//	StreamAppender | FileAppender | ConsoleAppender;
	public AppenderElements getAppenderAccess() {
		return pAppender;
	}
	
	public ParserRule getAppenderRule() {
		return getAppenderAccess().getRule();
	}
	
	//StreamAppender:
	//	'stream' '(' event=(ID | STRING) ('[' values+=LanguageExpression (',' values+=LanguageExpression)* ']')? ')';
	public StreamAppenderElements getStreamAppenderAccess() {
		return pStreamAppender;
	}
	
	public ParserRule getStreamAppenderRule() {
		return getStreamAppenderAccess().getRule();
	}
	
	//FileAppender:
	//	'file' '(' filename=STRING ',' layout=Layout ')';
	public FileAppenderElements getFileAppenderAccess() {
		return pFileAppender;
	}
	
	public ParserRule getFileAppenderRule() {
		return getFileAppenderAccess().getRule();
	}
	
	//ConsoleAppender:
	//	'console' '(' layout=Layout ')';
	public ConsoleAppenderElements getConsoleAppenderAccess() {
		return pConsoleAppender;
	}
	
	public ParserRule getConsoleAppenderRule() {
		return getConsoleAppenderAccess().getRule();
	}
	
	//Layout:
	//	StringLayout | ExternalLayout;
	public LayoutElements getLayoutAccess() {
		return pLayout;
	}
	
	public ParserRule getLayoutRule() {
		return getLayoutAccess().getRule();
	}
	
	//StringLayout:
	//	formatString=STRING (',' values+=LanguageExpression)*;
	public StringLayoutElements getStringLayoutAccess() {
		return pStringLayout;
	}
	
	public ParserRule getStringLayoutRule() {
		return getStringLayoutAccess().getRule();
	}
	
	//ExternalLayout:
	//	path=FQN (',' values+=LanguageExpression)*;
	public ExternalLayoutElements getExternalLayoutAccess() {
		return pExternalLayout;
	}
	
	public ParserRule getExternalLayoutRule() {
		return getExternalLayoutAccess().getRule();
	}
	
	//StreamEvent:
	//	eventId=(ID | STRING) ('[' values+=EmptyOrPropertyValue (',' values+=EmptyOrPropertyValue)* ']')?;
	public StreamEventElements getStreamEventAccess() {
		return pStreamEvent;
	}
	
	public ParserRule getStreamEventRule() {
		return getStreamEventAccess().getRule();
	}
	
	//EmptyOrPropertyValue:
	//	{Empty} | {PropertyValue} id=ID ('=' value=LanguageExpression)?;
	public EmptyOrPropertyValueElements getEmptyOrPropertyValueAccess() {
		return pEmptyOrPropertyValue;
	}
	
	public ParserRule getEmptyOrPropertyValueRule() {
		return getEmptyOrPropertyValueAccess().getRule();
	}
	
	//LanguageExpression:
	//	{ExplicitLanguageExpression} languageId=(ID | STRING) '(' expression=STRING ')' | {DefaultLanguageExpression}
	//	expression=STRING;
	public LanguageExpressionElements getLanguageExpressionAccess() {
		return pLanguageExpression;
	}
	
	public ParserRule getLanguageExpressionRule() {
		return getLanguageExpressionAccess().getRule();
	}
	
	//FQN:
	//	ID ('.' ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
