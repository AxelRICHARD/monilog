/*
 * generated by Xtext 2.22.0
 */
package org.gemoc.monilog.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MoniLog4DSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class DocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.Document");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cDefaultLanguageKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cDefaultLanguageIDAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cDefaultLanguageIDAlternatives_0_1_0 = (Alternatives)cDefaultLanguageIDAssignment_0_1.eContents().get(0);
		private final RuleCall cDefaultLanguageIDIDTerminalRuleCall_0_1_0_0 = (RuleCall)cDefaultLanguageIDAlternatives_0_1_0.eContents().get(0);
		private final RuleCall cDefaultLanguageIDSTRINGTerminalRuleCall_0_1_0_1 = (RuleCall)cDefaultLanguageIDAlternatives_0_1_0.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Assignment cEventsAssignment_1_0 = (Assignment)cUnorderedGroup_1.eContents().get(0);
		private final RuleCall cEventsEventParserRuleCall_1_0_0 = (RuleCall)cEventsAssignment_1_0.eContents().get(0);
		private final Assignment cAppendersAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final RuleCall cAppendersAppenderParserRuleCall_1_1_0 = (RuleCall)cAppendersAssignment_1_1.eContents().get(0);
		private final Assignment cLayoutsAssignment_1_2 = (Assignment)cUnorderedGroup_1.eContents().get(2);
		private final RuleCall cLayoutsLayoutParserRuleCall_1_2_0 = (RuleCall)cLayoutsAssignment_1_2.eContents().get(0);
		private final Assignment cMoniLogSpecsAssignment_1_3 = (Assignment)cUnorderedGroup_1.eContents().get(3);
		private final RuleCall cMoniLogSpecsMoniLoggerParserRuleCall_1_3_0 = (RuleCall)cMoniLogSpecsAssignment_1_3.eContents().get(0);
		
		//Document:
		//	('default-language' defaultLanguageID=(ID | STRING))? (events+=Event* & appenders+=Appender* & layouts+=Layout* &
		//	moniLogSpecs+=MoniLogger*);
		@Override public ParserRule getRule() { return rule; }
		
		//('default-language' defaultLanguageID=(ID | STRING))? (events+=Event* & appenders+=Appender* & layouts+=Layout* &
		//moniLogSpecs+=MoniLogger*)
		public Group getGroup() { return cGroup; }
		
		//('default-language' defaultLanguageID=(ID | STRING))?
		public Group getGroup_0() { return cGroup_0; }
		
		//'default-language'
		public Keyword getDefaultLanguageKeyword_0_0() { return cDefaultLanguageKeyword_0_0; }
		
		//defaultLanguageID=(ID | STRING)
		public Assignment getDefaultLanguageIDAssignment_0_1() { return cDefaultLanguageIDAssignment_0_1; }
		
		//(ID | STRING)
		public Alternatives getDefaultLanguageIDAlternatives_0_1_0() { return cDefaultLanguageIDAlternatives_0_1_0; }
		
		//ID
		public RuleCall getDefaultLanguageIDIDTerminalRuleCall_0_1_0_0() { return cDefaultLanguageIDIDTerminalRuleCall_0_1_0_0; }
		
		//STRING
		public RuleCall getDefaultLanguageIDSTRINGTerminalRuleCall_0_1_0_1() { return cDefaultLanguageIDSTRINGTerminalRuleCall_0_1_0_1; }
		
		//(events+=Event* & appenders+=Appender* & layouts+=Layout* & moniLogSpecs+=MoniLogger*)
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }
		
		//events+=Event*
		public Assignment getEventsAssignment_1_0() { return cEventsAssignment_1_0; }
		
		//Event
		public RuleCall getEventsEventParserRuleCall_1_0_0() { return cEventsEventParserRuleCall_1_0_0; }
		
		//appenders+=Appender*
		public Assignment getAppendersAssignment_1_1() { return cAppendersAssignment_1_1; }
		
		//Appender
		public RuleCall getAppendersAppenderParserRuleCall_1_1_0() { return cAppendersAppenderParserRuleCall_1_1_0; }
		
		//layouts+=Layout*
		public Assignment getLayoutsAssignment_1_2() { return cLayoutsAssignment_1_2; }
		
		//Layout
		public RuleCall getLayoutsLayoutParserRuleCall_1_2_0() { return cLayoutsLayoutParserRuleCall_1_2_0; }
		
		//moniLogSpecs+=MoniLogger*
		public Assignment getMoniLogSpecsAssignment_1_3() { return cMoniLogSpecsAssignment_1_3; }
		
		//MoniLogger
		public RuleCall getMoniLogSpecsMoniLoggerParserRuleCall_1_3_0() { return cMoniLogSpecsMoniLoggerParserRuleCall_1_3_0; }
	}
	public class AppenderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.Appender");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLocalAppenderParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExternalAppenderParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//@Exported
		//Appender:
		//	LocalAppender | ExternalAppender;
		@Override public ParserRule getRule() { return rule; }
		
		//LocalAppender | ExternalAppender
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LocalAppender
		public RuleCall getLocalAppenderParserRuleCall_0() { return cLocalAppenderParserRuleCall_0; }
		
		//ExternalAppender
		public RuleCall getExternalAppenderParserRuleCall_1() { return cExternalAppenderParserRuleCall_1; }
	}
	public class LocalAppenderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.LocalAppender");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAppenderAnnotationEnumRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cAppenderKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_3_1_0 = (RuleCall)cParametersAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cParametersAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_3_2_1_0 = (RuleCall)cParametersAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCallsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCallsAppenderCallParserRuleCall_5_0 = (RuleCall)cCallsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cCallsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cCallsAppenderCallParserRuleCall_6_1_0 = (RuleCall)cCallsAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//LocalAppender:
		//	annotations+=AppenderAnnotation*
		//	'appender' name=ID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')? '{'
		//	calls+=AppenderCall (';' calls+=AppenderCall)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=AppenderAnnotation* 'appender' name=ID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')? '{'
		//calls+=AppenderCall (';' calls+=AppenderCall)* '}'
		public Group getGroup() { return cGroup; }
		
		//annotations+=AppenderAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//AppenderAnnotation
		public RuleCall getAnnotationsAppenderAnnotationEnumRuleCall_0_0() { return cAnnotationsAppenderAnnotationEnumRuleCall_0_0; }
		
		//'appender'
		public Keyword getAppenderKeyword_1() { return cAppenderKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('(' parameters+=Parameter (',' parameters+=Parameter)* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_3_1() { return cParametersAssignment_3_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_1_0() { return cParametersParameterParserRuleCall_3_1_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_3_2_1() { return cParametersAssignment_3_2_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_2_1_0() { return cParametersParameterParserRuleCall_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//calls+=AppenderCall
		public Assignment getCallsAssignment_5() { return cCallsAssignment_5; }
		
		//AppenderCall
		public RuleCall getCallsAppenderCallParserRuleCall_5_0() { return cCallsAppenderCallParserRuleCall_5_0; }
		
		//(';' calls+=AppenderCall)*
		public Group getGroup_6() { return cGroup_6; }
		
		//';'
		public Keyword getSemicolonKeyword_6_0() { return cSemicolonKeyword_6_0; }
		
		//calls+=AppenderCall
		public Assignment getCallsAssignment_6_1() { return cCallsAssignment_6_1; }
		
		//AppenderCall
		public RuleCall getCallsAppenderCallParserRuleCall_6_1_0() { return cCallsAppenderCallParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ExternalAppenderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.ExternalAppender");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAppenderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFQNParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_2_1_0 = (RuleCall)cParametersAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//ExternalAppender:
		//	'appender' name=FQN ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'appender' name=FQN ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')?
		public Group getGroup() { return cGroup; }
		
		//'appender'
		public Keyword getAppenderKeyword_0() { return cAppenderKeyword_0; }
		
		//name=FQN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//FQN
		public RuleCall getNameFQNParserRuleCall_1_0() { return cNameFQNParserRuleCall_1_0; }
		
		//('(' parameters+=Parameter (',' parameters+=Parameter)* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_1_0() { return cParametersParameterParserRuleCall_2_1_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_2_2_1() { return cParametersAssignment_2_2_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_2_1_0() { return cParametersParameterParserRuleCall_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}
	public class LayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.Layout");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLocalLayoutParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExternalLayoutParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Layout:
		//	LocalLayout | ExternalLayout;
		@Override public ParserRule getRule() { return rule; }
		
		//LocalLayout | ExternalLayout
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LocalLayout
		public RuleCall getLocalLayoutParserRuleCall_0() { return cLocalLayoutParserRuleCall_0; }
		
		//ExternalLayout
		public RuleCall getExternalLayoutParserRuleCall_1() { return cExternalLayoutParserRuleCall_1; }
	}
	public class LocalLayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.LocalLayout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLayoutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_2_1_0 = (RuleCall)cParametersAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCallAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCallLayoutCallParserRuleCall_4_0 = (RuleCall)cCallAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//@Exported
		//LocalLayout:
		//	'layout' name=ID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')? '{'
		//	call=LayoutCall
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'layout' name=ID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')? '{' call=LayoutCall '}'
		public Group getGroup() { return cGroup; }
		
		//'layout'
		public Keyword getLayoutKeyword_0() { return cLayoutKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' parameters+=Parameter (',' parameters+=Parameter)* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_1_0() { return cParametersParameterParserRuleCall_2_1_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_2_2_1() { return cParametersAssignment_2_2_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_2_1_0() { return cParametersParameterParserRuleCall_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//call=LayoutCall
		public Assignment getCallAssignment_4() { return cCallAssignment_4; }
		
		//LayoutCall
		public RuleCall getCallLayoutCallParserRuleCall_4_0() { return cCallLayoutCallParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ExternalLayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.ExternalLayout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLayoutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFQNParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_2_1_0 = (RuleCall)cParametersAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//@Exported
		//ExternalLayout:
		//	'layout' name=FQN ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'layout' name=FQN ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')?
		public Group getGroup() { return cGroup; }
		
		//'layout'
		public Keyword getLayoutKeyword_0() { return cLayoutKeyword_0; }
		
		//name=FQN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//FQN
		public RuleCall getNameFQNParserRuleCall_1_0() { return cNameFQNParserRuleCall_1_0; }
		
		//('(' parameters+=Parameter (',' parameters+=Parameter)* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_1_0() { return cParametersParameterParserRuleCall_2_1_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_2_2_1() { return cParametersAssignment_2_2_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_2_1_0() { return cParametersParameterParserRuleCall_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}
	public class MoniLoggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.MoniLogger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsMoniLoggerAnnotationEnumRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cMoniloggerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_3_1_0 = (RuleCall)cParametersAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cParametersAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_3_2_1_0 = (RuleCall)cParametersAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLevelAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLevelLogLevelEnumRuleCall_4_1_0 = (RuleCall)cLevelAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEventKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cEventAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cEventEventCrossReference_7_0 = (CrossReference)cEventAssignment_7.eContents().get(0);
		private final RuleCall cEventEventIDTerminalRuleCall_7_0_1 = (RuleCall)cEventEventCrossReference_7_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cConditionsKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cConditionsAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cConditionsConditionParserRuleCall_8_2_0 = (RuleCall)cConditionsAssignment_8_2.eContents().get(0);
		private final Group cGroup_8_3 = (Group)cGroup_8.eContents().get(3);
		private final Keyword cSemicolonKeyword_8_3_0 = (Keyword)cGroup_8_3.eContents().get(0);
		private final Assignment cConditionsAssignment_8_3_1 = (Assignment)cGroup_8_3.eContents().get(1);
		private final RuleCall cConditionsConditionParserRuleCall_8_3_1_0 = (RuleCall)cConditionsAssignment_8_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Keyword cActionsKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cLeftCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cActionsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cActionsActionParserRuleCall_11_0 = (RuleCall)cActionsAssignment_11.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cSemicolonKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cActionsAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_12_1_0 = (RuleCall)cActionsAssignment_12_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//@Exported
		//MoniLogger:
		//	annotations+=MoniLoggerAnnotation*
		//	'monilogger' name=ID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')? ('[' level=LogLevel ']')? '{'
		//	'event' event=[Event] ('conditions' '{' conditions+=Condition (';' conditions+=Condition)* '}')?
		//	'actions' '{' actions+=Action (';' actions+=Action)* '}'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=MoniLoggerAnnotation* 'monilogger' name=ID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')?
		//('[' level=LogLevel ']')? '{' 'event' event=[Event] ('conditions' '{' conditions+=Condition (';'
		//conditions+=Condition)* '}')? 'actions' '{' actions+=Action (';' actions+=Action)* '}' '}'
		public Group getGroup() { return cGroup; }
		
		//annotations+=MoniLoggerAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//MoniLoggerAnnotation
		public RuleCall getAnnotationsMoniLoggerAnnotationEnumRuleCall_0_0() { return cAnnotationsMoniLoggerAnnotationEnumRuleCall_0_0; }
		
		//'monilogger'
		public Keyword getMoniloggerKeyword_1() { return cMoniloggerKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('(' parameters+=Parameter (',' parameters+=Parameter)* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_3_1() { return cParametersAssignment_3_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_1_0() { return cParametersParameterParserRuleCall_3_1_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_3_2_1() { return cParametersAssignment_3_2_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_2_1_0() { return cParametersParameterParserRuleCall_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//('[' level=LogLevel ']')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }
		
		//level=LogLevel
		public Assignment getLevelAssignment_4_1() { return cLevelAssignment_4_1; }
		
		//LogLevel
		public RuleCall getLevelLogLevelEnumRuleCall_4_1_0() { return cLevelLogLevelEnumRuleCall_4_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_2() { return cRightSquareBracketKeyword_4_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//'event'
		public Keyword getEventKeyword_6() { return cEventKeyword_6; }
		
		//event=[Event]
		public Assignment getEventAssignment_7() { return cEventAssignment_7; }
		
		//[Event]
		public CrossReference getEventEventCrossReference_7_0() { return cEventEventCrossReference_7_0; }
		
		//ID
		public RuleCall getEventEventIDTerminalRuleCall_7_0_1() { return cEventEventIDTerminalRuleCall_7_0_1; }
		
		//('conditions' '{' conditions+=Condition (';' conditions+=Condition)* '}')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'conditions'
		public Keyword getConditionsKeyword_8_0() { return cConditionsKeyword_8_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_1() { return cLeftCurlyBracketKeyword_8_1; }
		
		//conditions+=Condition
		public Assignment getConditionsAssignment_8_2() { return cConditionsAssignment_8_2; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_8_2_0() { return cConditionsConditionParserRuleCall_8_2_0; }
		
		//(';' conditions+=Condition)*
		public Group getGroup_8_3() { return cGroup_8_3; }
		
		//';'
		public Keyword getSemicolonKeyword_8_3_0() { return cSemicolonKeyword_8_3_0; }
		
		//conditions+=Condition
		public Assignment getConditionsAssignment_8_3_1() { return cConditionsAssignment_8_3_1; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_8_3_1_0() { return cConditionsConditionParserRuleCall_8_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_4() { return cRightCurlyBracketKeyword_8_4; }
		
		//'actions'
		public Keyword getActionsKeyword_9() { return cActionsKeyword_9; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_10() { return cLeftCurlyBracketKeyword_10; }
		
		//actions+=Action
		public Assignment getActionsAssignment_11() { return cActionsAssignment_11; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_11_0() { return cActionsActionParserRuleCall_11_0; }
		
		//(';' actions+=Action)*
		public Group getGroup_12() { return cGroup_12; }
		
		//';'
		public Keyword getSemicolonKeyword_12_0() { return cSemicolonKeyword_12_0; }
		
		//actions+=Action
		public Assignment getActionsAssignment_12_1() { return cActionsAssignment_12_1; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_12_1_0() { return cActionsActionParserRuleCall_12_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.Parameter");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Parameter:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.Event");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cASTEventParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComplexEventParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUserEventParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Event:
		//	ASTEvent | ComplexEvent | UserEvent;
		@Override public ParserRule getRule() { return rule; }
		
		//ASTEvent | ComplexEvent | UserEvent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ASTEvent
		public RuleCall getASTEventParserRuleCall_0() { return cASTEventParserRuleCall_0; }
		
		//ComplexEvent
		public RuleCall getComplexEventParserRuleCall_1() { return cComplexEventParserRuleCall_1; }
		
		//UserEvent
		public RuleCall getUserEventParserRuleCall_2() { return cUserEventParserRuleCall_2; }
	}
	public class ASTEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.ASTEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Assignment cBeforeAssignment_3_0 = (Assignment)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cBeforeBeforeKeyword_3_0_0 = (Keyword)cBeforeAssignment_3_0.eContents().get(0);
		private final Assignment cAfterAssignment_3_1 = (Assignment)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cAfterAfterKeyword_3_1_0 = (Keyword)cAfterAssignment_3_1.eContents().get(0);
		private final Assignment cRuleIDAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRuleIDIDTerminalRuleCall_4_0 = (RuleCall)cRuleIDAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//@Exported
		//ASTEvent:
		//	'ast' name=ID '{' (before?='before'? & after?='after'?) ruleID=ID
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ast' name=ID '{' (before?='before'? & after?='after'?) ruleID=ID '}'
		public Group getGroup() { return cGroup; }
		
		//'ast'
		public Keyword getAstKeyword_0() { return cAstKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(before?='before'? & after?='after'?)
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//before?='before'?
		public Assignment getBeforeAssignment_3_0() { return cBeforeAssignment_3_0; }
		
		//'before'
		public Keyword getBeforeBeforeKeyword_3_0_0() { return cBeforeBeforeKeyword_3_0_0; }
		
		//after?='after'?
		public Assignment getAfterAssignment_3_1() { return cAfterAssignment_3_1; }
		
		//'after'
		public Keyword getAfterAfterKeyword_3_1_0() { return cAfterAfterKeyword_3_1_0; }
		
		//ruleID=ID
		public Assignment getRuleIDAssignment_4() { return cRuleIDAssignment_4; }
		
		//ID
		public RuleCall getRuleIDIDTerminalRuleCall_4_0() { return cRuleIDIDTerminalRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ComplexEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.ComplexEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComplexKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cKindAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cKindTemporalPatternKindEnumRuleCall_2_1_0 = (RuleCall)cKindAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPatternAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPatternTemporalPatternParserRuleCall_4_0 = (RuleCall)cPatternAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//@Exported
		//ComplexEvent:
		//	'complex' name=ID ('[' kind=TemporalPatternKind ']')? '{'
		//	pattern=TemporalPattern
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'complex' name=ID ('[' kind=TemporalPatternKind ']')? '{' pattern=TemporalPattern '}'
		public Group getGroup() { return cGroup; }
		
		//'complex'
		public Keyword getComplexKeyword_0() { return cComplexKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('[' kind=TemporalPatternKind ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//kind=TemporalPatternKind
		public Assignment getKindAssignment_2_1() { return cKindAssignment_2_1; }
		
		//TemporalPatternKind
		public RuleCall getKindTemporalPatternKindEnumRuleCall_2_1_0() { return cKindTemporalPatternKindEnumRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//pattern=TemporalPattern
		public Assignment getPatternAssignment_4() { return cPatternAssignment_4; }
		
		//TemporalPattern
		public RuleCall getPatternTemporalPatternParserRuleCall_4_0() { return cPatternTemporalPatternParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class UserEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.UserEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCustomKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_2_1_0 = (RuleCall)cParametersAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//@Exported
		//UserEvent:
		//	'custom' name=ID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'custom' name=ID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')?
		public Group getGroup() { return cGroup; }
		
		//'custom'
		public Keyword getCustomKeyword_0() { return cCustomKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' parameters+=Parameter (',' parameters+=Parameter)* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_1_0() { return cParametersParameterParserRuleCall_2_1_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_2_2_1() { return cParametersAssignment_2_2_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_2_1_0() { return cParametersParameterParserRuleCall_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLanguageExpressionConditionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionLanguageExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Condition:
		//	{LanguageExpressionCondition} expression=LanguageExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{LanguageExpressionCondition} expression=LanguageExpression
		public Group getGroup() { return cGroup; }
		
		//{LanguageExpressionCondition}
		public Action getLanguageExpressionConditionAction_0() { return cLanguageExpressionConditionAction_0; }
		
		//expression=LanguageExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//LanguageExpression
		public RuleCall getExpressionLanguageExpressionParserRuleCall_1_0() { return cExpressionLanguageExpressionParserRuleCall_1_0; }
	}
	public class TemporalPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.TemporalPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPatternAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPatternPatternParserRuleCall_0_0 = (RuleCall)cPatternAssignment_0.eContents().get(0);
		private final Assignment cScopeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cScopeScopeParserRuleCall_1_0 = (RuleCall)cScopeAssignment_1.eContents().get(0);
		
		//TemporalPattern:
		//	pattern=Pattern scope=Scope;
		@Override public ParserRule getRule() { return rule; }
		
		//pattern=Pattern scope=Scope
		public Group getGroup() { return cGroup; }
		
		//pattern=Pattern
		public Assignment getPatternAssignment_0() { return cPatternAssignment_0; }
		
		//Pattern
		public RuleCall getPatternPatternParserRuleCall_0_0() { return cPatternPatternParserRuleCall_0_0; }
		
		//scope=Scope
		public Assignment getScopeAssignment_1() { return cScopeAssignment_1; }
		
		//Scope
		public RuleCall getScopeScopeParserRuleCall_1_0() { return cScopeScopeParserRuleCall_1_0; }
	}
	public class PatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.Pattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExistenceAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cExistsKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cBoundAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cBoundBoundTypeParserRuleCall_0_2_0 = (RuleCall)cBoundAssignment_0_2.eContents().get(0);
		private final Assignment cEventAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cEventStreamEventParserRuleCall_0_3_0 = (RuleCall)cEventAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUniversalityAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAlwaysKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cEventAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cEventStreamEventParserRuleCall_1_2_0 = (RuleCall)cEventAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cAbsenceAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cNeverKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cEventAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cEventStreamEventParserRuleCall_2_2_0 = (RuleCall)cEventAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cPrecedenceAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cPredecessorAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPredecessorStreamEventParserRuleCall_3_1_0 = (RuleCall)cPredecessorAssignment_3_1.eContents().get(0);
		private final Keyword cPrecedesKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cSuccessorAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cSuccessorStreamEventParserRuleCall_3_3_0 = (RuleCall)cSuccessorAssignment_3_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cResponseAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cEventAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEventStreamEventParserRuleCall_4_1_0 = (RuleCall)cEventAssignment_4_1.eContents().get(0);
		private final Keyword cRespondsToKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cTriggerAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cTriggerStreamEventParserRuleCall_4_3_0 = (RuleCall)cTriggerAssignment_4_3.eContents().get(0);
		
		//Pattern:
		//	{Existence} 'exists'? bound=BoundType? event=StreamEvent | {Universality} 'always' event=StreamEvent | {Absence}
		//	'never' event=StreamEvent | {Precedence} predecessor=StreamEvent 'precedes' successor=StreamEvent | {Response}
		//	event=StreamEvent 'respondsTo' trigger=StreamEvent;
		@Override public ParserRule getRule() { return rule; }
		
		//{Existence} 'exists'? bound=BoundType? event=StreamEvent | {Universality} 'always' event=StreamEvent | {Absence} 'never'
		//event=StreamEvent | {Precedence} predecessor=StreamEvent 'precedes' successor=StreamEvent | {Response}
		//event=StreamEvent 'respondsTo' trigger=StreamEvent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Existence} 'exists'? bound=BoundType? event=StreamEvent
		public Group getGroup_0() { return cGroup_0; }
		
		//{Existence}
		public Action getExistenceAction_0_0() { return cExistenceAction_0_0; }
		
		//'exists'?
		public Keyword getExistsKeyword_0_1() { return cExistsKeyword_0_1; }
		
		//bound=BoundType?
		public Assignment getBoundAssignment_0_2() { return cBoundAssignment_0_2; }
		
		//BoundType
		public RuleCall getBoundBoundTypeParserRuleCall_0_2_0() { return cBoundBoundTypeParserRuleCall_0_2_0; }
		
		//event=StreamEvent
		public Assignment getEventAssignment_0_3() { return cEventAssignment_0_3; }
		
		//StreamEvent
		public RuleCall getEventStreamEventParserRuleCall_0_3_0() { return cEventStreamEventParserRuleCall_0_3_0; }
		
		//{Universality} 'always' event=StreamEvent
		public Group getGroup_1() { return cGroup_1; }
		
		//{Universality}
		public Action getUniversalityAction_1_0() { return cUniversalityAction_1_0; }
		
		//'always'
		public Keyword getAlwaysKeyword_1_1() { return cAlwaysKeyword_1_1; }
		
		//event=StreamEvent
		public Assignment getEventAssignment_1_2() { return cEventAssignment_1_2; }
		
		//StreamEvent
		public RuleCall getEventStreamEventParserRuleCall_1_2_0() { return cEventStreamEventParserRuleCall_1_2_0; }
		
		//{Absence} 'never' event=StreamEvent
		public Group getGroup_2() { return cGroup_2; }
		
		//{Absence}
		public Action getAbsenceAction_2_0() { return cAbsenceAction_2_0; }
		
		//'never'
		public Keyword getNeverKeyword_2_1() { return cNeverKeyword_2_1; }
		
		//event=StreamEvent
		public Assignment getEventAssignment_2_2() { return cEventAssignment_2_2; }
		
		//StreamEvent
		public RuleCall getEventStreamEventParserRuleCall_2_2_0() { return cEventStreamEventParserRuleCall_2_2_0; }
		
		//{Precedence} predecessor=StreamEvent 'precedes' successor=StreamEvent
		public Group getGroup_3() { return cGroup_3; }
		
		//{Precedence}
		public Action getPrecedenceAction_3_0() { return cPrecedenceAction_3_0; }
		
		//predecessor=StreamEvent
		public Assignment getPredecessorAssignment_3_1() { return cPredecessorAssignment_3_1; }
		
		//StreamEvent
		public RuleCall getPredecessorStreamEventParserRuleCall_3_1_0() { return cPredecessorStreamEventParserRuleCall_3_1_0; }
		
		//'precedes'
		public Keyword getPrecedesKeyword_3_2() { return cPrecedesKeyword_3_2; }
		
		//successor=StreamEvent
		public Assignment getSuccessorAssignment_3_3() { return cSuccessorAssignment_3_3; }
		
		//StreamEvent
		public RuleCall getSuccessorStreamEventParserRuleCall_3_3_0() { return cSuccessorStreamEventParserRuleCall_3_3_0; }
		
		//{Response} event=StreamEvent 'respondsTo' trigger=StreamEvent
		public Group getGroup_4() { return cGroup_4; }
		
		//{Response}
		public Action getResponseAction_4_0() { return cResponseAction_4_0; }
		
		//event=StreamEvent
		public Assignment getEventAssignment_4_1() { return cEventAssignment_4_1; }
		
		//StreamEvent
		public RuleCall getEventStreamEventParserRuleCall_4_1_0() { return cEventStreamEventParserRuleCall_4_1_0; }
		
		//'respondsTo'
		public Keyword getRespondsToKeyword_4_2() { return cRespondsToKeyword_4_2; }
		
		//trigger=StreamEvent
		public Assignment getTriggerAssignment_4_3() { return cTriggerAssignment_4_3; }
		
		//StreamEvent
		public RuleCall getTriggerStreamEventParserRuleCall_4_3_0() { return cTriggerStreamEventParserRuleCall_4_3_0; }
	}
	public class BoundTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.BoundType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExactBoundParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLowerBoundParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUpperBoundParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BoundType:
		//	ExactBound | LowerBound | UpperBound;
		@Override public ParserRule getRule() { return rule; }
		
		//ExactBound | LowerBound | UpperBound
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExactBound
		public RuleCall getExactBoundParserRuleCall_0() { return cExactBoundParserRuleCall_0; }
		
		//LowerBound
		public RuleCall getLowerBoundParserRuleCall_1() { return cLowerBoundParserRuleCall_1; }
		
		//UpperBound
		public RuleCall getUpperBoundParserRuleCall_2() { return cUpperBoundParserRuleCall_2; }
	}
	public class ExactBoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.ExactBound");
		private final Assignment cNAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNINTTerminalRuleCall_0 = (RuleCall)cNAssignment.eContents().get(0);
		
		//ExactBound:
		//	n=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//n=INT
		public Assignment getNAssignment() { return cNAssignment; }
		
		//INT
		public RuleCall getNINTTerminalRuleCall_0() { return cNINTTerminalRuleCall_0; }
	}
	public class LowerBoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.LowerBound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAtleastKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNINTTerminalRuleCall_1_0 = (RuleCall)cNAssignment_1.eContents().get(0);
		
		//LowerBound:
		//	'atleast' n=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'atleast' n=INT
		public Group getGroup() { return cGroup; }
		
		//'atleast'
		public Keyword getAtleastKeyword_0() { return cAtleastKeyword_0; }
		
		//n=INT
		public Assignment getNAssignment_1() { return cNAssignment_1; }
		
		//INT
		public RuleCall getNINTTerminalRuleCall_1_0() { return cNINTTerminalRuleCall_1_0; }
	}
	public class UpperBoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.UpperBound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAtmostKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNINTTerminalRuleCall_1_0 = (RuleCall)cNAssignment_1.eContents().get(0);
		
		//UpperBound:
		//	'atmost' n=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'atmost' n=INT
		public Group getGroup() { return cGroup; }
		
		//'atmost'
		public Keyword getAtmostKeyword_0() { return cAtmostKeyword_0; }
		
		//n=INT
		public Assignment getNAssignment_1() { return cNAssignment_1; }
		
		//INT
		public RuleCall getNINTTerminalRuleCall_1_0() { return cNINTTerminalRuleCall_1_0; }
	}
	public class ScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.Scope");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cGloballyAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cGloballyKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAfterAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAfterKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cLowerBoundAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLowerBoundStreamEventParserRuleCall_1_2_0 = (RuleCall)cLowerBoundAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBeforeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cBeforeKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cUpperBoundAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cUpperBoundStreamEventParserRuleCall_2_2_0 = (RuleCall)cUpperBoundAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBetweenAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cBetweenKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cLowerBoundAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cLowerBoundStreamEventParserRuleCall_3_2_0 = (RuleCall)cLowerBoundAssignment_3_2.eContents().get(0);
		private final Keyword cAndKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cUpperBoundAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cUpperBoundStreamEventParserRuleCall_3_4_0 = (RuleCall)cUpperBoundAssignment_3_4.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cAfterUntilAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cAfterKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cLowerBoundAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cLowerBoundStreamEventParserRuleCall_4_2_0 = (RuleCall)cLowerBoundAssignment_4_2.eContents().get(0);
		private final Keyword cUntilKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cUpperBoundAssignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final RuleCall cUpperBoundStreamEventParserRuleCall_4_4_0 = (RuleCall)cUpperBoundAssignment_4_4.eContents().get(0);
		
		//Scope:
		//	{Globally} 'globally'? | {After} 'after' lowerBound=StreamEvent | {Before} 'before' upperBound=StreamEvent | {Between}
		//	'between' lowerBound=StreamEvent 'and' upperBound=StreamEvent | {AfterUntil} 'after' lowerBound=StreamEvent 'until'
		//	upperBound=StreamEvent;
		@Override public ParserRule getRule() { return rule; }
		
		//{Globally} 'globally'? | {After} 'after' lowerBound=StreamEvent | {Before} 'before' upperBound=StreamEvent | {Between}
		//'between' lowerBound=StreamEvent 'and' upperBound=StreamEvent | {AfterUntil} 'after' lowerBound=StreamEvent 'until'
		//upperBound=StreamEvent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Globally} 'globally'?
		public Group getGroup_0() { return cGroup_0; }
		
		//{Globally}
		public Action getGloballyAction_0_0() { return cGloballyAction_0_0; }
		
		//'globally'?
		public Keyword getGloballyKeyword_0_1() { return cGloballyKeyword_0_1; }
		
		//{After} 'after' lowerBound=StreamEvent
		public Group getGroup_1() { return cGroup_1; }
		
		//{After}
		public Action getAfterAction_1_0() { return cAfterAction_1_0; }
		
		//'after'
		public Keyword getAfterKeyword_1_1() { return cAfterKeyword_1_1; }
		
		//lowerBound=StreamEvent
		public Assignment getLowerBoundAssignment_1_2() { return cLowerBoundAssignment_1_2; }
		
		//StreamEvent
		public RuleCall getLowerBoundStreamEventParserRuleCall_1_2_0() { return cLowerBoundStreamEventParserRuleCall_1_2_0; }
		
		//{Before} 'before' upperBound=StreamEvent
		public Group getGroup_2() { return cGroup_2; }
		
		//{Before}
		public Action getBeforeAction_2_0() { return cBeforeAction_2_0; }
		
		//'before'
		public Keyword getBeforeKeyword_2_1() { return cBeforeKeyword_2_1; }
		
		//upperBound=StreamEvent
		public Assignment getUpperBoundAssignment_2_2() { return cUpperBoundAssignment_2_2; }
		
		//StreamEvent
		public RuleCall getUpperBoundStreamEventParserRuleCall_2_2_0() { return cUpperBoundStreamEventParserRuleCall_2_2_0; }
		
		//{Between} 'between' lowerBound=StreamEvent 'and' upperBound=StreamEvent
		public Group getGroup_3() { return cGroup_3; }
		
		//{Between}
		public Action getBetweenAction_3_0() { return cBetweenAction_3_0; }
		
		//'between'
		public Keyword getBetweenKeyword_3_1() { return cBetweenKeyword_3_1; }
		
		//lowerBound=StreamEvent
		public Assignment getLowerBoundAssignment_3_2() { return cLowerBoundAssignment_3_2; }
		
		//StreamEvent
		public RuleCall getLowerBoundStreamEventParserRuleCall_3_2_0() { return cLowerBoundStreamEventParserRuleCall_3_2_0; }
		
		//'and'
		public Keyword getAndKeyword_3_3() { return cAndKeyword_3_3; }
		
		//upperBound=StreamEvent
		public Assignment getUpperBoundAssignment_3_4() { return cUpperBoundAssignment_3_4; }
		
		//StreamEvent
		public RuleCall getUpperBoundStreamEventParserRuleCall_3_4_0() { return cUpperBoundStreamEventParserRuleCall_3_4_0; }
		
		//{AfterUntil} 'after' lowerBound=StreamEvent 'until' upperBound=StreamEvent
		public Group getGroup_4() { return cGroup_4; }
		
		//{AfterUntil}
		public Action getAfterUntilAction_4_0() { return cAfterUntilAction_4_0; }
		
		//'after'
		public Keyword getAfterKeyword_4_1() { return cAfterKeyword_4_1; }
		
		//lowerBound=StreamEvent
		public Assignment getLowerBoundAssignment_4_2() { return cLowerBoundAssignment_4_2; }
		
		//StreamEvent
		public RuleCall getLowerBoundStreamEventParserRuleCall_4_2_0() { return cLowerBoundStreamEventParserRuleCall_4_2_0; }
		
		//'until'
		public Keyword getUntilKeyword_4_3() { return cUntilKeyword_4_3; }
		
		//upperBound=StreamEvent
		public Assignment getUpperBoundAssignment_4_4() { return cUpperBoundAssignment_4_4; }
		
		//StreamEvent
		public RuleCall getUpperBoundStreamEventParserRuleCall_4_4_0() { return cUpperBoundStreamEventParserRuleCall_4_4_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLanguageExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAppenderCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEmitEventParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMoniLoggerCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Action:
		//	LanguageExpression | AppenderCall | EmitEvent | MoniLoggerCall;
		@Override public ParserRule getRule() { return rule; }
		
		//LanguageExpression | AppenderCall | EmitEvent | MoniLoggerCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LanguageExpression
		public RuleCall getLanguageExpressionParserRuleCall_0() { return cLanguageExpressionParserRuleCall_0; }
		
		//AppenderCall
		public RuleCall getAppenderCallParserRuleCall_1() { return cAppenderCallParserRuleCall_1; }
		
		//EmitEvent
		public RuleCall getEmitEventParserRuleCall_2() { return cEmitEventParserRuleCall_2; }
		
		//MoniLoggerCall
		public RuleCall getMoniLoggerCallParserRuleCall_3() { return cMoniLoggerCallParserRuleCall_3; }
	}
	public class AppenderCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.AppenderCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAppenderAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAppenderAppenderRefParserRuleCall_0_0 = (RuleCall)cAppenderAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCallKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsAppenderCallArgumentParserRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cArgsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cArgsAppenderCallArgumentParserRuleCall_3_2_1_0 = (RuleCall)cArgsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//AppenderCall:
		//	appender=AppenderRef '.' 'call' ('(' args+=AppenderCallArgument (',' args+=AppenderCallArgument)* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//appender=AppenderRef '.' 'call' ('(' args+=AppenderCallArgument (',' args+=AppenderCallArgument)* ')')?
		public Group getGroup() { return cGroup; }
		
		//appender=AppenderRef
		public Assignment getAppenderAssignment_0() { return cAppenderAssignment_0; }
		
		//AppenderRef
		public RuleCall getAppenderAppenderRefParserRuleCall_0_0() { return cAppenderAppenderRefParserRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//'call'
		public Keyword getCallKeyword_2() { return cCallKeyword_2; }
		
		//('(' args+=AppenderCallArgument (',' args+=AppenderCallArgument)* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//args+=AppenderCallArgument
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }
		
		//AppenderCallArgument
		public RuleCall getArgsAppenderCallArgumentParserRuleCall_3_1_0() { return cArgsAppenderCallArgumentParserRuleCall_3_1_0; }
		
		//(',' args+=AppenderCallArgument)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//args+=AppenderCallArgument
		public Assignment getArgsAssignment_3_2_1() { return cArgsAssignment_3_2_1; }
		
		//AppenderCallArgument
		public RuleCall getArgsAppenderCallArgumentParserRuleCall_3_2_1_0() { return cArgsAppenderCallArgumentParserRuleCall_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
	}
	public class AppenderRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.AppenderRef");
		private final Assignment cAppenderAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cAppenderAppenderCrossReference_0 = (CrossReference)cAppenderAssignment.eContents().get(0);
		private final RuleCall cAppenderAppenderFQNParserRuleCall_0_1 = (RuleCall)cAppenderAppenderCrossReference_0.eContents().get(1);
		
		//AppenderRef:
		//	appender=[Appender|FQN];
		@Override public ParserRule getRule() { return rule; }
		
		//appender=[Appender|FQN]
		public Assignment getAppenderAssignment() { return cAppenderAssignment; }
		
		//[Appender|FQN]
		public CrossReference getAppenderAppenderCrossReference_0() { return cAppenderAppenderCrossReference_0; }
		
		//FQN
		public RuleCall getAppenderAppenderFQNParserRuleCall_0_1() { return cAppenderAppenderFQNParserRuleCall_0_1; }
	}
	public class AppenderCallArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.AppenderCallArgument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLayoutCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AppenderCallArgument:
		//	Expression | LayoutCall;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression | LayoutCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//LayoutCall
		public RuleCall getLayoutCallParserRuleCall_1() { return cLayoutCallParserRuleCall_1; }
	}
	public class LayoutCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.LayoutCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLayoutAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLayoutLayoutRefParserRuleCall_0_0 = (RuleCall)cLayoutAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCallKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cArgsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_3_2_1_0 = (RuleCall)cArgsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//LayoutCall:
		//	layout=LayoutRef '.' 'call' ('(' args+=Expression (',' args+=Expression)* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//layout=LayoutRef '.' 'call' ('(' args+=Expression (',' args+=Expression)* ')')?
		public Group getGroup() { return cGroup; }
		
		//layout=LayoutRef
		public Assignment getLayoutAssignment_0() { return cLayoutAssignment_0; }
		
		//LayoutRef
		public RuleCall getLayoutLayoutRefParserRuleCall_0_0() { return cLayoutLayoutRefParserRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//'call'
		public Keyword getCallKeyword_2() { return cCallKeyword_2; }
		
		//('(' args+=Expression (',' args+=Expression)* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//args+=Expression
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_3_1_0() { return cArgsExpressionParserRuleCall_3_1_0; }
		
		//(',' args+=Expression)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//args+=Expression
		public Assignment getArgsAssignment_3_2_1() { return cArgsAssignment_3_2_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_3_2_1_0() { return cArgsExpressionParserRuleCall_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
	}
	public class LayoutRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.LayoutRef");
		private final Assignment cLayoutAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cLayoutLayoutCrossReference_0 = (CrossReference)cLayoutAssignment.eContents().get(0);
		private final RuleCall cLayoutLayoutFQNParserRuleCall_0_1 = (RuleCall)cLayoutLayoutCrossReference_0.eContents().get(1);
		
		//LayoutRef:
		//	layout=[Layout|FQN];
		@Override public ParserRule getRule() { return rule; }
		
		//layout=[Layout|FQN]
		public Assignment getLayoutAssignment() { return cLayoutAssignment; }
		
		//[Layout|FQN]
		public CrossReference getLayoutLayoutCrossReference_0() { return cLayoutLayoutCrossReference_0; }
		
		//FQN
		public RuleCall getLayoutLayoutFQNParserRuleCall_0_1() { return cLayoutLayoutFQNParserRuleCall_0_1; }
	}
	public class EmitEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.EmitEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cEventEventCrossReference_0_0 = (CrossReference)cEventAssignment_0.eContents().get(0);
		private final RuleCall cEventEventIDTerminalRuleCall_0_0_1 = (RuleCall)cEventEventCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEmitKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_3_1_0 = (RuleCall)cArgsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cArgsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_3_2_1_0 = (RuleCall)cArgsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//EmitEvent:
		//	event=[Event] '.' 'emit' ('(' args+=Expression (',' args+=Expression)* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//event=[Event] '.' 'emit' ('(' args+=Expression (',' args+=Expression)* ')')?
		public Group getGroup() { return cGroup; }
		
		//event=[Event]
		public Assignment getEventAssignment_0() { return cEventAssignment_0; }
		
		//[Event]
		public CrossReference getEventEventCrossReference_0_0() { return cEventEventCrossReference_0_0; }
		
		//ID
		public RuleCall getEventEventIDTerminalRuleCall_0_0_1() { return cEventEventIDTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//'emit'
		public Keyword getEmitKeyword_2() { return cEmitKeyword_2; }
		
		//('(' args+=Expression (',' args+=Expression)* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//args+=Expression
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_3_1_0() { return cArgsExpressionParserRuleCall_3_1_0; }
		
		//(',' args+=Expression)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//args+=Expression
		public Assignment getArgsAssignment_3_2_1() { return cArgsAssignment_3_2_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_3_2_1_0() { return cArgsExpressionParserRuleCall_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
	}
	public class MoniLoggerCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.MoniLoggerCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStartMoniLoggerAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cMoniloggerAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cMoniloggerMoniLoggerCrossReference_0_1_0 = (CrossReference)cMoniloggerAssignment_0_1.eContents().get(0);
		private final RuleCall cMoniloggerMoniLoggerIDTerminalRuleCall_0_1_0_1 = (RuleCall)cMoniloggerMoniLoggerCrossReference_0_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cStartKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cArgsAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_0_4_1_0 = (RuleCall)cArgsAssignment_0_4_1.eContents().get(0);
		private final Group cGroup_0_4_2 = (Group)cGroup_0_4.eContents().get(2);
		private final Keyword cCommaKeyword_0_4_2_0 = (Keyword)cGroup_0_4_2.eContents().get(0);
		private final Assignment cArgsAssignment_0_4_2_1 = (Assignment)cGroup_0_4_2.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_0_4_2_1_0 = (RuleCall)cArgsAssignment_0_4_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4_3 = (Keyword)cGroup_0_4.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStopMoniLoggerAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cMoniloggerAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cMoniloggerMoniLoggerCrossReference_1_1_0 = (CrossReference)cMoniloggerAssignment_1_1.eContents().get(0);
		private final RuleCall cMoniloggerMoniLoggerIDTerminalRuleCall_1_1_0_1 = (RuleCall)cMoniloggerMoniLoggerCrossReference_1_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cStopKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//MoniLoggerCall:
		//	{StartMoniLogger} monilogger=[MoniLogger] '.' 'start' ('(' args+=Expression (',' args+=Expression)* ')')? |
		//	{StopMoniLogger} monilogger=[MoniLogger] '.' 'stop';
		@Override public ParserRule getRule() { return rule; }
		
		//{StartMoniLogger} monilogger=[MoniLogger] '.' 'start' ('(' args+=Expression (',' args+=Expression)* ')')? |
		//{StopMoniLogger} monilogger=[MoniLogger] '.' 'stop'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{StartMoniLogger} monilogger=[MoniLogger] '.' 'start' ('(' args+=Expression (',' args+=Expression)* ')')?
		public Group getGroup_0() { return cGroup_0; }
		
		//{StartMoniLogger}
		public Action getStartMoniLoggerAction_0_0() { return cStartMoniLoggerAction_0_0; }
		
		//monilogger=[MoniLogger]
		public Assignment getMoniloggerAssignment_0_1() { return cMoniloggerAssignment_0_1; }
		
		//[MoniLogger]
		public CrossReference getMoniloggerMoniLoggerCrossReference_0_1_0() { return cMoniloggerMoniLoggerCrossReference_0_1_0; }
		
		//ID
		public RuleCall getMoniloggerMoniLoggerIDTerminalRuleCall_0_1_0_1() { return cMoniloggerMoniLoggerIDTerminalRuleCall_0_1_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_0_2() { return cFullStopKeyword_0_2; }
		
		//'start'
		public Keyword getStartKeyword_0_3() { return cStartKeyword_0_3; }
		
		//('(' args+=Expression (',' args+=Expression)* ')')?
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_4_0() { return cLeftParenthesisKeyword_0_4_0; }
		
		//args+=Expression
		public Assignment getArgsAssignment_0_4_1() { return cArgsAssignment_0_4_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_0_4_1_0() { return cArgsExpressionParserRuleCall_0_4_1_0; }
		
		//(',' args+=Expression)*
		public Group getGroup_0_4_2() { return cGroup_0_4_2; }
		
		//','
		public Keyword getCommaKeyword_0_4_2_0() { return cCommaKeyword_0_4_2_0; }
		
		//args+=Expression
		public Assignment getArgsAssignment_0_4_2_1() { return cArgsAssignment_0_4_2_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_0_4_2_1_0() { return cArgsExpressionParserRuleCall_0_4_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4_3() { return cRightParenthesisKeyword_0_4_3; }
		
		//{StopMoniLogger} monilogger=[MoniLogger] '.' 'stop'
		public Group getGroup_1() { return cGroup_1; }
		
		//{StopMoniLogger}
		public Action getStopMoniLoggerAction_1_0() { return cStopMoniLoggerAction_1_0; }
		
		//monilogger=[MoniLogger]
		public Assignment getMoniloggerAssignment_1_1() { return cMoniloggerAssignment_1_1; }
		
		//[MoniLogger]
		public CrossReference getMoniloggerMoniLoggerCrossReference_1_1_0() { return cMoniloggerMoniLoggerCrossReference_1_1_0; }
		
		//ID
		public RuleCall getMoniloggerMoniLoggerIDTerminalRuleCall_1_1_0_1() { return cMoniloggerMoniLoggerIDTerminalRuleCall_1_1_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_2() { return cFullStopKeyword_1_2; }
		
		//'stop'
		public Keyword getStopKeyword_1_3() { return cStopKeyword_1_3; }
	}
	public class StreamEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.StreamEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cEventEventCrossReference_0_0 = (CrossReference)cEventAssignment_0.eContents().get(0);
		private final RuleCall cEventEventIDTerminalRuleCall_0_0_1 = (RuleCall)cEventEventCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValuesEmptyOrPropertyValueParserRuleCall_1_1_0 = (RuleCall)cValuesAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cValuesAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cValuesEmptyOrPropertyValueParserRuleCall_1_2_1_0 = (RuleCall)cValuesAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//StreamEvent:
		//	event=[Event] ('[' values+=EmptyOrPropertyValue (',' values+=EmptyOrPropertyValue)* ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//event=[Event] ('[' values+=EmptyOrPropertyValue (',' values+=EmptyOrPropertyValue)* ']')?
		public Group getGroup() { return cGroup; }
		
		//event=[Event]
		public Assignment getEventAssignment_0() { return cEventAssignment_0; }
		
		//[Event]
		public CrossReference getEventEventCrossReference_0_0() { return cEventEventCrossReference_0_0; }
		
		//ID
		public RuleCall getEventEventIDTerminalRuleCall_0_0_1() { return cEventEventIDTerminalRuleCall_0_0_1; }
		
		//('[' values+=EmptyOrPropertyValue (',' values+=EmptyOrPropertyValue)* ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//values+=EmptyOrPropertyValue
		public Assignment getValuesAssignment_1_1() { return cValuesAssignment_1_1; }
		
		//EmptyOrPropertyValue
		public RuleCall getValuesEmptyOrPropertyValueParserRuleCall_1_1_0() { return cValuesEmptyOrPropertyValueParserRuleCall_1_1_0; }
		
		//(',' values+=EmptyOrPropertyValue)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//values+=EmptyOrPropertyValue
		public Assignment getValuesAssignment_1_2_1() { return cValuesAssignment_1_2_1; }
		
		//EmptyOrPropertyValue
		public RuleCall getValuesEmptyOrPropertyValueParserRuleCall_1_2_1_0() { return cValuesEmptyOrPropertyValueParserRuleCall_1_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}
	public class EmptyOrPropertyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.EmptyOrPropertyValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Action cEmptyAction_0 = (Action)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cPropertyValueAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cIdAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_1_0 = (RuleCall)cIdAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cEqualsSignKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cValueAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_1_2_1_0 = (RuleCall)cValueAssignment_1_2_1.eContents().get(0);
		
		//EmptyOrPropertyValue:
		//	{Empty} | {PropertyValue} id=ID ('=' value=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Empty} | {PropertyValue} id=ID ('=' value=Expression)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Empty}
		public Action getEmptyAction_0() { return cEmptyAction_0; }
		
		//{PropertyValue} id=ID ('=' value=Expression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{PropertyValue}
		public Action getPropertyValueAction_1_0() { return cPropertyValueAction_1_0; }
		
		//id=ID
		public Assignment getIdAssignment_1_1() { return cIdAssignment_1_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_1_0() { return cIdIDTerminalRuleCall_1_1_0; }
		
		//('=' value=Expression)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_2_0() { return cEqualsSignKeyword_1_2_0; }
		
		//value=Expression
		public Assignment getValueAssignment_1_2_1() { return cValueAssignment_1_2_1; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_2_1_0() { return cValueExpressionParserRuleCall_1_2_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParameterReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLanguageExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Expression:
		//	ParameterReference | LanguageExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//ParameterReference | LanguageExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ParameterReference
		public RuleCall getParameterReferenceParserRuleCall_0() { return cParameterReferenceParserRuleCall_0; }
		
		//LanguageExpression
		public RuleCall getLanguageExpressionParserRuleCall_1() { return cLanguageExpressionParserRuleCall_1; }
	}
	public class ParameterReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.ParameterReference");
		private final Assignment cParameterAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cParameterParameterCrossReference_0 = (CrossReference)cParameterAssignment.eContents().get(0);
		private final RuleCall cParameterParameterIDTerminalRuleCall_0_1 = (RuleCall)cParameterParameterCrossReference_0.eContents().get(1);
		
		//ParameterReference:
		//	parameter=[Parameter];
		@Override public ParserRule getRule() { return rule; }
		
		//parameter=[Parameter]
		public Assignment getParameterAssignment() { return cParameterAssignment; }
		
		//[Parameter]
		public CrossReference getParameterParameterCrossReference_0() { return cParameterParameterCrossReference_0; }
		
		//ID
		public RuleCall getParameterParameterIDTerminalRuleCall_0_1() { return cParameterParameterIDTerminalRuleCall_0_1; }
	}
	public class LanguageExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.LanguageExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExplicitLanguageExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cLanguageIdAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLanguageIdIDTerminalRuleCall_0_1_0 = (RuleCall)cLanguageIdAssignment_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cExpressionAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cExpressionSTRINGTerminalRuleCall_0_3_0 = (RuleCall)cExpressionAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cDefaultLanguageExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		
		//LanguageExpression:
		//	{ExplicitLanguageExpression} languageId=ID '(' expression=STRING ')' | {DefaultLanguageExpression} expression=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExplicitLanguageExpression} languageId=ID '(' expression=STRING ')' | {DefaultLanguageExpression} expression=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ExplicitLanguageExpression} languageId=ID '(' expression=STRING ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{ExplicitLanguageExpression}
		public Action getExplicitLanguageExpressionAction_0_0() { return cExplicitLanguageExpressionAction_0_0; }
		
		//languageId=ID
		public Assignment getLanguageIdAssignment_0_1() { return cLanguageIdAssignment_0_1; }
		
		//ID
		public RuleCall getLanguageIdIDTerminalRuleCall_0_1_0() { return cLanguageIdIDTerminalRuleCall_0_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }
		
		//expression=STRING
		public Assignment getExpressionAssignment_0_3() { return cExpressionAssignment_0_3; }
		
		//STRING
		public RuleCall getExpressionSTRINGTerminalRuleCall_0_3_0() { return cExpressionSTRINGTerminalRuleCall_0_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//{DefaultLanguageExpression} expression=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//{DefaultLanguageExpression}
		public Action getDefaultLanguageExpressionAction_1_0() { return cDefaultLanguageExpressionAction_1_0; }
		
		//expression=STRING
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }
		
		//STRING
		public RuleCall getExpressionSTRINGTerminalRuleCall_1_1_0() { return cExpressionSTRINGTerminalRuleCall_1_1_0; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	public class MoniLoggerAnnotationElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.MoniLoggerAnnotation");
		private final EnumLiteralDeclaration cInactiveEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cInactiveInactiveKeyword_0 = (Keyword)cInactiveEnumLiteralDeclaration.eContents().get(0);
		
		//enum MoniLoggerAnnotation:
		//	inactive='@Inactive';
		public EnumRule getRule() { return rule; }
		
		//inactive='@Inactive'
		public EnumLiteralDeclaration getInactiveEnumLiteralDeclaration() { return cInactiveEnumLiteralDeclaration; }
		
		//'@Inactive'
		public Keyword getInactiveInactiveKeyword_0() { return cInactiveInactiveKeyword_0; }
	}
	public class AppenderAnnotationElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.AppenderAnnotation");
		private final EnumLiteralDeclaration cAsyncEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cAsyncAsyncKeyword_0 = (Keyword)cAsyncEnumLiteralDeclaration.eContents().get(0);
		
		//enum AppenderAnnotation:
		//	async='@Async';
		public EnumRule getRule() { return rule; }
		
		//async='@Async'
		public EnumLiteralDeclaration getAsyncEnumLiteralDeclaration() { return cAsyncEnumLiteralDeclaration; }
		
		//'@Async'
		public Keyword getAsyncAsyncKeyword_0() { return cAsyncAsyncKeyword_0; }
	}
	public class LogLevelElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.LogLevel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInfoEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInfoINFOKeyword_0_0 = (Keyword)cInfoEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cConfigEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cConfigCONFIGKeyword_1_0 = (Keyword)cConfigEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFineEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFineFINEKeyword_2_0 = (Keyword)cFineEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFinerEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFinerFINERKeyword_3_0 = (Keyword)cFinerEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFinestEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFinestFINESTKeyword_4_0 = (Keyword)cFinestEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSevereEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSevereSEVEREKeyword_5_0 = (Keyword)cSevereEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cWarningEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cWarningWARNINGKeyword_6_0 = (Keyword)cWarningEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum LogLevel:
		//	info='INFO' | config='CONFIG' | fine='FINE' | finer='FINER' |
		//	finest='FINEST' | severe='SEVERE' | warning='WARNING';
		public EnumRule getRule() { return rule; }
		
		//info='INFO' | config='CONFIG' | fine='FINE' | finer='FINER' | finest='FINEST' | severe='SEVERE' | warning='WARNING'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//info='INFO'
		public EnumLiteralDeclaration getInfoEnumLiteralDeclaration_0() { return cInfoEnumLiteralDeclaration_0; }
		
		//'INFO'
		public Keyword getInfoINFOKeyword_0_0() { return cInfoINFOKeyword_0_0; }
		
		//config='CONFIG'
		public EnumLiteralDeclaration getConfigEnumLiteralDeclaration_1() { return cConfigEnumLiteralDeclaration_1; }
		
		//'CONFIG'
		public Keyword getConfigCONFIGKeyword_1_0() { return cConfigCONFIGKeyword_1_0; }
		
		//fine='FINE'
		public EnumLiteralDeclaration getFineEnumLiteralDeclaration_2() { return cFineEnumLiteralDeclaration_2; }
		
		//'FINE'
		public Keyword getFineFINEKeyword_2_0() { return cFineFINEKeyword_2_0; }
		
		//finer='FINER'
		public EnumLiteralDeclaration getFinerEnumLiteralDeclaration_3() { return cFinerEnumLiteralDeclaration_3; }
		
		//'FINER'
		public Keyword getFinerFINERKeyword_3_0() { return cFinerFINERKeyword_3_0; }
		
		//finest='FINEST'
		public EnumLiteralDeclaration getFinestEnumLiteralDeclaration_4() { return cFinestEnumLiteralDeclaration_4; }
		
		//'FINEST'
		public Keyword getFinestFINESTKeyword_4_0() { return cFinestFINESTKeyword_4_0; }
		
		//severe='SEVERE'
		public EnumLiteralDeclaration getSevereEnumLiteralDeclaration_5() { return cSevereEnumLiteralDeclaration_5; }
		
		//'SEVERE'
		public Keyword getSevereSEVEREKeyword_5_0() { return cSevereSEVEREKeyword_5_0; }
		
		//warning='WARNING'
		public EnumLiteralDeclaration getWarningEnumLiteralDeclaration_6() { return cWarningEnumLiteralDeclaration_6; }
		
		//'WARNING'
		public Keyword getWarningWARNINGKeyword_6_0() { return cWarningWARNINGKeyword_6_0; }
	}
	public class TemporalPatternKindElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.monilog.MoniLog4DSL.TemporalPatternKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSSKeyword_0_0 = (Keyword)cSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVVKeyword_1_0 = (Keyword)cVEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNSNSKeyword_2_0 = (Keyword)cNSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNVEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNVNVKeyword_3_0 = (Keyword)cNVEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum TemporalPatternKind:
		//	s='S' | v='V' | nS | nV;
		public EnumRule getRule() { return rule; }
		
		//s='S' | v='V' | nS | nV
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//s='S'
		public EnumLiteralDeclaration getSEnumLiteralDeclaration_0() { return cSEnumLiteralDeclaration_0; }
		
		//'S'
		public Keyword getSSKeyword_0_0() { return cSSKeyword_0_0; }
		
		//v='V'
		public EnumLiteralDeclaration getVEnumLiteralDeclaration_1() { return cVEnumLiteralDeclaration_1; }
		
		//'V'
		public Keyword getVVKeyword_1_0() { return cVVKeyword_1_0; }
		
		//nS
		public EnumLiteralDeclaration getNSEnumLiteralDeclaration_2() { return cNSEnumLiteralDeclaration_2; }
		
		//'nS'
		public Keyword getNSNSKeyword_2_0() { return cNSNSKeyword_2_0; }
		
		//nV
		public EnumLiteralDeclaration getNVEnumLiteralDeclaration_3() { return cNVEnumLiteralDeclaration_3; }
		
		//'nV'
		public Keyword getNVNVKeyword_3_0() { return cNVNVKeyword_3_0; }
	}
	
	private final DocumentElements pDocument;
	private final AppenderElements pAppender;
	private final LocalAppenderElements pLocalAppender;
	private final ExternalAppenderElements pExternalAppender;
	private final LayoutElements pLayout;
	private final LocalLayoutElements pLocalLayout;
	private final ExternalLayoutElements pExternalLayout;
	private final MoniLoggerElements pMoniLogger;
	private final ParameterElements pParameter;
	private final EventElements pEvent;
	private final ASTEventElements pASTEvent;
	private final ComplexEventElements pComplexEvent;
	private final UserEventElements pUserEvent;
	private final ConditionElements pCondition;
	private final TemporalPatternElements pTemporalPattern;
	private final PatternElements pPattern;
	private final BoundTypeElements pBoundType;
	private final ExactBoundElements pExactBound;
	private final LowerBoundElements pLowerBound;
	private final UpperBoundElements pUpperBound;
	private final ScopeElements pScope;
	private final ActionElements pAction;
	private final AppenderCallElements pAppenderCall;
	private final AppenderRefElements pAppenderRef;
	private final AppenderCallArgumentElements pAppenderCallArgument;
	private final LayoutCallElements pLayoutCall;
	private final LayoutRefElements pLayoutRef;
	private final EmitEventElements pEmitEvent;
	private final MoniLoggerCallElements pMoniLoggerCall;
	private final StreamEventElements pStreamEvent;
	private final EmptyOrPropertyValueElements pEmptyOrPropertyValue;
	private final ExpressionElements pExpression;
	private final ParameterReferenceElements pParameterReference;
	private final LanguageExpressionElements pLanguageExpression;
	private final MoniLoggerAnnotationElements eMoniLoggerAnnotation;
	private final AppenderAnnotationElements eAppenderAnnotation;
	private final LogLevelElements eLogLevel;
	private final TemporalPatternKindElements eTemporalPatternKind;
	private final FQNElements pFQN;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MoniLog4DSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDocument = new DocumentElements();
		this.pAppender = new AppenderElements();
		this.pLocalAppender = new LocalAppenderElements();
		this.pExternalAppender = new ExternalAppenderElements();
		this.pLayout = new LayoutElements();
		this.pLocalLayout = new LocalLayoutElements();
		this.pExternalLayout = new ExternalLayoutElements();
		this.pMoniLogger = new MoniLoggerElements();
		this.pParameter = new ParameterElements();
		this.pEvent = new EventElements();
		this.pASTEvent = new ASTEventElements();
		this.pComplexEvent = new ComplexEventElements();
		this.pUserEvent = new UserEventElements();
		this.pCondition = new ConditionElements();
		this.pTemporalPattern = new TemporalPatternElements();
		this.pPattern = new PatternElements();
		this.pBoundType = new BoundTypeElements();
		this.pExactBound = new ExactBoundElements();
		this.pLowerBound = new LowerBoundElements();
		this.pUpperBound = new UpperBoundElements();
		this.pScope = new ScopeElements();
		this.pAction = new ActionElements();
		this.pAppenderCall = new AppenderCallElements();
		this.pAppenderRef = new AppenderRefElements();
		this.pAppenderCallArgument = new AppenderCallArgumentElements();
		this.pLayoutCall = new LayoutCallElements();
		this.pLayoutRef = new LayoutRefElements();
		this.pEmitEvent = new EmitEventElements();
		this.pMoniLoggerCall = new MoniLoggerCallElements();
		this.pStreamEvent = new StreamEventElements();
		this.pEmptyOrPropertyValue = new EmptyOrPropertyValueElements();
		this.pExpression = new ExpressionElements();
		this.pParameterReference = new ParameterReferenceElements();
		this.pLanguageExpression = new LanguageExpressionElements();
		this.eMoniLoggerAnnotation = new MoniLoggerAnnotationElements();
		this.eAppenderAnnotation = new AppenderAnnotationElements();
		this.eLogLevel = new LogLevelElements();
		this.eTemporalPatternKind = new TemporalPatternKindElements();
		this.pFQN = new FQNElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.gemoc.monilog.MoniLog4DSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Document:
	//	('default-language' defaultLanguageID=(ID | STRING))? (events+=Event* & appenders+=Appender* & layouts+=Layout* &
	//	moniLogSpecs+=MoniLogger*);
	public DocumentElements getDocumentAccess() {
		return pDocument;
	}
	
	public ParserRule getDocumentRule() {
		return getDocumentAccess().getRule();
	}
	
	//@Exported
	//Appender:
	//	LocalAppender | ExternalAppender;
	public AppenderElements getAppenderAccess() {
		return pAppender;
	}
	
	public ParserRule getAppenderRule() {
		return getAppenderAccess().getRule();
	}
	
	//LocalAppender:
	//	annotations+=AppenderAnnotation*
	//	'appender' name=ID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')? '{'
	//	calls+=AppenderCall (';' calls+=AppenderCall)*
	//	'}';
	public LocalAppenderElements getLocalAppenderAccess() {
		return pLocalAppender;
	}
	
	public ParserRule getLocalAppenderRule() {
		return getLocalAppenderAccess().getRule();
	}
	
	//ExternalAppender:
	//	'appender' name=FQN ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')?;
	public ExternalAppenderElements getExternalAppenderAccess() {
		return pExternalAppender;
	}
	
	public ParserRule getExternalAppenderRule() {
		return getExternalAppenderAccess().getRule();
	}
	
	//Layout:
	//	LocalLayout | ExternalLayout;
	public LayoutElements getLayoutAccess() {
		return pLayout;
	}
	
	public ParserRule getLayoutRule() {
		return getLayoutAccess().getRule();
	}
	
	//@Exported
	//LocalLayout:
	//	'layout' name=ID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')? '{'
	//	call=LayoutCall
	//	'}';
	public LocalLayoutElements getLocalLayoutAccess() {
		return pLocalLayout;
	}
	
	public ParserRule getLocalLayoutRule() {
		return getLocalLayoutAccess().getRule();
	}
	
	//@Exported
	//ExternalLayout:
	//	'layout' name=FQN ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')?;
	public ExternalLayoutElements getExternalLayoutAccess() {
		return pExternalLayout;
	}
	
	public ParserRule getExternalLayoutRule() {
		return getExternalLayoutAccess().getRule();
	}
	
	//@Exported
	//MoniLogger:
	//	annotations+=MoniLoggerAnnotation*
	//	'monilogger' name=ID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')? ('[' level=LogLevel ']')? '{'
	//	'event' event=[Event] ('conditions' '{' conditions+=Condition (';' conditions+=Condition)* '}')?
	//	'actions' '{' actions+=Action (';' actions+=Action)* '}'
	//	'}';
	public MoniLoggerElements getMoniLoggerAccess() {
		return pMoniLogger;
	}
	
	public ParserRule getMoniLoggerRule() {
		return getMoniLoggerAccess().getRule();
	}
	
	//Parameter:
	//	name=ID;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Event:
	//	ASTEvent | ComplexEvent | UserEvent;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//@Exported
	//ASTEvent:
	//	'ast' name=ID '{' (before?='before'? & after?='after'?) ruleID=ID
	//	'}';
	public ASTEventElements getASTEventAccess() {
		return pASTEvent;
	}
	
	public ParserRule getASTEventRule() {
		return getASTEventAccess().getRule();
	}
	
	//@Exported
	//ComplexEvent:
	//	'complex' name=ID ('[' kind=TemporalPatternKind ']')? '{'
	//	pattern=TemporalPattern
	//	'}';
	public ComplexEventElements getComplexEventAccess() {
		return pComplexEvent;
	}
	
	public ParserRule getComplexEventRule() {
		return getComplexEventAccess().getRule();
	}
	
	//@Exported
	//UserEvent:
	//	'custom' name=ID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')?;
	public UserEventElements getUserEventAccess() {
		return pUserEvent;
	}
	
	public ParserRule getUserEventRule() {
		return getUserEventAccess().getRule();
	}
	
	//Condition:
	//	{LanguageExpressionCondition} expression=LanguageExpression;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//TemporalPattern:
	//	pattern=Pattern scope=Scope;
	public TemporalPatternElements getTemporalPatternAccess() {
		return pTemporalPattern;
	}
	
	public ParserRule getTemporalPatternRule() {
		return getTemporalPatternAccess().getRule();
	}
	
	//Pattern:
	//	{Existence} 'exists'? bound=BoundType? event=StreamEvent | {Universality} 'always' event=StreamEvent | {Absence}
	//	'never' event=StreamEvent | {Precedence} predecessor=StreamEvent 'precedes' successor=StreamEvent | {Response}
	//	event=StreamEvent 'respondsTo' trigger=StreamEvent;
	public PatternElements getPatternAccess() {
		return pPattern;
	}
	
	public ParserRule getPatternRule() {
		return getPatternAccess().getRule();
	}
	
	//BoundType:
	//	ExactBound | LowerBound | UpperBound;
	public BoundTypeElements getBoundTypeAccess() {
		return pBoundType;
	}
	
	public ParserRule getBoundTypeRule() {
		return getBoundTypeAccess().getRule();
	}
	
	//ExactBound:
	//	n=INT;
	public ExactBoundElements getExactBoundAccess() {
		return pExactBound;
	}
	
	public ParserRule getExactBoundRule() {
		return getExactBoundAccess().getRule();
	}
	
	//LowerBound:
	//	'atleast' n=INT;
	public LowerBoundElements getLowerBoundAccess() {
		return pLowerBound;
	}
	
	public ParserRule getLowerBoundRule() {
		return getLowerBoundAccess().getRule();
	}
	
	//UpperBound:
	//	'atmost' n=INT;
	public UpperBoundElements getUpperBoundAccess() {
		return pUpperBound;
	}
	
	public ParserRule getUpperBoundRule() {
		return getUpperBoundAccess().getRule();
	}
	
	//Scope:
	//	{Globally} 'globally'? | {After} 'after' lowerBound=StreamEvent | {Before} 'before' upperBound=StreamEvent | {Between}
	//	'between' lowerBound=StreamEvent 'and' upperBound=StreamEvent | {AfterUntil} 'after' lowerBound=StreamEvent 'until'
	//	upperBound=StreamEvent;
	public ScopeElements getScopeAccess() {
		return pScope;
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}
	
	//Action:
	//	LanguageExpression | AppenderCall | EmitEvent | MoniLoggerCall;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//AppenderCall:
	//	appender=AppenderRef '.' 'call' ('(' args+=AppenderCallArgument (',' args+=AppenderCallArgument)* ')')?;
	public AppenderCallElements getAppenderCallAccess() {
		return pAppenderCall;
	}
	
	public ParserRule getAppenderCallRule() {
		return getAppenderCallAccess().getRule();
	}
	
	//AppenderRef:
	//	appender=[Appender|FQN];
	public AppenderRefElements getAppenderRefAccess() {
		return pAppenderRef;
	}
	
	public ParserRule getAppenderRefRule() {
		return getAppenderRefAccess().getRule();
	}
	
	//AppenderCallArgument:
	//	Expression | LayoutCall;
	public AppenderCallArgumentElements getAppenderCallArgumentAccess() {
		return pAppenderCallArgument;
	}
	
	public ParserRule getAppenderCallArgumentRule() {
		return getAppenderCallArgumentAccess().getRule();
	}
	
	//LayoutCall:
	//	layout=LayoutRef '.' 'call' ('(' args+=Expression (',' args+=Expression)* ')')?;
	public LayoutCallElements getLayoutCallAccess() {
		return pLayoutCall;
	}
	
	public ParserRule getLayoutCallRule() {
		return getLayoutCallAccess().getRule();
	}
	
	//LayoutRef:
	//	layout=[Layout|FQN];
	public LayoutRefElements getLayoutRefAccess() {
		return pLayoutRef;
	}
	
	public ParserRule getLayoutRefRule() {
		return getLayoutRefAccess().getRule();
	}
	
	//EmitEvent:
	//	event=[Event] '.' 'emit' ('(' args+=Expression (',' args+=Expression)* ')')?;
	public EmitEventElements getEmitEventAccess() {
		return pEmitEvent;
	}
	
	public ParserRule getEmitEventRule() {
		return getEmitEventAccess().getRule();
	}
	
	//MoniLoggerCall:
	//	{StartMoniLogger} monilogger=[MoniLogger] '.' 'start' ('(' args+=Expression (',' args+=Expression)* ')')? |
	//	{StopMoniLogger} monilogger=[MoniLogger] '.' 'stop';
	public MoniLoggerCallElements getMoniLoggerCallAccess() {
		return pMoniLoggerCall;
	}
	
	public ParserRule getMoniLoggerCallRule() {
		return getMoniLoggerCallAccess().getRule();
	}
	
	//StreamEvent:
	//	event=[Event] ('[' values+=EmptyOrPropertyValue (',' values+=EmptyOrPropertyValue)* ']')?;
	public StreamEventElements getStreamEventAccess() {
		return pStreamEvent;
	}
	
	public ParserRule getStreamEventRule() {
		return getStreamEventAccess().getRule();
	}
	
	//EmptyOrPropertyValue:
	//	{Empty} | {PropertyValue} id=ID ('=' value=Expression)?;
	public EmptyOrPropertyValueElements getEmptyOrPropertyValueAccess() {
		return pEmptyOrPropertyValue;
	}
	
	public ParserRule getEmptyOrPropertyValueRule() {
		return getEmptyOrPropertyValueAccess().getRule();
	}
	
	//Expression:
	//	ParameterReference | LanguageExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//ParameterReference:
	//	parameter=[Parameter];
	public ParameterReferenceElements getParameterReferenceAccess() {
		return pParameterReference;
	}
	
	public ParserRule getParameterReferenceRule() {
		return getParameterReferenceAccess().getRule();
	}
	
	//LanguageExpression:
	//	{ExplicitLanguageExpression} languageId=ID '(' expression=STRING ')' | {DefaultLanguageExpression} expression=STRING;
	public LanguageExpressionElements getLanguageExpressionAccess() {
		return pLanguageExpression;
	}
	
	public ParserRule getLanguageExpressionRule() {
		return getLanguageExpressionAccess().getRule();
	}
	
	//enum MoniLoggerAnnotation:
	//	inactive='@Inactive';
	public MoniLoggerAnnotationElements getMoniLoggerAnnotationAccess() {
		return eMoniLoggerAnnotation;
	}
	
	public EnumRule getMoniLoggerAnnotationRule() {
		return getMoniLoggerAnnotationAccess().getRule();
	}
	
	//enum AppenderAnnotation:
	//	async='@Async';
	public AppenderAnnotationElements getAppenderAnnotationAccess() {
		return eAppenderAnnotation;
	}
	
	public EnumRule getAppenderAnnotationRule() {
		return getAppenderAnnotationAccess().getRule();
	}
	
	//enum LogLevel:
	//	info='INFO' | config='CONFIG' | fine='FINE' | finer='FINER' |
	//	finest='FINEST' | severe='SEVERE' | warning='WARNING';
	public LogLevelElements getLogLevelAccess() {
		return eLogLevel;
	}
	
	public EnumRule getLogLevelRule() {
		return getLogLevelAccess().getRule();
	}
	
	//enum TemporalPatternKind:
	//	s='S' | v='V' | nS | nV;
	public TemporalPatternKindElements getTemporalPatternKindAccess() {
		return eTemporalPatternKind;
	}
	
	public EnumRule getTemporalPatternKindRule() {
		return getTemporalPatternKindAccess().getRule();
	}
	
	//FQN:
	//	ID ('.' ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
