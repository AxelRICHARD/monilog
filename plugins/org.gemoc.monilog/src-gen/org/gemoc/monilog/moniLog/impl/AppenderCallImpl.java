/**
 * generated by Xtext 2.21.0
 */
package org.gemoc.monilog.moniLog.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.gemoc.monilog.moniLog.Appender;
import org.gemoc.monilog.moniLog.AppenderCall;
import org.gemoc.monilog.moniLog.CallArgument;
import org.gemoc.monilog.moniLog.MoniLogPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Appender Call</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.gemoc.monilog.moniLog.impl.AppenderCallImpl#getAppender <em>Appender</em>}</li>
 *   <li>{@link org.gemoc.monilog.moniLog.impl.AppenderCallImpl#getArgs <em>Args</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AppenderCallImpl extends ActionImpl implements AppenderCall
{
  /**
   * The cached value of the '{@link #getAppender() <em>Appender</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAppender()
   * @generated
   * @ordered
   */
  protected Appender appender;

  /**
   * The cached value of the '{@link #getArgs() <em>Args</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArgs()
   * @generated
   * @ordered
   */
  protected EList<CallArgument> args;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AppenderCallImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MoniLogPackage.Literals.APPENDER_CALL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Appender getAppender()
  {
    if (appender != null && appender.eIsProxy())
    {
      InternalEObject oldAppender = (InternalEObject)appender;
      appender = (Appender)eResolveProxy(oldAppender);
      if (appender != oldAppender)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MoniLogPackage.APPENDER_CALL__APPENDER, oldAppender, appender));
      }
    }
    return appender;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Appender basicGetAppender()
  {
    return appender;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAppender(Appender newAppender)
  {
    Appender oldAppender = appender;
    appender = newAppender;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MoniLogPackage.APPENDER_CALL__APPENDER, oldAppender, appender));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<CallArgument> getArgs()
  {
    if (args == null)
    {
      args = new EObjectContainmentEList<CallArgument>(CallArgument.class, this, MoniLogPackage.APPENDER_CALL__ARGS);
    }
    return args;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MoniLogPackage.APPENDER_CALL__ARGS:
        return ((InternalEList<?>)getArgs()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MoniLogPackage.APPENDER_CALL__APPENDER:
        if (resolve) return getAppender();
        return basicGetAppender();
      case MoniLogPackage.APPENDER_CALL__ARGS:
        return getArgs();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MoniLogPackage.APPENDER_CALL__APPENDER:
        setAppender((Appender)newValue);
        return;
      case MoniLogPackage.APPENDER_CALL__ARGS:
        getArgs().clear();
        getArgs().addAll((Collection<? extends CallArgument>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MoniLogPackage.APPENDER_CALL__APPENDER:
        setAppender((Appender)null);
        return;
      case MoniLogPackage.APPENDER_CALL__ARGS:
        getArgs().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MoniLogPackage.APPENDER_CALL__APPENDER:
        return appender != null;
      case MoniLogPackage.APPENDER_CALL__ARGS:
        return args != null && !args.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //AppenderCallImpl
