/*
 * generated by Xtext 2.21.0
 */
grammar InternalMoniLog;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package org.gemoc.monilog.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.gemoc.monilog.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.IUnorderedGroupHelper.UnorderedGroupState;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.gemoc.monilog.services.MoniLogGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private MoniLogGrammarAccess grammarAccess;

    public InternalMoniLogParser(TokenStream input, MoniLogGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Document";
   	}

   	@Override
   	protected MoniLogGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDocument
entryRuleDocument returns [EObject current=null]@init {
	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
	grammarAccess.getDocumentAccess().getUnorderedGroup_3()
	);
}:
	{ newCompositeNode(grammarAccess.getDocumentRule()); }
	iv_ruleDocument=ruleDocument
	{ $current=$iv_ruleDocument.current; }
	EOF;
finally {
	myUnorderedGroupState.restore();
}

// Rule Document
ruleDocument returns [EObject current=null]
@init {
	enterRule();
	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
	grammarAccess.getDocumentAccess().getUnorderedGroup_3()
	);
}
@after {
	leaveRule();
}:
	(
		otherlv_0='package'
		{
			newLeafNode(otherlv_0, grammarAccess.getDocumentAccess().getPackageKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDocumentAccess().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDocumentRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.gemoc.monilog.MoniLog.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDocumentAccess().getImportsImportParserRuleCall_2_0());
				}
				lv_imports_2_0=ruleImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDocumentRule());
					}
					add(
						$current,
						"imports",
						lv_imports_2_0,
						"org.gemoc.monilog.MoniLog.Import");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{ 
				  getUnorderedGroupHelper().enter(grammarAccess.getDocumentAccess().getUnorderedGroup_3());
				}
				(
					(
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getDocumentAccess().getUnorderedGroup_3(), 0)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getDocumentAccess().getUnorderedGroup_3(), 0);
					}
								({true}?=>((
									{
										newCompositeNode(grammarAccess.getDocumentAccess().getEventsEventParserRuleCall_3_0_0());
									}
									lv_events_4_0=ruleEvent
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getDocumentRule());
										}
										add(
											$current,
											"events",
											lv_events_4_0,
											"org.gemoc.monilog.MoniLog.Event");
										afterParserOrEnumRuleCall();
									}
								)
								))+
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getDocumentAccess().getUnorderedGroup_3());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getDocumentAccess().getUnorderedGroup_3(), 1)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getDocumentAccess().getUnorderedGroup_3(), 1);
					}
								({true}?=>((
									{
										newCompositeNode(grammarAccess.getDocumentAccess().getAppendersAppenderParserRuleCall_3_1_0());
									}
									lv_appenders_5_0=ruleAppender
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getDocumentRule());
										}
										add(
											$current,
											"appenders",
											lv_appenders_5_0,
											"org.gemoc.monilog.MoniLog.Appender");
										afterParserOrEnumRuleCall();
									}
								)
								))+
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getDocumentAccess().getUnorderedGroup_3());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getDocumentAccess().getUnorderedGroup_3(), 2)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getDocumentAccess().getUnorderedGroup_3(), 2);
					}
								({true}?=>((
									{
										newCompositeNode(grammarAccess.getDocumentAccess().getLayoutsLayoutParserRuleCall_3_2_0());
									}
									lv_layouts_6_0=ruleLayout
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getDocumentRule());
										}
										add(
											$current,
											"layouts",
											lv_layouts_6_0,
											"org.gemoc.monilog.MoniLog.Layout");
										afterParserOrEnumRuleCall();
									}
								)
								))+
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getDocumentAccess().getUnorderedGroup_3());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getDocumentAccess().getUnorderedGroup_3(), 3)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getDocumentAccess().getUnorderedGroup_3(), 3);
					}
								({true}?=>((
									{
										newCompositeNode(grammarAccess.getDocumentAccess().getMoniloggersMoniLoggerParserRuleCall_3_3_0());
									}
									lv_moniloggers_7_0=ruleMoniLogger
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getDocumentRule());
										}
										add(
											$current,
											"moniloggers",
											lv_moniloggers_7_0,
											"org.gemoc.monilog.MoniLog.MoniLogger");
										afterParserOrEnumRuleCall();
									}
								)
								))+
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getDocumentAccess().getUnorderedGroup_3());
					}
				)
			)
					)*
				)
			)
				{ 
				  getUnorderedGroupHelper().leave(grammarAccess.getDocumentAccess().getUnorderedGroup_3());
				}
		)
	)
;
finally {
	myUnorderedGroupState.restore();
}

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='import'
			{
				newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_0_1_0());
					}
					lv_importedNamespace_1_0=ruleQualifiedNameWithWildcard
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImportRule());
						}
						set(
							$current,
							"importedNamespace",
							lv_importedNamespace_1_0,
							"org.gemoc.monilog.MoniLog.QualifiedNameWithWildcard");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_2='import'
			{
				newLeafNode(otherlv_2, grammarAccess.getImportAccess().getImportKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getImportAccess().getAliasFileAliasParserRuleCall_1_1_0());
					}
					lv_alias_3_0=ruleFileAlias
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImportRule());
						}
						set(
							$current,
							"alias",
							lv_alias_3_0,
							"org.gemoc.monilog.MoniLog.FileAlias");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleFileAlias
entryRuleFileAlias returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFileAliasRule()); }
	iv_ruleFileAlias=ruleFileAlias
	{ $current=$iv_ruleFileAlias.current; }
	EOF;

// Rule FileAlias
ruleFileAlias returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_filePath_0_0=RULE_STRING
				{
					newLeafNode(lv_filePath_0_0, grammarAccess.getFileAliasAccess().getFilePathSTRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFileAliasRule());
					}
					setWithLastConsumed(
						$current,
						"filePath",
						lv_filePath_0_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_1='as'
		{
			newLeafNode(otherlv_1, grammarAccess.getFileAliasAccess().getAsKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getFileAliasAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFileAliasRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleAppender
entryRuleAppender returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAppenderRule()); }
	iv_ruleAppender=ruleAppender
	{ $current=$iv_ruleAppender.current; }
	EOF;

// Rule Appender
ruleAppender returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAppenderAccess().getLocalAppenderParserRuleCall_0());
		}
		this_LocalAppender_0=ruleLocalAppender
		{
			$current = $this_LocalAppender_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAppenderAccess().getExternalAppenderParserRuleCall_1());
		}
		this_ExternalAppender_1=ruleExternalAppender
		{
			$current = $this_ExternalAppender_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLocalAppender
entryRuleLocalAppender returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLocalAppenderRule()); }
	iv_ruleLocalAppender=ruleLocalAppender
	{ $current=$iv_ruleLocalAppender.current; }
	EOF;

// Rule LocalAppender
ruleLocalAppender returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLocalAppenderAccess().getAnnotationsAppenderAnnotationEnumRuleCall_0_0());
				}
				lv_annotations_0_0=ruleAppenderAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLocalAppenderRule());
					}
					add(
						$current,
						"annotations",
						lv_annotations_0_0,
						"org.gemoc.monilog.MoniLog.AppenderAnnotation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_1='appender'
		{
			newLeafNode(otherlv_1, grammarAccess.getLocalAppenderAccess().getAppenderKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getLocalAppenderAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLocalAppenderRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getLocalAppenderAccess().getLeftParenthesisKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLocalAppenderAccess().getParameterDeclParameterDeclVarArgsParserRuleCall_3_1_0());
					}
					lv_parameterDecl_4_0=ruleParameterDeclVarArgs
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLocalAppenderRule());
						}
						set(
							$current,
							"parameterDecl",
							lv_parameterDecl_4_0,
							"org.gemoc.monilog.MoniLog.ParameterDeclVarArgs");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getLocalAppenderAccess().getRightParenthesisKeyword_3_2());
			}
		)?
		otherlv_6='{'
		{
			newLeafNode(otherlv_6, grammarAccess.getLocalAppenderAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLocalAppenderAccess().getCallsAppenderCallParserRuleCall_5_0());
				}
				lv_calls_7_0=ruleAppenderCall
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLocalAppenderRule());
					}
					add(
						$current,
						"calls",
						lv_calls_7_0,
						"org.gemoc.monilog.MoniLog.AppenderCall");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_8=';'
			{
				newLeafNode(otherlv_8, grammarAccess.getLocalAppenderAccess().getSemicolonKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLocalAppenderAccess().getCallsAppenderCallParserRuleCall_6_1_0());
					}
					lv_calls_9_0=ruleAppenderCall
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLocalAppenderRule());
						}
						add(
							$current,
							"calls",
							lv_calls_9_0,
							"org.gemoc.monilog.MoniLog.AppenderCall");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_10=';'
			{
				newLeafNode(otherlv_10, grammarAccess.getLocalAppenderAccess().getSemicolonKeyword_7());
			}
		)?
		otherlv_11='}'
		{
			newLeafNode(otherlv_11, grammarAccess.getLocalAppenderAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleExternalAppender
entryRuleExternalAppender returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExternalAppenderRule()); }
	iv_ruleExternalAppender=ruleExternalAppender
	{ $current=$iv_ruleExternalAppender.current; }
	EOF;

// Rule ExternalAppender
ruleExternalAppender returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='appender'
		{
			newLeafNode(otherlv_0, grammarAccess.getExternalAppenderAccess().getAppenderKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getExternalAppenderAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExternalAppenderRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getExternalAppenderAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExternalAppenderAccess().getParameterDeclParameterDeclVarArgsParserRuleCall_2_1_0());
					}
					lv_parameterDecl_3_0=ruleParameterDeclVarArgs
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExternalAppenderRule());
						}
						set(
							$current,
							"parameterDecl",
							lv_parameterDecl_3_0,
							"org.gemoc.monilog.MoniLog.ParameterDeclVarArgs");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getExternalAppenderAccess().getRightParenthesisKeyword_2_2());
			}
		)?
	)
;

// Entry rule entryRuleLayout
entryRuleLayout returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLayoutRule()); }
	iv_ruleLayout=ruleLayout
	{ $current=$iv_ruleLayout.current; }
	EOF;

// Rule Layout
ruleLayout returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getLayoutAccess().getLocalLayoutParserRuleCall_0());
		}
		this_LocalLayout_0=ruleLocalLayout
		{
			$current = $this_LocalLayout_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getLayoutAccess().getExternalLayoutParserRuleCall_1());
		}
		this_ExternalLayout_1=ruleExternalLayout
		{
			$current = $this_ExternalLayout_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLocalLayout
entryRuleLocalLayout returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLocalLayoutRule()); }
	iv_ruleLocalLayout=ruleLocalLayout
	{ $current=$iv_ruleLocalLayout.current; }
	EOF;

// Rule LocalLayout
ruleLocalLayout returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='layout'
		{
			newLeafNode(otherlv_0, grammarAccess.getLocalLayoutAccess().getLayoutKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getLocalLayoutAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLocalLayoutRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getLocalLayoutAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLocalLayoutAccess().getParameterDeclParameterDeclVarArgsParserRuleCall_2_1_0());
					}
					lv_parameterDecl_3_0=ruleParameterDeclVarArgs
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLocalLayoutRule());
						}
						set(
							$current,
							"parameterDecl",
							lv_parameterDecl_3_0,
							"org.gemoc.monilog.MoniLog.ParameterDeclVarArgs");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getLocalLayoutAccess().getRightParenthesisKeyword_2_2());
			}
		)?
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getLocalLayoutAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLocalLayoutAccess().getCallLayoutCallParserRuleCall_4_0());
				}
				lv_call_6_0=ruleLayoutCall
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLocalLayoutRule());
					}
					set(
						$current,
						"call",
						lv_call_6_0,
						"org.gemoc.monilog.MoniLog.LayoutCall");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getLocalLayoutAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleExternalLayout
entryRuleExternalLayout returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExternalLayoutRule()); }
	iv_ruleExternalLayout=ruleExternalLayout
	{ $current=$iv_ruleExternalLayout.current; }
	EOF;

// Rule ExternalLayout
ruleExternalLayout returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='layout'
		{
			newLeafNode(otherlv_0, grammarAccess.getExternalLayoutAccess().getLayoutKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getExternalLayoutAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExternalLayoutRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getExternalLayoutAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExternalLayoutAccess().getParameterDeclParameterDeclVarArgsParserRuleCall_2_1_0());
					}
					lv_parameterDecl_3_0=ruleParameterDeclVarArgs
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExternalLayoutRule());
						}
						set(
							$current,
							"parameterDecl",
							lv_parameterDecl_3_0,
							"org.gemoc.monilog.MoniLog.ParameterDeclVarArgs");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getExternalLayoutAccess().getRightParenthesisKeyword_2_2());
			}
		)?
	)
;

// Entry rule entryRuleParameterDeclVarArgs
entryRuleParameterDeclVarArgs returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterDeclVarArgsRule()); }
	iv_ruleParameterDeclVarArgs=ruleParameterDeclVarArgs
	{ $current=$iv_ruleParameterDeclVarArgs.current; }
	EOF;

// Rule ParameterDeclVarArgs
ruleParameterDeclVarArgs returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getParameterDeclVarArgsAccess().getParameterDeclAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterDeclVarArgsAccess().getParametersParameterParserRuleCall_1_0_0());
					}
					lv_parameters_1_0=ruleParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterDeclVarArgsRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_1_0,
							"org.gemoc.monilog.MoniLog.Parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getParameterDeclVarArgsAccess().getCommaKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getParameterDeclVarArgsAccess().getParametersParameterParserRuleCall_1_1_1_0());
						}
						lv_parameters_3_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getParameterDeclVarArgsRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_3_0,
								"org.gemoc.monilog.MoniLog.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getParameterDeclVarArgsAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getParameterDeclVarArgsAccess().getVarArgsParameterParserRuleCall_1_2_1_0());
						}
						lv_varArgs_5_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getParameterDeclVarArgsRule());
							}
							set(
								$current,
								"varArgs",
								lv_varArgs_5_0,
								"org.gemoc.monilog.MoniLog.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_6='...'
				{
					newLeafNode(otherlv_6, grammarAccess.getParameterDeclVarArgsAccess().getFullStopFullStopFullStopKeyword_1_2_2());
				}
			)?
		)?
	)
;

// Entry rule entryRuleParameterDeclNoVarArgs
entryRuleParameterDeclNoVarArgs returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterDeclNoVarArgsRule()); }
	iv_ruleParameterDeclNoVarArgs=ruleParameterDeclNoVarArgs
	{ $current=$iv_ruleParameterDeclNoVarArgs.current; }
	EOF;

// Rule ParameterDeclNoVarArgs
ruleParameterDeclNoVarArgs returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getParameterDeclNoVarArgsAccess().getParameterDeclAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterDeclNoVarArgsAccess().getParametersParameterParserRuleCall_1_0_0());
					}
					lv_parameters_1_0=ruleParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterDeclNoVarArgsRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_1_0,
							"org.gemoc.monilog.MoniLog.Parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getParameterDeclNoVarArgsAccess().getCommaKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getParameterDeclNoVarArgsAccess().getParametersParameterParserRuleCall_1_1_1_0());
						}
						lv_parameters_3_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getParameterDeclNoVarArgsRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_3_0,
								"org.gemoc.monilog.MoniLog.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleMoniLogger
entryRuleMoniLogger returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoniLoggerRule()); }
	iv_ruleMoniLogger=ruleMoniLogger
	{ $current=$iv_ruleMoniLogger.current; }
	EOF;

// Rule MoniLogger
ruleMoniLogger returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMoniLoggerAccess().getAnnotationsMoniLoggerAnnotationEnumRuleCall_0_0());
				}
				lv_annotations_0_0=ruleMoniLoggerAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMoniLoggerRule());
					}
					add(
						$current,
						"annotations",
						lv_annotations_0_0,
						"org.gemoc.monilog.MoniLog.MoniLoggerAnnotation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_1='monilogger'
		{
			newLeafNode(otherlv_1, grammarAccess.getMoniLoggerAccess().getMoniloggerKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getMoniLoggerAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMoniLoggerRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getMoniLoggerAccess().getLeftParenthesisKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMoniLoggerAccess().getParameterDeclParameterDeclVarArgsParserRuleCall_3_1_0());
					}
					lv_parameterDecl_4_0=ruleParameterDeclVarArgs
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMoniLoggerRule());
						}
						set(
							$current,
							"parameterDecl",
							lv_parameterDecl_4_0,
							"org.gemoc.monilog.MoniLog.ParameterDeclVarArgs");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getMoniLoggerAccess().getRightParenthesisKeyword_3_2());
			}
		)?
		(
			otherlv_6='['
			{
				newLeafNode(otherlv_6, grammarAccess.getMoniLoggerAccess().getLeftSquareBracketKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMoniLoggerAccess().getLevelLogLevelEnumRuleCall_4_1_0());
					}
					lv_level_7_0=ruleLogLevel
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMoniLoggerRule());
						}
						set(
							$current,
							"level",
							lv_level_7_0,
							"org.gemoc.monilog.MoniLog.LogLevel");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_8=']'
			{
				newLeafNode(otherlv_8, grammarAccess.getMoniLoggerAccess().getRightSquareBracketKeyword_4_2());
			}
		)?
		otherlv_9='{'
		{
			newLeafNode(otherlv_9, grammarAccess.getMoniLoggerAccess().getLeftCurlyBracketKeyword_5());
		}
		otherlv_10='event'
		{
			newLeafNode(otherlv_10, grammarAccess.getMoniLoggerAccess().getEventKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMoniLoggerAccess().getStreamEventStreamEventParserRuleCall_7_0());
				}
				lv_streamEvent_11_0=ruleStreamEvent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMoniLoggerRule());
					}
					set(
						$current,
						"streamEvent",
						lv_streamEvent_11_0,
						"org.gemoc.monilog.MoniLog.StreamEvent");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_12='conditions'
			{
				newLeafNode(otherlv_12, grammarAccess.getMoniLoggerAccess().getConditionsKeyword_8_0());
			}
			otherlv_13='{'
			{
				newLeafNode(otherlv_13, grammarAccess.getMoniLoggerAccess().getLeftCurlyBracketKeyword_8_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMoniLoggerAccess().getConditionsConditionParserRuleCall_8_2_0());
					}
					lv_conditions_14_0=ruleCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMoniLoggerRule());
						}
						add(
							$current,
							"conditions",
							lv_conditions_14_0,
							"org.gemoc.monilog.MoniLog.Condition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_15=';'
				{
					newLeafNode(otherlv_15, grammarAccess.getMoniLoggerAccess().getSemicolonKeyword_8_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMoniLoggerAccess().getConditionsConditionParserRuleCall_8_3_1_0());
						}
						lv_conditions_16_0=ruleCondition
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMoniLoggerRule());
							}
							add(
								$current,
								"conditions",
								lv_conditions_16_0,
								"org.gemoc.monilog.MoniLog.Condition");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			(
				otherlv_17=';'
				{
					newLeafNode(otherlv_17, grammarAccess.getMoniLoggerAccess().getSemicolonKeyword_8_4());
				}
			)?
			otherlv_18='}'
			{
				newLeafNode(otherlv_18, grammarAccess.getMoniLoggerAccess().getRightCurlyBracketKeyword_8_5());
			}
		)?
		otherlv_19='actions'
		{
			newLeafNode(otherlv_19, grammarAccess.getMoniLoggerAccess().getActionsKeyword_9());
		}
		otherlv_20='{'
		{
			newLeafNode(otherlv_20, grammarAccess.getMoniLoggerAccess().getLeftCurlyBracketKeyword_10());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMoniLoggerAccess().getActionsActionParserRuleCall_11_0());
				}
				lv_actions_21_0=ruleAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMoniLoggerRule());
					}
					add(
						$current,
						"actions",
						lv_actions_21_0,
						"org.gemoc.monilog.MoniLog.Action");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_22=';'
			{
				newLeafNode(otherlv_22, grammarAccess.getMoniLoggerAccess().getSemicolonKeyword_12_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMoniLoggerAccess().getActionsActionParserRuleCall_12_1_0());
					}
					lv_actions_23_0=ruleAction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMoniLoggerRule());
						}
						add(
							$current,
							"actions",
							lv_actions_23_0,
							"org.gemoc.monilog.MoniLog.Action");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_24=';'
			{
				newLeafNode(otherlv_24, grammarAccess.getMoniLoggerAccess().getSemicolonKeyword_13());
			}
		)?
		otherlv_25='}'
		{
			newLeafNode(otherlv_25, grammarAccess.getMoniLoggerAccess().getRightCurlyBracketKeyword_14());
		}
		otherlv_26='}'
		{
			newLeafNode(otherlv_26, grammarAccess.getMoniLoggerAccess().getRightCurlyBracketKeyword_15());
		}
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getParameterRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventRule()); }
	iv_ruleEvent=ruleEvent
	{ $current=$iv_ruleEvent.current; }
	EOF;

// Rule Event
ruleEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getEventAccess().getASTEventAction_0_0(),
						$current);
				}
			)
			otherlv_1='call'
			{
				newLeafNode(otherlv_1, grammarAccess.getEventAccess().getCallKeyword_0_1());
			}
			(
				(
					lv_name_2_0=RULE_ID
					{
						newLeafNode(lv_name_2_0, grammarAccess.getEventAccess().getNameIDTerminalRuleCall_0_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEventRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				otherlv_3='('
				{
					newLeafNode(otherlv_3, grammarAccess.getEventAccess().getLeftParenthesisKeyword_0_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getEventAccess().getParameterDeclParameterDeclNoVarArgsParserRuleCall_0_3_1_0());
						}
						lv_parameterDecl_4_0=ruleParameterDeclNoVarArgs
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getEventRule());
							}
							set(
								$current,
								"parameterDecl",
								lv_parameterDecl_4_0,
								"org.gemoc.monilog.MoniLog.ParameterDeclNoVarArgs");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_5=')'
				{
					newLeafNode(otherlv_5, grammarAccess.getEventAccess().getRightParenthesisKeyword_0_3_2());
				}
			)?
			otherlv_6='{'
			{
				newLeafNode(otherlv_6, grammarAccess.getEventAccess().getLeftCurlyBracketKeyword_0_4());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEventAccess().getKindASTEventKindParserRuleCall_0_5_0());
					}
					lv_kind_7_0=ruleASTEventKind
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEventRule());
						}
						set(
							$current,
							"kind",
							lv_kind_7_0,
							"org.gemoc.monilog.MoniLog.ASTEventKind");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_ruleID_8_0=RULE_ID
					{
						newLeafNode(lv_ruleID_8_0, grammarAccess.getEventAccess().getRuleIDIDTerminalRuleCall_0_6_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEventRule());
						}
						setWithLastConsumed(
							$current,
							"ruleID",
							lv_ruleID_8_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_9='}'
			{
				newLeafNode(otherlv_9, grammarAccess.getEventAccess().getRightCurlyBracketKeyword_0_7());
			}
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getEventAccess().getComplexEventAction_1_0(),
						$current);
				}
			)
			otherlv_11='complex'
			{
				newLeafNode(otherlv_11, grammarAccess.getEventAccess().getComplexKeyword_1_1());
			}
			(
				(
					lv_name_12_0=RULE_ID
					{
						newLeafNode(lv_name_12_0, grammarAccess.getEventAccess().getNameIDTerminalRuleCall_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEventRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_12_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				otherlv_13='['
				{
					newLeafNode(otherlv_13, grammarAccess.getEventAccess().getLeftSquareBracketKeyword_1_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getEventAccess().getKindTemporalPatternKindEnumRuleCall_1_3_1_0());
						}
						lv_kind_14_0=ruleTemporalPatternKind
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getEventRule());
							}
							set(
								$current,
								"kind",
								lv_kind_14_0,
								"org.gemoc.monilog.MoniLog.TemporalPatternKind");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_15=']'
				{
					newLeafNode(otherlv_15, grammarAccess.getEventAccess().getRightSquareBracketKeyword_1_3_2());
				}
			)?
			(
				otherlv_16='('
				{
					newLeafNode(otherlv_16, grammarAccess.getEventAccess().getLeftParenthesisKeyword_1_4_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getEventAccess().getParameterDeclParameterDeclNoVarArgsParserRuleCall_1_4_1_0());
						}
						lv_parameterDecl_17_0=ruleParameterDeclNoVarArgs
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getEventRule());
							}
							set(
								$current,
								"parameterDecl",
								lv_parameterDecl_17_0,
								"org.gemoc.monilog.MoniLog.ParameterDeclNoVarArgs");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_18=')'
				{
					newLeafNode(otherlv_18, grammarAccess.getEventAccess().getRightParenthesisKeyword_1_4_2());
				}
			)?
			otherlv_19='{'
			{
				newLeafNode(otherlv_19, grammarAccess.getEventAccess().getLeftCurlyBracketKeyword_1_5());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEventAccess().getPatternTemporalPatternParserRuleCall_1_6_0());
					}
					lv_pattern_20_0=ruleTemporalPattern
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEventRule());
						}
						set(
							$current,
							"pattern",
							lv_pattern_20_0,
							"org.gemoc.monilog.MoniLog.TemporalPattern");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_21='}'
			{
				newLeafNode(otherlv_21, grammarAccess.getEventAccess().getRightCurlyBracketKeyword_1_7());
			}
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getEventAccess().getUserEventAction_2_0(),
						$current);
				}
			)
			otherlv_23='custom'
			{
				newLeafNode(otherlv_23, grammarAccess.getEventAccess().getCustomKeyword_2_1());
			}
			(
				(
					lv_name_24_0=RULE_ID
					{
						newLeafNode(lv_name_24_0, grammarAccess.getEventAccess().getNameIDTerminalRuleCall_2_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEventRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_24_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				otherlv_25='('
				{
					newLeafNode(otherlv_25, grammarAccess.getEventAccess().getLeftParenthesisKeyword_2_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getEventAccess().getParameterDeclParameterDeclNoVarArgsParserRuleCall_2_3_1_0());
						}
						lv_parameterDecl_26_0=ruleParameterDeclNoVarArgs
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getEventRule());
							}
							set(
								$current,
								"parameterDecl",
								lv_parameterDecl_26_0,
								"org.gemoc.monilog.MoniLog.ParameterDeclNoVarArgs");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_27=')'
				{
					newLeafNode(otherlv_27, grammarAccess.getEventAccess().getRightParenthesisKeyword_2_3_2());
				}
			)?
		)
	)
;

// Entry rule entryRuleASTEventKind
entryRuleASTEventKind returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getASTEventKindRule()); }
	iv_ruleASTEventKind=ruleASTEventKind
	{ $current=$iv_ruleASTEventKind.current; }
	EOF;

// Rule ASTEventKind
ruleASTEventKind returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getASTEventKindAccess().getBeforeASTEventAction_0_0(),
						$current);
				}
			)
			otherlv_1='before'
			{
				newLeafNode(otherlv_1, grammarAccess.getASTEventKindAccess().getBeforeKeyword_0_1());
			}
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getASTEventKindAccess().getAfterASTEventAction_1_0(),
						$current);
				}
			)
			otherlv_3='after'
			{
				newLeafNode(otherlv_3, grammarAccess.getASTEventKindAccess().getAfterKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current; }
	EOF;

// Rule Condition
ruleCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getConditionAccess().getExpressionLanguageValueParserRuleCall_0());
			}
			lv_expression_0_0=ruleLanguageValue
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getConditionRule());
				}
				set(
					$current,
					"expression",
					lv_expression_0_0,
					"org.gemoc.monilog.MoniLog.LanguageValue");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleTemporalPattern
entryRuleTemporalPattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTemporalPatternRule()); }
	iv_ruleTemporalPattern=ruleTemporalPattern
	{ $current=$iv_ruleTemporalPattern.current; }
	EOF;

// Rule TemporalPattern
ruleTemporalPattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTemporalPatternAccess().getPatternPatternParserRuleCall_0_0());
				}
				lv_pattern_0_0=rulePattern
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTemporalPatternRule());
					}
					set(
						$current,
						"pattern",
						lv_pattern_0_0,
						"org.gemoc.monilog.MoniLog.Pattern");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTemporalPatternAccess().getScopeScopeParserRuleCall_1_0());
				}
				lv_scope_1_0=ruleScope
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTemporalPatternRule());
					}
					set(
						$current,
						"scope",
						lv_scope_1_0,
						"org.gemoc.monilog.MoniLog.Scope");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePattern
entryRulePattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternRule()); }
	iv_rulePattern=rulePattern
	{ $current=$iv_rulePattern.current; }
	EOF;

// Rule Pattern
rulePattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getPatternAccess().getExistenceAction_0_0(),
						$current);
				}
			)
			(
				otherlv_1='exists'
				{
					newLeafNode(otherlv_1, grammarAccess.getPatternAccess().getExistsKeyword_0_1());
				}
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getPatternAccess().getBoundBoundTypeParserRuleCall_0_2_0());
					}
					lv_bound_2_0=ruleBoundType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPatternRule());
						}
						set(
							$current,
							"bound",
							lv_bound_2_0,
							"org.gemoc.monilog.MoniLog.BoundType");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getPatternAccess().getEventStreamEventParserRuleCall_0_3_0());
					}
					lv_event_3_0=ruleStreamEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPatternRule());
						}
						set(
							$current,
							"event",
							lv_event_3_0,
							"org.gemoc.monilog.MoniLog.StreamEvent");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getPatternAccess().getUniversalityAction_1_0(),
						$current);
				}
			)
			otherlv_5='always'
			{
				newLeafNode(otherlv_5, grammarAccess.getPatternAccess().getAlwaysKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPatternAccess().getEventStreamEventParserRuleCall_1_2_0());
					}
					lv_event_6_0=ruleStreamEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPatternRule());
						}
						set(
							$current,
							"event",
							lv_event_6_0,
							"org.gemoc.monilog.MoniLog.StreamEvent");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getPatternAccess().getAbsenceAction_2_0(),
						$current);
				}
			)
			otherlv_8='never'
			{
				newLeafNode(otherlv_8, grammarAccess.getPatternAccess().getNeverKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPatternAccess().getEventStreamEventParserRuleCall_2_2_0());
					}
					lv_event_9_0=ruleStreamEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPatternRule());
						}
						set(
							$current,
							"event",
							lv_event_9_0,
							"org.gemoc.monilog.MoniLog.StreamEvent");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getPatternAccess().getPrecedenceAction_3_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPatternAccess().getPredecessorStreamEventParserRuleCall_3_1_0());
					}
					lv_predecessor_11_0=ruleStreamEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPatternRule());
						}
						set(
							$current,
							"predecessor",
							lv_predecessor_11_0,
							"org.gemoc.monilog.MoniLog.StreamEvent");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_12='precedes'
			{
				newLeafNode(otherlv_12, grammarAccess.getPatternAccess().getPrecedesKeyword_3_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPatternAccess().getSuccessorStreamEventParserRuleCall_3_3_0());
					}
					lv_successor_13_0=ruleStreamEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPatternRule());
						}
						set(
							$current,
							"successor",
							lv_successor_13_0,
							"org.gemoc.monilog.MoniLog.StreamEvent");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getPatternAccess().getResponseAction_4_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPatternAccess().getEventStreamEventParserRuleCall_4_1_0());
					}
					lv_event_15_0=ruleStreamEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPatternRule());
						}
						set(
							$current,
							"event",
							lv_event_15_0,
							"org.gemoc.monilog.MoniLog.StreamEvent");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_16='respondsTo'
			{
				newLeafNode(otherlv_16, grammarAccess.getPatternAccess().getRespondsToKeyword_4_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPatternAccess().getTriggerStreamEventParserRuleCall_4_3_0());
					}
					lv_trigger_17_0=ruleStreamEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPatternRule());
						}
						set(
							$current,
							"trigger",
							lv_trigger_17_0,
							"org.gemoc.monilog.MoniLog.StreamEvent");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleBoundType
entryRuleBoundType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoundTypeRule()); }
	iv_ruleBoundType=ruleBoundType
	{ $current=$iv_ruleBoundType.current; }
	EOF;

// Rule BoundType
ruleBoundType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBoundTypeAccess().getExactBoundParserRuleCall_0());
		}
		this_ExactBound_0=ruleExactBound
		{
			$current = $this_ExactBound_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBoundTypeAccess().getLowerBoundParserRuleCall_1());
		}
		this_LowerBound_1=ruleLowerBound
		{
			$current = $this_LowerBound_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBoundTypeAccess().getUpperBoundParserRuleCall_2());
		}
		this_UpperBound_2=ruleUpperBound
		{
			$current = $this_UpperBound_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExactBound
entryRuleExactBound returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExactBoundRule()); }
	iv_ruleExactBound=ruleExactBound
	{ $current=$iv_ruleExactBound.current; }
	EOF;

// Rule ExactBound
ruleExactBound returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_n_0_0=RULE_INT
			{
				newLeafNode(lv_n_0_0, grammarAccess.getExactBoundAccess().getNINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getExactBoundRule());
				}
				setWithLastConsumed(
					$current,
					"n",
					lv_n_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleLowerBound
entryRuleLowerBound returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLowerBoundRule()); }
	iv_ruleLowerBound=ruleLowerBound
	{ $current=$iv_ruleLowerBound.current; }
	EOF;

// Rule LowerBound
ruleLowerBound returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='atleast'
		{
			newLeafNode(otherlv_0, grammarAccess.getLowerBoundAccess().getAtleastKeyword_0());
		}
		(
			(
				lv_n_1_0=RULE_INT
				{
					newLeafNode(lv_n_1_0, grammarAccess.getLowerBoundAccess().getNINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLowerBoundRule());
					}
					setWithLastConsumed(
						$current,
						"n",
						lv_n_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleUpperBound
entryRuleUpperBound returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUpperBoundRule()); }
	iv_ruleUpperBound=ruleUpperBound
	{ $current=$iv_ruleUpperBound.current; }
	EOF;

// Rule UpperBound
ruleUpperBound returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='atmost'
		{
			newLeafNode(otherlv_0, grammarAccess.getUpperBoundAccess().getAtmostKeyword_0());
		}
		(
			(
				lv_n_1_0=RULE_INT
				{
					newLeafNode(lv_n_1_0, grammarAccess.getUpperBoundAccess().getNINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUpperBoundRule());
					}
					setWithLastConsumed(
						$current,
						"n",
						lv_n_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleScope
entryRuleScope returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScopeRule()); }
	iv_ruleScope=ruleScope
	{ $current=$iv_ruleScope.current; }
	EOF;

// Rule Scope
ruleScope returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getScopeAccess().getGloballyAction_0_0(),
						$current);
				}
			)
			(
				otherlv_1='globally'
				{
					newLeafNode(otherlv_1, grammarAccess.getScopeAccess().getGloballyKeyword_0_1());
				}
			)?
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getScopeAccess().getAfterAction_1_0(),
						$current);
				}
			)
			otherlv_3='after'
			{
				newLeafNode(otherlv_3, grammarAccess.getScopeAccess().getAfterKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getScopeAccess().getLowerBoundStreamEventParserRuleCall_1_2_0());
					}
					lv_lowerBound_4_0=ruleStreamEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getScopeRule());
						}
						set(
							$current,
							"lowerBound",
							lv_lowerBound_4_0,
							"org.gemoc.monilog.MoniLog.StreamEvent");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getScopeAccess().getBeforeAction_2_0(),
						$current);
				}
			)
			otherlv_6='before'
			{
				newLeafNode(otherlv_6, grammarAccess.getScopeAccess().getBeforeKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getScopeAccess().getUpperBoundStreamEventParserRuleCall_2_2_0());
					}
					lv_upperBound_7_0=ruleStreamEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getScopeRule());
						}
						set(
							$current,
							"upperBound",
							lv_upperBound_7_0,
							"org.gemoc.monilog.MoniLog.StreamEvent");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getScopeAccess().getBetweenAction_3_0(),
						$current);
				}
			)
			otherlv_9='between'
			{
				newLeafNode(otherlv_9, grammarAccess.getScopeAccess().getBetweenKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getScopeAccess().getLowerBoundStreamEventParserRuleCall_3_2_0());
					}
					lv_lowerBound_10_0=ruleStreamEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getScopeRule());
						}
						set(
							$current,
							"lowerBound",
							lv_lowerBound_10_0,
							"org.gemoc.monilog.MoniLog.StreamEvent");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_11='and'
			{
				newLeafNode(otherlv_11, grammarAccess.getScopeAccess().getAndKeyword_3_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getScopeAccess().getUpperBoundStreamEventParserRuleCall_3_4_0());
					}
					lv_upperBound_12_0=ruleStreamEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getScopeRule());
						}
						set(
							$current,
							"upperBound",
							lv_upperBound_12_0,
							"org.gemoc.monilog.MoniLog.StreamEvent");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getScopeAccess().getAfterUntilAction_4_0(),
						$current);
				}
			)
			otherlv_14='after'
			{
				newLeafNode(otherlv_14, grammarAccess.getScopeAccess().getAfterKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getScopeAccess().getLowerBoundStreamEventParserRuleCall_4_2_0());
					}
					lv_lowerBound_15_0=ruleStreamEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getScopeRule());
						}
						set(
							$current,
							"lowerBound",
							lv_lowerBound_15_0,
							"org.gemoc.monilog.MoniLog.StreamEvent");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_16='until'
			{
				newLeafNode(otherlv_16, grammarAccess.getScopeAccess().getUntilKeyword_4_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getScopeAccess().getUpperBoundStreamEventParserRuleCall_4_4_0());
					}
					lv_upperBound_17_0=ruleStreamEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getScopeRule());
						}
						set(
							$current,
							"upperBound",
							lv_upperBound_17_0,
							"org.gemoc.monilog.MoniLog.StreamEvent");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	iv_ruleAction=ruleAction
	{ $current=$iv_ruleAction.current; }
	EOF;

// Rule Action
ruleAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getActionAccess().getLanguageValueParserRuleCall_0());
		}
		this_LanguageValue_0=ruleLanguageValue
		{
			$current = $this_LanguageValue_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getActionAccess().getAppenderCallParserRuleCall_1());
		}
		this_AppenderCall_1=ruleAppenderCall
		{
			$current = $this_AppenderCall_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getActionAccess().getEmitEventParserRuleCall_2());
		}
		this_EmitEvent_2=ruleEmitEvent
		{
			$current = $this_EmitEvent_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getActionAccess().getSetVariableParserRuleCall_3());
		}
		this_SetVariable_3=ruleSetVariable
		{
			$current = $this_SetVariable_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getActionAccess().getMoniloggerCallParserRuleCall_4());
		}
		this_MoniloggerCall_4=ruleMoniloggerCall
		{
			$current = $this_MoniloggerCall_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAppenderCall
entryRuleAppenderCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAppenderCallRule()); }
	iv_ruleAppenderCall=ruleAppenderCall
	{ $current=$iv_ruleAppenderCall.current; }
	EOF;

// Rule AppenderCall
ruleAppenderCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAppenderCallRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getAppenderCallAccess().getAppenderAppenderCrossReference_0_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getAppenderCallAccess().getFullStopKeyword_1());
		}
		otherlv_2='call'
		{
			newLeafNode(otherlv_2, grammarAccess.getAppenderCallAccess().getCallKeyword_2());
		}
		(
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getAppenderCallAccess().getLeftParenthesisKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAppenderCallAccess().getArgsAppenderCallArgumentParserRuleCall_3_1_0());
					}
					lv_args_4_0=ruleAppenderCallArgument
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAppenderCallRule());
						}
						add(
							$current,
							"args",
							lv_args_4_0,
							"org.gemoc.monilog.MoniLog.AppenderCallArgument");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getAppenderCallAccess().getCommaKeyword_3_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAppenderCallAccess().getArgsAppenderCallArgumentParserRuleCall_3_2_1_0());
						}
						lv_args_6_0=ruleAppenderCallArgument
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAppenderCallRule());
							}
							add(
								$current,
								"args",
								lv_args_6_0,
								"org.gemoc.monilog.MoniLog.AppenderCallArgument");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getAppenderCallAccess().getRightParenthesisKeyword_3_3());
			}
		)?
	)
;

// Entry rule entryRuleAppenderCallArgument
entryRuleAppenderCallArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAppenderCallArgumentRule()); }
	iv_ruleAppenderCallArgument=ruleAppenderCallArgument
	{ $current=$iv_ruleAppenderCallArgument.current; }
	EOF;

// Rule AppenderCallArgument
ruleAppenderCallArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAppenderCallArgumentAccess().getExpressionParserRuleCall_0());
		}
		this_Expression_0=ruleExpression
		{
			$current = $this_Expression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAppenderCallArgumentAccess().getLayoutCallParserRuleCall_1());
		}
		this_LayoutCall_1=ruleLayoutCall
		{
			$current = $this_LayoutCall_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLayoutCall
entryRuleLayoutCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLayoutCallRule()); }
	iv_ruleLayoutCall=ruleLayoutCall
	{ $current=$iv_ruleLayoutCall.current; }
	EOF;

// Rule LayoutCall
ruleLayoutCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLayoutCallRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getLayoutCallAccess().getLayoutLayoutCrossReference_0_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getLayoutCallAccess().getFullStopKeyword_1());
		}
		otherlv_2='call'
		{
			newLeafNode(otherlv_2, grammarAccess.getLayoutCallAccess().getCallKeyword_2());
		}
		(
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getLayoutCallAccess().getLeftParenthesisKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLayoutCallAccess().getArgsLayoutCallArgumentParserRuleCall_3_1_0());
					}
					lv_args_4_0=ruleLayoutCallArgument
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLayoutCallRule());
						}
						add(
							$current,
							"args",
							lv_args_4_0,
							"org.gemoc.monilog.MoniLog.LayoutCallArgument");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getLayoutCallAccess().getCommaKeyword_3_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getLayoutCallAccess().getArgsLayoutCallArgumentParserRuleCall_3_2_1_0());
						}
						lv_args_6_0=ruleLayoutCallArgument
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLayoutCallRule());
							}
							add(
								$current,
								"args",
								lv_args_6_0,
								"org.gemoc.monilog.MoniLog.LayoutCallArgument");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getLayoutCallAccess().getRightParenthesisKeyword_3_3());
			}
		)?
	)
;

// Entry rule entryRuleLayoutCallArgument
entryRuleLayoutCallArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLayoutCallArgumentRule()); }
	iv_ruleLayoutCallArgument=ruleLayoutCallArgument
	{ $current=$iv_ruleLayoutCallArgument.current; }
	EOF;

// Rule LayoutCallArgument
ruleLayoutCallArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		/* */
	}
	{
		newCompositeNode(grammarAccess.getLayoutCallArgumentAccess().getExpressionParserRuleCall());
	}
	this_Expression_0=ruleExpression
	{
		$current = $this_Expression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleEmitEvent
entryRuleEmitEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEmitEventRule()); }
	iv_ruleEmitEvent=ruleEmitEvent
	{ $current=$iv_ruleEmitEvent.current; }
	EOF;

// Rule EmitEvent
ruleEmitEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEmitEventRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getEmitEventAccess().getEventUserEventCrossReference_0_0());
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getEmitEventAccess().getFullStopKeyword_1());
		}
		otherlv_2='emit'
		{
			newLeafNode(otherlv_2, grammarAccess.getEmitEventAccess().getEmitKeyword_2());
		}
		(
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getEmitEventAccess().getLeftParenthesisKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEmitEventAccess().getArgsExpressionParserRuleCall_3_1_0());
					}
					lv_args_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEmitEventRule());
						}
						add(
							$current,
							"args",
							lv_args_4_0,
							"org.gemoc.monilog.MoniLog.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getEmitEventAccess().getCommaKeyword_3_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getEmitEventAccess().getArgsExpressionParserRuleCall_3_2_1_0());
						}
						lv_args_6_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getEmitEventRule());
							}
							add(
								$current,
								"args",
								lv_args_6_0,
								"org.gemoc.monilog.MoniLog.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getEmitEventAccess().getRightParenthesisKeyword_3_3());
			}
		)?
	)
;

// Entry rule entryRuleSetVariable
entryRuleSetVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetVariableRule()); }
	iv_ruleSetVariable=ruleSetVariable
	{ $current=$iv_ruleSetVariable.current; }
	EOF;

// Rule SetVariable
ruleSetVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='set'
		{
			newLeafNode(otherlv_0, grammarAccess.getSetVariableAccess().getSetKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getSetVariableAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_variable_2_0=RULE_STRING
				{
					newLeafNode(lv_variable_2_0, grammarAccess.getSetVariableAccess().getVariableSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSetVariableRule());
					}
					setWithLastConsumed(
						$current,
						"variable",
						lv_variable_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getSetVariableAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSetVariableAccess().getValueLanguageValueParserRuleCall_4_0());
				}
				lv_value_4_0=ruleLanguageValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSetVariableRule());
					}
					set(
						$current,
						"value",
						lv_value_4_0,
						"org.gemoc.monilog.MoniLog.LanguageValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getSetVariableAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleMoniloggerCall
entryRuleMoniloggerCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoniloggerCallRule()); }
	iv_ruleMoniloggerCall=ruleMoniloggerCall
	{ $current=$iv_ruleMoniloggerCall.current; }
	EOF;

// Rule MoniloggerCall
ruleMoniloggerCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getMoniloggerCallAccess().getStartMoniLoggerAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						/* */
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMoniloggerCallRule());
						}
					}
					otherlv_1=RULE_ID
					{
						newLeafNode(otherlv_1, grammarAccess.getMoniloggerCallAccess().getMoniloggerMoniLoggerCrossReference_0_1_0());
					}
				)
			)
			otherlv_2='.'
			{
				newLeafNode(otherlv_2, grammarAccess.getMoniloggerCallAccess().getFullStopKeyword_0_2());
			}
			otherlv_3='start'
			{
				newLeafNode(otherlv_3, grammarAccess.getMoniloggerCallAccess().getStartKeyword_0_3());
			}
			(
				otherlv_4='('
				{
					newLeafNode(otherlv_4, grammarAccess.getMoniloggerCallAccess().getLeftParenthesisKeyword_0_4_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMoniloggerCallAccess().getArgsExpressionParserRuleCall_0_4_1_0());
						}
						lv_args_5_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMoniloggerCallRule());
							}
							add(
								$current,
								"args",
								lv_args_5_0,
								"org.gemoc.monilog.MoniLog.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_6=','
					{
						newLeafNode(otherlv_6, grammarAccess.getMoniloggerCallAccess().getCommaKeyword_0_4_2_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getMoniloggerCallAccess().getArgsExpressionParserRuleCall_0_4_2_1_0());
							}
							lv_args_7_0=ruleExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getMoniloggerCallRule());
								}
								add(
									$current,
									"args",
									lv_args_7_0,
									"org.gemoc.monilog.MoniLog.Expression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
				otherlv_8=')'
				{
					newLeafNode(otherlv_8, grammarAccess.getMoniloggerCallAccess().getRightParenthesisKeyword_0_4_3());
				}
			)?
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getMoniloggerCallAccess().getStopMoniLoggerAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						/* */
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMoniloggerCallRule());
						}
					}
					otherlv_10=RULE_ID
					{
						newLeafNode(otherlv_10, grammarAccess.getMoniloggerCallAccess().getMoniloggerMoniLoggerCrossReference_1_1_0());
					}
				)
			)
			otherlv_11='.'
			{
				newLeafNode(otherlv_11, grammarAccess.getMoniloggerCallAccess().getFullStopKeyword_1_2());
			}
			otherlv_12='stop'
			{
				newLeafNode(otherlv_12, grammarAccess.getMoniloggerCallAccess().getStopKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRuleStreamEvent
entryRuleStreamEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStreamEventRule()); }
	iv_ruleStreamEvent=ruleStreamEvent
	{ $current=$iv_ruleStreamEvent.current; }
	EOF;

// Rule StreamEvent
ruleStreamEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStreamEventRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getStreamEventAccess().getEventEventCrossReference_0_0());
				}
			)
		)
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getStreamEventAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStreamEventAccess().getValuesEmptyOrPropertyValueParserRuleCall_1_1_0());
					}
					lv_values_2_0=ruleEmptyOrPropertyValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStreamEventRule());
						}
						add(
							$current,
							"values",
							lv_values_2_0,
							"org.gemoc.monilog.MoniLog.EmptyOrPropertyValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getStreamEventAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getStreamEventAccess().getValuesEmptyOrPropertyValueParserRuleCall_1_2_1_0());
						}
						lv_values_4_0=ruleEmptyOrPropertyValue
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStreamEventRule());
							}
							add(
								$current,
								"values",
								lv_values_4_0,
								"org.gemoc.monilog.MoniLog.EmptyOrPropertyValue");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getStreamEventAccess().getRightParenthesisKeyword_1_3());
			}
		)?
	)
;

// Entry rule entryRuleEmptyOrPropertyValue
entryRuleEmptyOrPropertyValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEmptyOrPropertyValueRule()); }
	iv_ruleEmptyOrPropertyValue=ruleEmptyOrPropertyValue
	{ $current=$iv_ruleEmptyOrPropertyValue.current; }
	EOF;

// Rule EmptyOrPropertyValue
ruleEmptyOrPropertyValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getEmptyOrPropertyValueAccess().getEmptyAction_0(),
					$current);
			}
		)
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getEmptyOrPropertyValueAccess().getPropertyValueParserRuleCall_1());
		}
		this_PropertyValue_1=rulePropertyValue
		{
			$current = $this_PropertyValue_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getParameterReferenceParserRuleCall_0());
		}
		this_ParameterReference_0=ruleParameterReference
		{
			$current = $this_ParameterReference_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getLanguageValueParserRuleCall_1());
		}
		this_LanguageValue_1=ruleLanguageValue
		{
			$current = $this_LanguageValue_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleParameterReference
entryRuleParameterReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterReferenceRule()); }
	iv_ruleParameterReference=ruleParameterReference
	{ $current=$iv_ruleParameterReference.current; }
	EOF;

// Rule ParameterReference
ruleParameterReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getParameterReferenceRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getParameterReferenceAccess().getParameterParameterCrossReference_0());
			}
		)
	)
;

// Entry rule entryRulePropertyValue
entryRulePropertyValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropertyValueRule()); }
	iv_rulePropertyValue=rulePropertyValue
	{ $current=$iv_rulePropertyValue.current; }
	EOF;

// Rule PropertyValue
rulePropertyValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_id_0_0=RULE_ID
					{
						newLeafNode(lv_id_0_0, grammarAccess.getPropertyValueAccess().getIdIDTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPropertyValueRule());
						}
						setWithLastConsumed(
							$current,
							"id",
							lv_id_0_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				otherlv_1='='
				{
					newLeafNode(otherlv_1, grammarAccess.getPropertyValueAccess().getEqualsSignKeyword_0_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getPropertyValueAccess().getValueExpressionParserRuleCall_0_1_1_0());
						}
						lv_value_2_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPropertyValueRule());
							}
							set(
								$current,
								"value",
								lv_value_2_0,
								"org.gemoc.monilog.MoniLog.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPropertyValueAccess().getValueLanguageValueParserRuleCall_1_0());
				}
				lv_value_3_0=ruleLanguageValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPropertyValueRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"org.gemoc.monilog.MoniLog.LanguageValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLanguageValue
entryRuleLanguageValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLanguageValueRule()); }
	iv_ruleLanguageValue=ruleLanguageValue
	{ $current=$iv_ruleLanguageValue.current; }
	EOF;

// Rule LanguageValue
ruleLanguageValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_languageId_0_0=RULE_ID
				{
					newLeafNode(lv_languageId_0_0, grammarAccess.getLanguageValueAccess().getLanguageIdIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLanguageValueRule());
					}
					setWithLastConsumed(
						$current,
						"languageId",
						lv_languageId_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getLanguageValueAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getLanguageValueAccess().getValueLanguageExpressionParserRuleCall_2_0_0());
					}
					lv_value_2_1=ruleLanguageExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLanguageValueRule());
						}
						set(
							$current,
							"value",
							lv_value_2_1,
							"org.gemoc.monilog.MoniLog.LanguageExpression");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getLanguageValueAccess().getValueLanguageCallParserRuleCall_2_0_1());
					}
					lv_value_2_2=ruleLanguageCall
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLanguageValueRule());
						}
						set(
							$current,
							"value",
							lv_value_2_2,
							"org.gemoc.monilog.MoniLog.LanguageCall");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getLanguageValueAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleLanguageExpression
entryRuleLanguageExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLanguageExpressionRule()); }
	iv_ruleLanguageExpression=ruleLanguageExpression
	{ $current=$iv_ruleLanguageExpression.current; }
	EOF;

// Rule LanguageExpression
ruleLanguageExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_expression_0_0=RULE_STRING
			{
				newLeafNode(lv_expression_0_0, grammarAccess.getLanguageExpressionAccess().getExpressionSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getLanguageExpressionRule());
				}
				setWithLastConsumed(
					$current,
					"expression",
					lv_expression_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleLanguageCall
entryRuleLanguageCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLanguageCallRule()); }
	iv_ruleLanguageCall=ruleLanguageCall
	{ $current=$iv_ruleLanguageCall.current; }
	EOF;

// Rule LanguageCall
ruleLanguageCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLanguageCallRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getLanguageCallAccess().getFileFileAliasCrossReference_0_0());
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getLanguageCallAccess().getFullStopKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLanguageCallAccess().getFqnQualifiedNameParserRuleCall_2_0());
				}
				lv_fqn_2_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLanguageCallRule());
					}
					set(
						$current,
						"fqn",
						lv_fqn_2_0,
						"org.gemoc.monilog.MoniLog.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getLanguageCallAccess().getLeftParenthesisKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLanguageCallAccess().getArgsExpressionParserRuleCall_3_1_0());
					}
					lv_args_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLanguageCallRule());
						}
						add(
							$current,
							"args",
							lv_args_4_0,
							"org.gemoc.monilog.MoniLog.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getLanguageCallAccess().getCommaKeyword_3_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getLanguageCallAccess().getArgsExpressionParserRuleCall_3_2_1_0());
						}
						lv_args_6_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLanguageCallRule());
							}
							add(
								$current,
								"args",
								lv_args_6_0,
								"org.gemoc.monilog.MoniLog.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getLanguageCallAccess().getRightParenthesisKeyword_3_3());
			}
		)?
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); }
	iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard
	{ $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }
	EOF;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0());
		}
		this_QualifiedName_0=ruleQualifiedName
		{
			$current.merge(this_QualifiedName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='.*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1());
			}
		)?
	)
;

// Rule MoniLoggerAnnotation
ruleMoniLoggerAnnotation returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='@Inactive'
		{
			$current = grammarAccess.getMoniLoggerAnnotationAccess().getInactiveEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getMoniLoggerAnnotationAccess().getInactiveEnumLiteralDeclaration());
		}
	)
;

// Rule AppenderAnnotation
ruleAppenderAnnotation returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='@Async'
		{
			$current = grammarAccess.getAppenderAnnotationAccess().getAsyncEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getAppenderAnnotationAccess().getAsyncEnumLiteralDeclaration());
		}
	)
;

// Rule LogLevel
ruleLogLevel returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='INFO'
			{
				$current = grammarAccess.getLogLevelAccess().getInfoEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getLogLevelAccess().getInfoEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='CONFIG'
			{
				$current = grammarAccess.getLogLevelAccess().getConfigEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getLogLevelAccess().getConfigEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='FINE'
			{
				$current = grammarAccess.getLogLevelAccess().getFineEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getLogLevelAccess().getFineEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='FINER'
			{
				$current = grammarAccess.getLogLevelAccess().getFinerEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getLogLevelAccess().getFinerEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='FINEST'
			{
				$current = grammarAccess.getLogLevelAccess().getFinestEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getLogLevelAccess().getFinestEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='SEVERE'
			{
				$current = grammarAccess.getLogLevelAccess().getSevereEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getLogLevelAccess().getSevereEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='WARNING'
			{
				$current = grammarAccess.getLogLevelAccess().getWarningEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getLogLevelAccess().getWarningEnumLiteralDeclaration_6());
			}
		)
	)
;

// Rule TemporalPatternKind
ruleTemporalPatternKind returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='S'
			{
				$current = grammarAccess.getTemporalPatternKindAccess().getSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTemporalPatternKindAccess().getSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='V'
			{
				$current = grammarAccess.getTemporalPatternKindAccess().getVEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTemporalPatternKindAccess().getVEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='nS'
			{
				$current = grammarAccess.getTemporalPatternKindAccess().getNSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getTemporalPatternKindAccess().getNSEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='nV'
			{
				$current = grammarAccess.getTemporalPatternKindAccess().getNVEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getTemporalPatternKindAccess().getNVEnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
