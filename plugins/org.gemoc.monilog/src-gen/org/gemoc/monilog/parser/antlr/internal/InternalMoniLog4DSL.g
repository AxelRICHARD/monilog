/*
 * generated by Xtext 2.22.0
 */
grammar InternalMoniLog4DSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.gemoc.monilog.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.gemoc.monilog.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.gemoc.monilog.services.MoniLog4DSLGrammarAccess;

}

@parser::members {

 	private MoniLog4DSLGrammarAccess grammarAccess;

    public InternalMoniLog4DSLParser(TokenStream input, MoniLog4DSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MoniLog4DSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='default-language'
			{
				newLeafNode(otherlv_0, grammarAccess.getModelAccess().getDefaultLanguageKeyword_0_0());
			}
			(
				(
					(
						lv_defaultLanguageID_1_1=RULE_ID
						{
							newLeafNode(lv_defaultLanguageID_1_1, grammarAccess.getModelAccess().getDefaultLanguageIDIDTerminalRuleCall_0_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getModelRule());
							}
							setWithLastConsumed(
								$current,
								"defaultLanguageID",
								lv_defaultLanguageID_1_1,
								"org.eclipse.xtext.common.Terminals.ID");
						}
						    |
						lv_defaultLanguageID_1_2=RULE_STRING
						{
							newLeafNode(lv_defaultLanguageID_1_2, grammarAccess.getModelAccess().getDefaultLanguageIDSTRINGTerminalRuleCall_0_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getModelRule());
							}
							setWithLastConsumed(
								$current,
								"defaultLanguageID",
								lv_defaultLanguageID_1_2,
								"org.eclipse.xtext.common.Terminals.STRING");
						}
					)
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getMoniLogSpecsMoniLogSpecParserRuleCall_1_0());
				}
				lv_moniLogSpecs_2_0=ruleMoniLogSpec
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"moniLogSpecs",
						lv_moniLogSpecs_2_0,
						"org.gemoc.monilog.MoniLog4DSL.MoniLogSpec");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleMoniLogSpec
entryRuleMoniLogSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoniLogSpecRule()); }
	iv_ruleMoniLogSpec=ruleMoniLogSpec
	{ $current=$iv_ruleMoniLogSpec.current; }
	EOF;

// Rule MoniLogSpec
ruleMoniLogSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='monilog'
		{
			newLeafNode(otherlv_0, grammarAccess.getMoniLogSpecAccess().getMonilogKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getMoniLogSpecAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMoniLogSpecRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
		(
			otherlv_2='['
			{
				newLeafNode(otherlv_2, grammarAccess.getMoniLogSpecAccess().getLeftSquareBracketKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMoniLogSpecAccess().getLevelLogLevelEnumRuleCall_2_1_0());
					}
					lv_level_3_0=ruleLogLevel
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMoniLogSpecRule());
						}
						set(
							$current,
							"level",
							lv_level_3_0,
							"org.gemoc.monilog.MoniLog4DSL.LogLevel");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=']'
			{
				newLeafNode(otherlv_4, grammarAccess.getMoniLogSpecAccess().getRightSquareBracketKeyword_2_2());
			}
		)?
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getMoniLogSpecAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_6='events'
			{
				newLeafNode(otherlv_6, grammarAccess.getMoniLogSpecAccess().getEventsKeyword_4_0());
			}
			otherlv_7='{'
			{
				newLeafNode(otherlv_7, grammarAccess.getMoniLogSpecAccess().getLeftCurlyBracketKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMoniLogSpecAccess().getEventsEventParserRuleCall_4_2_0());
					}
					lv_events_8_0=ruleEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMoniLogSpecRule());
						}
						add(
							$current,
							"events",
							lv_events_8_0,
							"org.gemoc.monilog.MoniLog4DSL.Event");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_9=','
				{
					newLeafNode(otherlv_9, grammarAccess.getMoniLogSpecAccess().getCommaKeyword_4_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMoniLogSpecAccess().getEventsEventParserRuleCall_4_3_1_0());
						}
						lv_events_10_0=ruleEvent
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMoniLogSpecRule());
							}
							add(
								$current,
								"events",
								lv_events_10_0,
								"org.gemoc.monilog.MoniLog4DSL.Event");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_11='}'
			{
				newLeafNode(otherlv_11, grammarAccess.getMoniLogSpecAccess().getRightCurlyBracketKeyword_4_4());
			}
		)?
		(
			otherlv_12='conditions'
			{
				newLeafNode(otherlv_12, grammarAccess.getMoniLogSpecAccess().getConditionsKeyword_5_0());
			}
			otherlv_13='{'
			{
				newLeafNode(otherlv_13, grammarAccess.getMoniLogSpecAccess().getLeftCurlyBracketKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMoniLogSpecAccess().getConditionsConditionParserRuleCall_5_2_0());
					}
					lv_conditions_14_0=ruleCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMoniLogSpecRule());
						}
						add(
							$current,
							"conditions",
							lv_conditions_14_0,
							"org.gemoc.monilog.MoniLog4DSL.Condition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_15=','
				{
					newLeafNode(otherlv_15, grammarAccess.getMoniLogSpecAccess().getCommaKeyword_5_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMoniLogSpecAccess().getConditionsConditionParserRuleCall_5_3_1_0());
						}
						lv_conditions_16_0=ruleCondition
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMoniLogSpecRule());
							}
							add(
								$current,
								"conditions",
								lv_conditions_16_0,
								"org.gemoc.monilog.MoniLog4DSL.Condition");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_17='}'
			{
				newLeafNode(otherlv_17, grammarAccess.getMoniLogSpecAccess().getRightCurlyBracketKeyword_5_4());
			}
		)?
		otherlv_18='actions'
		{
			newLeafNode(otherlv_18, grammarAccess.getMoniLogSpecAccess().getActionsKeyword_6());
		}
		otherlv_19='{'
		{
			newLeafNode(otherlv_19, grammarAccess.getMoniLogSpecAccess().getLeftCurlyBracketKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMoniLogSpecAccess().getActionsActionParserRuleCall_8_0());
				}
				lv_actions_20_0=ruleAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMoniLogSpecRule());
					}
					add(
						$current,
						"actions",
						lv_actions_20_0,
						"org.gemoc.monilog.MoniLog4DSL.Action");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_21=','
			{
				newLeafNode(otherlv_21, grammarAccess.getMoniLogSpecAccess().getCommaKeyword_9_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMoniLogSpecAccess().getActionsActionParserRuleCall_9_1_0());
					}
					lv_actions_22_0=ruleAction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMoniLogSpecRule());
						}
						add(
							$current,
							"actions",
							lv_actions_22_0,
							"org.gemoc.monilog.MoniLog4DSL.Action");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_23='}'
		{
			newLeafNode(otherlv_23, grammarAccess.getMoniLogSpecAccess().getRightCurlyBracketKeyword_10());
		}
		otherlv_24='}'
		{
			newLeafNode(otherlv_24, grammarAccess.getMoniLogSpecAccess().getRightCurlyBracketKeyword_11());
		}
	)
;

// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventRule()); }
	iv_ruleEvent=ruleEvent
	{ $current=$iv_ruleEvent.current; }
	EOF;

// Rule Event
ruleEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEventAccess().getBeforeEventParserRuleCall_0());
		}
		this_BeforeEvent_0=ruleBeforeEvent
		{
			$current = $this_BeforeEvent_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEventAccess().getAfterEventParserRuleCall_1());
		}
		this_AfterEvent_1=ruleAfterEvent
		{
			$current = $this_AfterEvent_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEventAccess().getBeforeAfterEventParserRuleCall_2());
		}
		this_BeforeAfterEvent_2=ruleBeforeAfterEvent
		{
			$current = $this_BeforeAfterEvent_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBeforeEvent
entryRuleBeforeEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBeforeEventRule()); }
	iv_ruleBeforeEvent=ruleBeforeEvent
	{ $current=$iv_ruleBeforeEvent.current; }
	EOF;

// Rule BeforeEvent
ruleBeforeEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='before'
		{
			newLeafNode(otherlv_0, grammarAccess.getBeforeEventAccess().getBeforeKeyword_0());
		}
		(
			(
				(
					lv_ruleID_1_1=RULE_ID
					{
						newLeafNode(lv_ruleID_1_1, grammarAccess.getBeforeEventAccess().getRuleIDIDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBeforeEventRule());
						}
						setWithLastConsumed(
							$current,
							"ruleID",
							lv_ruleID_1_1,
							"org.eclipse.xtext.common.Terminals.ID");
					}
					    |
					lv_ruleID_1_2=RULE_STRING
					{
						newLeafNode(lv_ruleID_1_2, grammarAccess.getBeforeEventAccess().getRuleIDSTRINGTerminalRuleCall_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBeforeEventRule());
						}
						setWithLastConsumed(
							$current,
							"ruleID",
							lv_ruleID_1_2,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		(
			(
				{ 
				  getUnorderedGroupHelper().enter(grammarAccess.getBeforeEventAccess().getUnorderedGroup_2());
				}
				(
					(
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getBeforeEventAccess().getUnorderedGroup_2(), 0)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getBeforeEventAccess().getUnorderedGroup_2(), 0);
					}
								({true}?=>(otherlv_3='frequency^'
								{
									newLeafNode(otherlv_3, grammarAccess.getBeforeEventAccess().getFrequencyKeyword_2_0_0());
								}
								(
									(
										lv_frequency_4_0=RULE_INT
										{
											newLeafNode(lv_frequency_4_0, grammarAccess.getBeforeEventAccess().getFrequencyINTTerminalRuleCall_2_0_1_0());
										}
										{
											if ($current==null) {
												$current = createModelElement(grammarAccess.getBeforeEventRule());
											}
											setWithLastConsumed(
												$current,
												"frequency",
												lv_frequency_4_0,
												"org.eclipse.xtext.common.Terminals.INT");
										}
									)
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getBeforeEventAccess().getUnorderedGroup_2());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getBeforeEventAccess().getUnorderedGroup_2(), 1)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getBeforeEventAccess().getUnorderedGroup_2(), 1);
					}
								({true}?=>(otherlv_5='limit'
								{
									newLeafNode(otherlv_5, grammarAccess.getBeforeEventAccess().getLimitKeyword_2_1_0());
								}
								(
									(
										lv_limit_6_0=RULE_INT
										{
											newLeafNode(lv_limit_6_0, grammarAccess.getBeforeEventAccess().getLimitINTTerminalRuleCall_2_1_1_0());
										}
										{
											if ($current==null) {
												$current = createModelElement(grammarAccess.getBeforeEventRule());
											}
											setWithLastConsumed(
												$current,
												"limit",
												lv_limit_6_0,
												"org.eclipse.xtext.common.Terminals.INT");
										}
									)
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getBeforeEventAccess().getUnorderedGroup_2());
					}
				)
			)
					)*
				)
			)
				{ 
				  getUnorderedGroupHelper().leave(grammarAccess.getBeforeEventAccess().getUnorderedGroup_2());
				}
		)
	)
;

// Entry rule entryRuleAfterEvent
entryRuleAfterEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAfterEventRule()); }
	iv_ruleAfterEvent=ruleAfterEvent
	{ $current=$iv_ruleAfterEvent.current; }
	EOF;

// Rule AfterEvent
ruleAfterEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='after'
		{
			newLeafNode(otherlv_0, grammarAccess.getAfterEventAccess().getAfterKeyword_0());
		}
		(
			(
				(
					lv_ruleID_1_1=RULE_ID
					{
						newLeafNode(lv_ruleID_1_1, grammarAccess.getAfterEventAccess().getRuleIDIDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAfterEventRule());
						}
						setWithLastConsumed(
							$current,
							"ruleID",
							lv_ruleID_1_1,
							"org.eclipse.xtext.common.Terminals.ID");
					}
					    |
					lv_ruleID_1_2=RULE_STRING
					{
						newLeafNode(lv_ruleID_1_2, grammarAccess.getAfterEventAccess().getRuleIDSTRINGTerminalRuleCall_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAfterEventRule());
						}
						setWithLastConsumed(
							$current,
							"ruleID",
							lv_ruleID_1_2,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		(
			(
				{ 
				  getUnorderedGroupHelper().enter(grammarAccess.getAfterEventAccess().getUnorderedGroup_2());
				}
				(
					(
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getAfterEventAccess().getUnorderedGroup_2(), 0)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getAfterEventAccess().getUnorderedGroup_2(), 0);
					}
								({true}?=>(otherlv_3='frequency'
								{
									newLeafNode(otherlv_3, grammarAccess.getAfterEventAccess().getFrequencyKeyword_2_0_0());
								}
								(
									(
										lv_frequency_4_0=RULE_INT
										{
											newLeafNode(lv_frequency_4_0, grammarAccess.getAfterEventAccess().getFrequencyINTTerminalRuleCall_2_0_1_0());
										}
										{
											if ($current==null) {
												$current = createModelElement(grammarAccess.getAfterEventRule());
											}
											setWithLastConsumed(
												$current,
												"frequency",
												lv_frequency_4_0,
												"org.eclipse.xtext.common.Terminals.INT");
										}
									)
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getAfterEventAccess().getUnorderedGroup_2());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getAfterEventAccess().getUnorderedGroup_2(), 1)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getAfterEventAccess().getUnorderedGroup_2(), 1);
					}
								({true}?=>(otherlv_5='limit'
								{
									newLeafNode(otherlv_5, grammarAccess.getAfterEventAccess().getLimitKeyword_2_1_0());
								}
								(
									(
										lv_limit_6_0=RULE_INT
										{
											newLeafNode(lv_limit_6_0, grammarAccess.getAfterEventAccess().getLimitINTTerminalRuleCall_2_1_1_0());
										}
										{
											if ($current==null) {
												$current = createModelElement(grammarAccess.getAfterEventRule());
											}
											setWithLastConsumed(
												$current,
												"limit",
												lv_limit_6_0,
												"org.eclipse.xtext.common.Terminals.INT");
										}
									)
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getAfterEventAccess().getUnorderedGroup_2());
					}
				)
			)
					)*
				)
			)
				{ 
				  getUnorderedGroupHelper().leave(grammarAccess.getAfterEventAccess().getUnorderedGroup_2());
				}
		)
	)
;

// Entry rule entryRuleBeforeAfterEvent
entryRuleBeforeAfterEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBeforeAfterEventRule()); }
	iv_ruleBeforeAfterEvent=ruleBeforeAfterEvent
	{ $current=$iv_ruleBeforeAfterEvent.current; }
	EOF;

// Rule BeforeAfterEvent
ruleBeforeAfterEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_ruleID_0_1=RULE_ID
					{
						newLeafNode(lv_ruleID_0_1, grammarAccess.getBeforeAfterEventAccess().getRuleIDIDTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBeforeAfterEventRule());
						}
						setWithLastConsumed(
							$current,
							"ruleID",
							lv_ruleID_0_1,
							"org.eclipse.xtext.common.Terminals.ID");
					}
					    |
					lv_ruleID_0_2=RULE_STRING
					{
						newLeafNode(lv_ruleID_0_2, grammarAccess.getBeforeAfterEventAccess().getRuleIDSTRINGTerminalRuleCall_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBeforeAfterEventRule());
						}
						setWithLastConsumed(
							$current,
							"ruleID",
							lv_ruleID_0_2,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		(
			(
				{ 
				  getUnorderedGroupHelper().enter(grammarAccess.getBeforeAfterEventAccess().getUnorderedGroup_1());
				}
				(
					(
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getBeforeAfterEventAccess().getUnorderedGroup_1(), 0)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getBeforeAfterEventAccess().getUnorderedGroup_1(), 0);
					}
								({true}?=>(otherlv_2='frequency'
								{
									newLeafNode(otherlv_2, grammarAccess.getBeforeAfterEventAccess().getFrequencyKeyword_1_0_0());
								}
								(
									(
										lv_frequency_3_0=RULE_INT
										{
											newLeafNode(lv_frequency_3_0, grammarAccess.getBeforeAfterEventAccess().getFrequencyINTTerminalRuleCall_1_0_1_0());
										}
										{
											if ($current==null) {
												$current = createModelElement(grammarAccess.getBeforeAfterEventRule());
											}
											setWithLastConsumed(
												$current,
												"frequency",
												lv_frequency_3_0,
												"org.eclipse.xtext.common.Terminals.INT");
										}
									)
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getBeforeAfterEventAccess().getUnorderedGroup_1());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getBeforeAfterEventAccess().getUnorderedGroup_1(), 1)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getBeforeAfterEventAccess().getUnorderedGroup_1(), 1);
					}
								({true}?=>(otherlv_4='limit'
								{
									newLeafNode(otherlv_4, grammarAccess.getBeforeAfterEventAccess().getLimitKeyword_1_1_0());
								}
								(
									(
										lv_limit_5_0=RULE_INT
										{
											newLeafNode(lv_limit_5_0, grammarAccess.getBeforeAfterEventAccess().getLimitINTTerminalRuleCall_1_1_1_0());
										}
										{
											if ($current==null) {
												$current = createModelElement(grammarAccess.getBeforeAfterEventRule());
											}
											setWithLastConsumed(
												$current,
												"limit",
												lv_limit_5_0,
												"org.eclipse.xtext.common.Terminals.INT");
										}
									)
								)
								))
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getBeforeAfterEventAccess().getUnorderedGroup_1());
					}
				)
			)
					)*
				)
			)
				{ 
				  getUnorderedGroupHelper().leave(grammarAccess.getBeforeAfterEventAccess().getUnorderedGroup_1());
				}
		)
	)
;

// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current; }
	EOF;

// Rule Condition
ruleCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getConditionAccess().getTemporalPropertyConditionAction_0_0(),
						$current);
				}
			)
			otherlv_1='stream'
			{
				newLeafNode(otherlv_1, grammarAccess.getConditionAccess().getStreamKeyword_0_1());
			}
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getConditionAccess().getLeftParenthesisKeyword_0_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionAccess().getPatternTemporalPatternParserRuleCall_0_3_0());
					}
					lv_pattern_3_0=ruleTemporalPattern
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionRule());
						}
						set(
							$current,
							"pattern",
							lv_pattern_3_0,
							"org.gemoc.monilog.MoniLog4DSL.TemporalPattern");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getConditionAccess().getCommaKeyword_0_4_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getConditionAccess().getKindTemporalPropertyConditionKindEnumRuleCall_0_4_1_0());
						}
						lv_kind_5_0=ruleTemporalPropertyConditionKind
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getConditionRule());
							}
							set(
								$current,
								"kind",
								lv_kind_5_0,
								"org.gemoc.monilog.MoniLog4DSL.TemporalPropertyConditionKind");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getConditionAccess().getRightParenthesisKeyword_0_5());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getConditionAccess().getLanguageExpressionConditionAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionAccess().getExpressionLanguageExpressionParserRuleCall_1_1_0());
					}
					lv_expression_8_0=ruleLanguageExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionRule());
						}
						set(
							$current,
							"expression",
							lv_expression_8_0,
							"org.gemoc.monilog.MoniLog4DSL.LanguageExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleTemporalPattern
entryRuleTemporalPattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTemporalPatternRule()); }
	iv_ruleTemporalPattern=ruleTemporalPattern
	{ $current=$iv_ruleTemporalPattern.current; }
	EOF;

// Rule TemporalPattern
ruleTemporalPattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTemporalPatternAccess().getPatternPatternParserRuleCall_0_0());
				}
				lv_pattern_0_0=rulePattern
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTemporalPatternRule());
					}
					set(
						$current,
						"pattern",
						lv_pattern_0_0,
						"org.gemoc.monilog.MoniLog4DSL.Pattern");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTemporalPatternAccess().getScopeScopeParserRuleCall_1_0());
				}
				lv_scope_1_0=ruleScope
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTemporalPatternRule());
					}
					set(
						$current,
						"scope",
						lv_scope_1_0,
						"org.gemoc.monilog.MoniLog4DSL.Scope");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePattern
entryRulePattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternRule()); }
	iv_rulePattern=rulePattern
	{ $current=$iv_rulePattern.current; }
	EOF;

// Rule Pattern
rulePattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPatternAccess().getUniversalityAction_0_0(),
						$current);
				}
			)
			otherlv_1='always'
			{
				newLeafNode(otherlv_1, grammarAccess.getPatternAccess().getAlwaysKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPatternAccess().getEventStreamEventParserRuleCall_0_2_0());
					}
					lv_event_2_0=ruleStreamEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPatternRule());
						}
						set(
							$current,
							"event",
							lv_event_2_0,
							"org.gemoc.monilog.MoniLog4DSL.StreamEvent");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPatternAccess().getExistenceAction_1_0(),
						$current);
				}
			)
			otherlv_4='exists'
			{
				newLeafNode(otherlv_4, grammarAccess.getPatternAccess().getExistsKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPatternAccess().getBoundBoundTypeParserRuleCall_1_2_0());
					}
					lv_bound_5_0=ruleBoundType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPatternRule());
						}
						set(
							$current,
							"bound",
							lv_bound_5_0,
							"org.gemoc.monilog.MoniLog4DSL.BoundType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPatternAccess().getEventStreamEventParserRuleCall_1_3_0());
					}
					lv_event_6_0=ruleStreamEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPatternRule());
						}
						set(
							$current,
							"event",
							lv_event_6_0,
							"org.gemoc.monilog.MoniLog4DSL.StreamEvent");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPatternAccess().getAbsenceAction_2_0(),
						$current);
				}
			)
			otherlv_8='never'
			{
				newLeafNode(otherlv_8, grammarAccess.getPatternAccess().getNeverKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPatternAccess().getEventStreamEventParserRuleCall_2_2_0());
					}
					lv_event_9_0=ruleStreamEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPatternRule());
						}
						set(
							$current,
							"event",
							lv_event_9_0,
							"org.gemoc.monilog.MoniLog4DSL.StreamEvent");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPatternAccess().getPrecedenceAction_3_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPatternAccess().getPredecessorStreamEventParserRuleCall_3_1_0());
					}
					lv_predecessor_11_0=ruleStreamEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPatternRule());
						}
						set(
							$current,
							"predecessor",
							lv_predecessor_11_0,
							"org.gemoc.monilog.MoniLog4DSL.StreamEvent");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_12='precedes'
			{
				newLeafNode(otherlv_12, grammarAccess.getPatternAccess().getPrecedesKeyword_3_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPatternAccess().getSuccessorStreamEventParserRuleCall_3_3_0());
					}
					lv_successor_13_0=ruleStreamEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPatternRule());
						}
						set(
							$current,
							"successor",
							lv_successor_13_0,
							"org.gemoc.monilog.MoniLog4DSL.StreamEvent");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPatternAccess().getResponseAction_4_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPatternAccess().getEventStreamEventParserRuleCall_4_1_0());
					}
					lv_event_15_0=ruleStreamEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPatternRule());
						}
						set(
							$current,
							"event",
							lv_event_15_0,
							"org.gemoc.monilog.MoniLog4DSL.StreamEvent");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_16='respondsTo'
			{
				newLeafNode(otherlv_16, grammarAccess.getPatternAccess().getRespondsToKeyword_4_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPatternAccess().getTriggerStreamEventParserRuleCall_4_3_0());
					}
					lv_trigger_17_0=ruleStreamEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPatternRule());
						}
						set(
							$current,
							"trigger",
							lv_trigger_17_0,
							"org.gemoc.monilog.MoniLog4DSL.StreamEvent");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleBoundType
entryRuleBoundType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoundTypeRule()); }
	iv_ruleBoundType=ruleBoundType
	{ $current=$iv_ruleBoundType.current; }
	EOF;

// Rule BoundType
ruleBoundType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBoundTypeAccess().getExactBoundParserRuleCall_0());
		}
		this_ExactBound_0=ruleExactBound
		{
			$current = $this_ExactBound_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBoundTypeAccess().getLowerBoundParserRuleCall_1());
		}
		this_LowerBound_1=ruleLowerBound
		{
			$current = $this_LowerBound_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBoundTypeAccess().getUpperBoundParserRuleCall_2());
		}
		this_UpperBound_2=ruleUpperBound
		{
			$current = $this_UpperBound_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExactBound
entryRuleExactBound returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExactBoundRule()); }
	iv_ruleExactBound=ruleExactBound
	{ $current=$iv_ruleExactBound.current; }
	EOF;

// Rule ExactBound
ruleExactBound returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_n_0_0=RULE_INT
			{
				newLeafNode(lv_n_0_0, grammarAccess.getExactBoundAccess().getNINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getExactBoundRule());
				}
				setWithLastConsumed(
					$current,
					"n",
					lv_n_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleLowerBound
entryRuleLowerBound returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLowerBoundRule()); }
	iv_ruleLowerBound=ruleLowerBound
	{ $current=$iv_ruleLowerBound.current; }
	EOF;

// Rule LowerBound
ruleLowerBound returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='atleast'
		{
			newLeafNode(otherlv_0, grammarAccess.getLowerBoundAccess().getAtleastKeyword_0());
		}
		(
			(
				lv_n_1_0=RULE_INT
				{
					newLeafNode(lv_n_1_0, grammarAccess.getLowerBoundAccess().getNINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLowerBoundRule());
					}
					setWithLastConsumed(
						$current,
						"n",
						lv_n_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleUpperBound
entryRuleUpperBound returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUpperBoundRule()); }
	iv_ruleUpperBound=ruleUpperBound
	{ $current=$iv_ruleUpperBound.current; }
	EOF;

// Rule UpperBound
ruleUpperBound returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='atmost'
		{
			newLeafNode(otherlv_0, grammarAccess.getUpperBoundAccess().getAtmostKeyword_0());
		}
		(
			(
				lv_n_1_0=RULE_INT
				{
					newLeafNode(lv_n_1_0, grammarAccess.getUpperBoundAccess().getNINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUpperBoundRule());
					}
					setWithLastConsumed(
						$current,
						"n",
						lv_n_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleScope
entryRuleScope returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScopeRule()); }
	iv_ruleScope=ruleScope
	{ $current=$iv_ruleScope.current; }
	EOF;

// Rule Scope
ruleScope returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getScopeAccess().getGloballyAction_0_0(),
						$current);
				}
			)
			(
				otherlv_1='globally'
				{
					newLeafNode(otherlv_1, grammarAccess.getScopeAccess().getGloballyKeyword_0_1());
				}
			)?
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getScopeAccess().getAfterAction_1_0(),
						$current);
				}
			)
			otherlv_3='after'
			{
				newLeafNode(otherlv_3, grammarAccess.getScopeAccess().getAfterKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getScopeAccess().getLowerBoundStreamEventParserRuleCall_1_2_0());
					}
					lv_lowerBound_4_0=ruleStreamEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getScopeRule());
						}
						set(
							$current,
							"lowerBound",
							lv_lowerBound_4_0,
							"org.gemoc.monilog.MoniLog4DSL.StreamEvent");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getScopeAccess().getBeforeAction_2_0(),
						$current);
				}
			)
			otherlv_6='before'
			{
				newLeafNode(otherlv_6, grammarAccess.getScopeAccess().getBeforeKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getScopeAccess().getUpperBoundStreamEventParserRuleCall_2_2_0());
					}
					lv_upperBound_7_0=ruleStreamEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getScopeRule());
						}
						set(
							$current,
							"upperBound",
							lv_upperBound_7_0,
							"org.gemoc.monilog.MoniLog4DSL.StreamEvent");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getScopeAccess().getBetweenAction_3_0(),
						$current);
				}
			)
			otherlv_9='between'
			{
				newLeafNode(otherlv_9, grammarAccess.getScopeAccess().getBetweenKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getScopeAccess().getLowerBoundStreamEventParserRuleCall_3_2_0());
					}
					lv_lowerBound_10_0=ruleStreamEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getScopeRule());
						}
						set(
							$current,
							"lowerBound",
							lv_lowerBound_10_0,
							"org.gemoc.monilog.MoniLog4DSL.StreamEvent");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_11='and'
			{
				newLeafNode(otherlv_11, grammarAccess.getScopeAccess().getAndKeyword_3_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getScopeAccess().getUpperBoundStreamEventParserRuleCall_3_4_0());
					}
					lv_upperBound_12_0=ruleStreamEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getScopeRule());
						}
						set(
							$current,
							"upperBound",
							lv_upperBound_12_0,
							"org.gemoc.monilog.MoniLog4DSL.StreamEvent");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getScopeAccess().getAfterUntilAction_4_0(),
						$current);
				}
			)
			otherlv_14='after'
			{
				newLeafNode(otherlv_14, grammarAccess.getScopeAccess().getAfterKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getScopeAccess().getLowerBoundStreamEventParserRuleCall_4_2_0());
					}
					lv_lowerBound_15_0=ruleStreamEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getScopeRule());
						}
						set(
							$current,
							"lowerBound",
							lv_lowerBound_15_0,
							"org.gemoc.monilog.MoniLog4DSL.StreamEvent");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_16='until'
			{
				newLeafNode(otherlv_16, grammarAccess.getScopeAccess().getUntilKeyword_4_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getScopeAccess().getUpperBoundStreamEventParserRuleCall_4_4_0());
					}
					lv_upperBound_17_0=ruleStreamEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getScopeRule());
						}
						set(
							$current,
							"upperBound",
							lv_upperBound_17_0,
							"org.gemoc.monilog.MoniLog4DSL.StreamEvent");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	iv_ruleAction=ruleAction
	{ $current=$iv_ruleAction.current; }
	EOF;

// Rule Action
ruleAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getActionAccess().getNotifyAction_0_0(),
						$current);
				}
			)
			otherlv_1='notify'
			{
				newLeafNode(otherlv_1, grammarAccess.getActionAccess().getNotifyKeyword_0_1());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getActionAccess().getAppendParserRuleCall_1());
		}
		this_Append_2=ruleAppend
		{
			$current = $this_Append_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAppend
entryRuleAppend returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAppendRule()); }
	iv_ruleAppend=ruleAppend
	{ $current=$iv_ruleAppend.current; }
	EOF;

// Rule Append
ruleAppend returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='append'
		{
			newLeafNode(otherlv_0, grammarAccess.getAppendAccess().getAppendKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAppendAccess().getAppenderAppenderParserRuleCall_1_0());
				}
				lv_appender_1_0=ruleAppender
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAppendRule());
					}
					set(
						$current,
						"appender",
						lv_appender_1_0,
						"org.gemoc.monilog.MoniLog4DSL.Appender");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAppender
entryRuleAppender returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAppenderRule()); }
	iv_ruleAppender=ruleAppender
	{ $current=$iv_ruleAppender.current; }
	EOF;

// Rule Appender
ruleAppender returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAppenderAccess().getStreamAppenderParserRuleCall_0());
		}
		this_StreamAppender_0=ruleStreamAppender
		{
			$current = $this_StreamAppender_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAppenderAccess().getFileAppenderParserRuleCall_1());
		}
		this_FileAppender_1=ruleFileAppender
		{
			$current = $this_FileAppender_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAppenderAccess().getConsoleAppenderParserRuleCall_2());
		}
		this_ConsoleAppender_2=ruleConsoleAppender
		{
			$current = $this_ConsoleAppender_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleStreamAppender
entryRuleStreamAppender returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStreamAppenderRule()); }
	iv_ruleStreamAppender=ruleStreamAppender
	{ $current=$iv_ruleStreamAppender.current; }
	EOF;

// Rule StreamAppender
ruleStreamAppender returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='stream'
		{
			newLeafNode(otherlv_0, grammarAccess.getStreamAppenderAccess().getStreamKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getStreamAppenderAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					lv_event_2_1=RULE_ID
					{
						newLeafNode(lv_event_2_1, grammarAccess.getStreamAppenderAccess().getEventIDTerminalRuleCall_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStreamAppenderRule());
						}
						setWithLastConsumed(
							$current,
							"event",
							lv_event_2_1,
							"org.eclipse.xtext.common.Terminals.ID");
					}
					    |
					lv_event_2_2=RULE_STRING
					{
						newLeafNode(lv_event_2_2, grammarAccess.getStreamAppenderAccess().getEventSTRINGTerminalRuleCall_2_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStreamAppenderRule());
						}
						setWithLastConsumed(
							$current,
							"event",
							lv_event_2_2,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		(
			otherlv_3='['
			{
				newLeafNode(otherlv_3, grammarAccess.getStreamAppenderAccess().getLeftSquareBracketKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStreamAppenderAccess().getValuesLanguageExpressionParserRuleCall_3_1_0());
					}
					lv_values_4_0=ruleLanguageExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStreamAppenderRule());
						}
						add(
							$current,
							"values",
							lv_values_4_0,
							"org.gemoc.monilog.MoniLog4DSL.LanguageExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getStreamAppenderAccess().getCommaKeyword_3_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getStreamAppenderAccess().getValuesLanguageExpressionParserRuleCall_3_2_1_0());
						}
						lv_values_6_0=ruleLanguageExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStreamAppenderRule());
							}
							add(
								$current,
								"values",
								lv_values_6_0,
								"org.gemoc.monilog.MoniLog4DSL.LanguageExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_7=']'
			{
				newLeafNode(otherlv_7, grammarAccess.getStreamAppenderAccess().getRightSquareBracketKeyword_3_3());
			}
		)?
		otherlv_8=')'
		{
			newLeafNode(otherlv_8, grammarAccess.getStreamAppenderAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleFileAppender
entryRuleFileAppender returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFileAppenderRule()); }
	iv_ruleFileAppender=ruleFileAppender
	{ $current=$iv_ruleFileAppender.current; }
	EOF;

// Rule FileAppender
ruleFileAppender returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='file'
		{
			newLeafNode(otherlv_0, grammarAccess.getFileAppenderAccess().getFileKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getFileAppenderAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_filename_2_0=RULE_STRING
				{
					newLeafNode(lv_filename_2_0, grammarAccess.getFileAppenderAccess().getFilenameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFileAppenderRule());
					}
					setWithLastConsumed(
						$current,
						"filename",
						lv_filename_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getFileAppenderAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFileAppenderAccess().getLayoutLayoutParserRuleCall_4_0());
				}
				lv_layout_4_0=ruleLayout
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFileAppenderRule());
					}
					set(
						$current,
						"layout",
						lv_layout_4_0,
						"org.gemoc.monilog.MoniLog4DSL.Layout");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getFileAppenderAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleConsoleAppender
entryRuleConsoleAppender returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConsoleAppenderRule()); }
	iv_ruleConsoleAppender=ruleConsoleAppender
	{ $current=$iv_ruleConsoleAppender.current; }
	EOF;

// Rule ConsoleAppender
ruleConsoleAppender returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='console'
		{
			newLeafNode(otherlv_0, grammarAccess.getConsoleAppenderAccess().getConsoleKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getConsoleAppenderAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConsoleAppenderAccess().getLayoutLayoutParserRuleCall_2_0());
				}
				lv_layout_2_0=ruleLayout
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConsoleAppenderRule());
					}
					set(
						$current,
						"layout",
						lv_layout_2_0,
						"org.gemoc.monilog.MoniLog4DSL.Layout");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getConsoleAppenderAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleLayout
entryRuleLayout returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLayoutRule()); }
	iv_ruleLayout=ruleLayout
	{ $current=$iv_ruleLayout.current; }
	EOF;

// Rule Layout
ruleLayout returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLayoutAccess().getStringLayoutParserRuleCall_0());
		}
		this_StringLayout_0=ruleStringLayout
		{
			$current = $this_StringLayout_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLayoutAccess().getExternalLayoutParserRuleCall_1());
		}
		this_ExternalLayout_1=ruleExternalLayout
		{
			$current = $this_ExternalLayout_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleStringLayout
entryRuleStringLayout returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringLayoutRule()); }
	iv_ruleStringLayout=ruleStringLayout
	{ $current=$iv_ruleStringLayout.current; }
	EOF;

// Rule StringLayout
ruleStringLayout returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_formatString_0_0=RULE_STRING
				{
					newLeafNode(lv_formatString_0_0, grammarAccess.getStringLayoutAccess().getFormatStringSTRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStringLayoutRule());
					}
					setWithLastConsumed(
						$current,
						"formatString",
						lv_formatString_0_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getStringLayoutAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStringLayoutAccess().getValuesLanguageExpressionParserRuleCall_1_1_0());
					}
					lv_values_2_0=ruleLanguageExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStringLayoutRule());
						}
						add(
							$current,
							"values",
							lv_values_2_0,
							"org.gemoc.monilog.MoniLog4DSL.LanguageExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleExternalLayout
entryRuleExternalLayout returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExternalLayoutRule()); }
	iv_ruleExternalLayout=ruleExternalLayout
	{ $current=$iv_ruleExternalLayout.current; }
	EOF;

// Rule ExternalLayout
ruleExternalLayout returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExternalLayoutAccess().getPathFQNParserRuleCall_0_0());
				}
				lv_path_0_0=ruleFQN
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExternalLayoutRule());
					}
					set(
						$current,
						"path",
						lv_path_0_0,
						"org.gemoc.monilog.MoniLog4DSL.FQN");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getExternalLayoutAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExternalLayoutAccess().getValuesLanguageExpressionParserRuleCall_1_1_0());
					}
					lv_values_2_0=ruleLanguageExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExternalLayoutRule());
						}
						add(
							$current,
							"values",
							lv_values_2_0,
							"org.gemoc.monilog.MoniLog4DSL.LanguageExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleStreamEvent
entryRuleStreamEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStreamEventRule()); }
	iv_ruleStreamEvent=ruleStreamEvent
	{ $current=$iv_ruleStreamEvent.current; }
	EOF;

// Rule StreamEvent
ruleStreamEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_eventId_0_1=RULE_ID
					{
						newLeafNode(lv_eventId_0_1, grammarAccess.getStreamEventAccess().getEventIdIDTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStreamEventRule());
						}
						setWithLastConsumed(
							$current,
							"eventId",
							lv_eventId_0_1,
							"org.eclipse.xtext.common.Terminals.ID");
					}
					    |
					lv_eventId_0_2=RULE_STRING
					{
						newLeafNode(lv_eventId_0_2, grammarAccess.getStreamEventAccess().getEventIdSTRINGTerminalRuleCall_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStreamEventRule());
						}
						setWithLastConsumed(
							$current,
							"eventId",
							lv_eventId_0_2,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		(
			otherlv_1='['
			{
				newLeafNode(otherlv_1, grammarAccess.getStreamEventAccess().getLeftSquareBracketKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStreamEventAccess().getValuesEmptyOrPropertyValueParserRuleCall_1_1_0());
					}
					lv_values_2_0=ruleEmptyOrPropertyValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStreamEventRule());
						}
						add(
							$current,
							"values",
							lv_values_2_0,
							"org.gemoc.monilog.MoniLog4DSL.EmptyOrPropertyValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getStreamEventAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getStreamEventAccess().getValuesEmptyOrPropertyValueParserRuleCall_1_2_1_0());
						}
						lv_values_4_0=ruleEmptyOrPropertyValue
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStreamEventRule());
							}
							add(
								$current,
								"values",
								lv_values_4_0,
								"org.gemoc.monilog.MoniLog4DSL.EmptyOrPropertyValue");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_5=']'
			{
				newLeafNode(otherlv_5, grammarAccess.getStreamEventAccess().getRightSquareBracketKeyword_1_3());
			}
		)?
	)
;

// Entry rule entryRuleEmptyOrPropertyValue
entryRuleEmptyOrPropertyValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEmptyOrPropertyValueRule()); }
	iv_ruleEmptyOrPropertyValue=ruleEmptyOrPropertyValue
	{ $current=$iv_ruleEmptyOrPropertyValue.current; }
	EOF;

// Rule EmptyOrPropertyValue
ruleEmptyOrPropertyValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEmptyOrPropertyValueAccess().getEmptyAction_0(),
					$current);
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getEmptyOrPropertyValueAccess().getPropertyValueAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_id_2_0=RULE_ID
					{
						newLeafNode(lv_id_2_0, grammarAccess.getEmptyOrPropertyValueAccess().getIdIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEmptyOrPropertyValueRule());
						}
						setWithLastConsumed(
							$current,
							"id",
							lv_id_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				otherlv_3='='
				{
					newLeafNode(otherlv_3, grammarAccess.getEmptyOrPropertyValueAccess().getEqualsSignKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getEmptyOrPropertyValueAccess().getValueLanguageExpressionParserRuleCall_1_2_1_0());
						}
						lv_value_4_0=ruleLanguageExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getEmptyOrPropertyValueRule());
							}
							set(
								$current,
								"value",
								lv_value_4_0,
								"org.gemoc.monilog.MoniLog4DSL.LanguageExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)
	)
;

// Entry rule entryRuleLanguageExpression
entryRuleLanguageExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLanguageExpressionRule()); }
	iv_ruleLanguageExpression=ruleLanguageExpression
	{ $current=$iv_ruleLanguageExpression.current; }
	EOF;

// Rule LanguageExpression
ruleLanguageExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getLanguageExpressionAccess().getExplicitLanguageExpressionAction_0_0(),
						$current);
				}
			)
			(
				(
					(
						lv_languageId_1_1=RULE_ID
						{
							newLeafNode(lv_languageId_1_1, grammarAccess.getLanguageExpressionAccess().getLanguageIdIDTerminalRuleCall_0_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getLanguageExpressionRule());
							}
							setWithLastConsumed(
								$current,
								"languageId",
								lv_languageId_1_1,
								"org.eclipse.xtext.common.Terminals.ID");
						}
						    |
						lv_languageId_1_2=RULE_STRING
						{
							newLeafNode(lv_languageId_1_2, grammarAccess.getLanguageExpressionAccess().getLanguageIdSTRINGTerminalRuleCall_0_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getLanguageExpressionRule());
							}
							setWithLastConsumed(
								$current,
								"languageId",
								lv_languageId_1_2,
								"org.eclipse.xtext.common.Terminals.STRING");
						}
					)
				)
			)
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getLanguageExpressionAccess().getLeftParenthesisKeyword_0_2());
			}
			(
				(
					lv_expression_3_0=RULE_STRING
					{
						newLeafNode(lv_expression_3_0, grammarAccess.getLanguageExpressionAccess().getExpressionSTRINGTerminalRuleCall_0_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLanguageExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"expression",
							lv_expression_3_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getLanguageExpressionAccess().getRightParenthesisKeyword_0_4());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getLanguageExpressionAccess().getDefaultLanguageExpressionAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_expression_6_0=RULE_STRING
					{
						newLeafNode(lv_expression_6_0, grammarAccess.getLanguageExpressionAccess().getExpressionSTRINGTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLanguageExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"expression",
							lv_expression_6_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFQNRule()); }
	iv_ruleFQN=ruleFQN
	{ $current=$iv_ruleFQN.current.getText(); }
	EOF;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getFQNAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFQNAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Rule LogLevel
ruleLogLevel returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='CONFIG'
			{
				$current = grammarAccess.getLogLevelAccess().getConfigEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getLogLevelAccess().getConfigEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='FINE'
			{
				$current = grammarAccess.getLogLevelAccess().getFineEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getLogLevelAccess().getFineEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='FINER'
			{
				$current = grammarAccess.getLogLevelAccess().getFinerEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getLogLevelAccess().getFinerEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='FINEST'
			{
				$current = grammarAccess.getLogLevelAccess().getFinestEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getLogLevelAccess().getFinestEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='INFO'
			{
				$current = grammarAccess.getLogLevelAccess().getInfoEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getLogLevelAccess().getInfoEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='SEVERE'
			{
				$current = grammarAccess.getLogLevelAccess().getSevereEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getLogLevelAccess().getSevereEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='WARNING'
			{
				$current = grammarAccess.getLogLevelAccess().getWarningEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getLogLevelAccess().getWarningEnumLiteralDeclaration_6());
			}
		)
	)
;

// Rule TemporalPropertyConditionKind
ruleTemporalPropertyConditionKind returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='S'
			{
				$current = grammarAccess.getTemporalPropertyConditionKindAccess().getSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTemporalPropertyConditionKindAccess().getSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='V'
			{
				$current = grammarAccess.getTemporalPropertyConditionKindAccess().getVEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTemporalPropertyConditionKindAccess().getVEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='nS'
			{
				$current = grammarAccess.getTemporalPropertyConditionKindAccess().getNSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getTemporalPropertyConditionKindAccess().getNSEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='nV'
			{
				$current = grammarAccess.getTemporalPropertyConditionKindAccess().getNVEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getTemporalPropertyConditionKindAccess().getNVEnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
